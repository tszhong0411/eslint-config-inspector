{
  "configs": [
    {
      "name": "eslint/defaults/languages",
      "languageOptions": {
        "sourceType": "module",
        "ecmaVersion": "latest",
        "parserOptions": {}
      },
      "linterOptions": {
        "reportUnusedDisableDirectives": 1
      },
      "index": 0
    },
    {
      "name": "eslint/defaults/ignores",
      "ignores": [
        "**/node_modules/",
        ".git/"
      ],
      "index": 1
    },
    {
      "name": "eslint/defaults/files",
      "files": [
        "**/*.js",
        "**/*.mjs"
      ],
      "index": 2
    },
    {
      "name": "eslint/defaults/files-cjs",
      "files": [
        "**/*.cjs"
      ],
      "languageOptions": {
        "sourceType": "commonjs",
        "ecmaVersion": "latest"
      },
      "index": 3
    },
    {
      "ignores": [
        "node_modules/",
        "**/node_modules/**/",
        ".pnp/",
        "**/.pnp/**/",
        ".pnp.*",
        "**/.pnp.*/**",
        ".env*",
        "**/.env*/**",
        ".turbo/",
        "**/.turbo/**/",
        ".vercel/",
        "**/.vercel/**/",
        "npm-debug.log*",
        "**/npm-debug.log*/**",
        "yarn-debug.log*",
        "**/yarn-debug.log*/**",
        "yarn-error.log*",
        "**/yarn-error.log*/**",
        ".pnpm-debug.log*",
        "**/.pnpm-debug.log*/**",
        ".DS_Store",
        "**/.DS_Store/**",
        "*.pem",
        "**/*.pem/**",
        ".next/",
        "**/.next/**/",
        "out/",
        "**/out/**/",
        "build/",
        "**/build/**/",
        "dist/",
        "**/dist/**/",
        ".eslint-config-inspector/",
        "**/.eslint-config-inspector/**/",
        "volumes/",
        "**/volumes/**/",
        ".mdx/",
        "**/.mdx/**/",
        "playwright-report/",
        "**/playwright-report/**/",
        "test-results/",
        "**/test-results/**/",
        "coverage/",
        "**/coverage/**/",
        "*.tsbuildinfo",
        "**/*.tsbuildinfo/**",
        "next-env.d.ts",
        "**/next-env.d.ts/**"
      ],
      "index": 4
    },
    {
      "ignores": [
        "**/node_modules",
        "**/dist",
        "**/package-lock.json",
        "**/yarn.lock",
        "**/pnpm-lock.yaml",
        "**/bun.lockb",
        "**/output",
        "**/coverage",
        "**/temp",
        "**/.temp",
        "**/tmp",
        "**/.tmp",
        "**/.history",
        "**/.next",
        "**/.vercel",
        "**/.changeset",
        "**/.cache",
        "**/CHANGELOG*.md",
        "**/LICENSE*"
      ],
      "index": 5
    },
    {
      "name": "tszhong0411:javascript",
      "languageOptions": {
        "ecmaVersion": 2022,
        "globals": {
          "AbortController": false,
          "AbortSignal": false,
          "AbsoluteOrientationSensor": false,
          "AbstractRange": false,
          "Accelerometer": false,
          "addEventListener": false,
          "alert": false,
          "AnalyserNode": false,
          "Animation": false,
          "AnimationEffect": false,
          "AnimationEvent": false,
          "AnimationPlaybackEvent": false,
          "AnimationTimeline": false,
          "atob": false,
          "Attr": false,
          "Audio": false,
          "AudioBuffer": false,
          "AudioBufferSourceNode": false,
          "AudioContext": false,
          "AudioData": false,
          "AudioDecoder": false,
          "AudioDestinationNode": false,
          "AudioEncoder": false,
          "AudioListener": false,
          "AudioNode": false,
          "AudioParam": false,
          "AudioParamMap": false,
          "AudioProcessingEvent": false,
          "AudioScheduledSourceNode": false,
          "AudioSinkInfo": false,
          "AudioWorklet": false,
          "AudioWorkletGlobalScope": false,
          "AudioWorkletNode": false,
          "AudioWorkletProcessor": false,
          "AuthenticatorAssertionResponse": false,
          "AuthenticatorAttestationResponse": false,
          "AuthenticatorResponse": false,
          "BackgroundFetchManager": false,
          "BackgroundFetchRecord": false,
          "BackgroundFetchRegistration": false,
          "BarProp": false,
          "BaseAudioContext": false,
          "BatteryManager": false,
          "BeforeUnloadEvent": false,
          "BiquadFilterNode": false,
          "Blob": false,
          "BlobEvent": false,
          "Bluetooth": false,
          "BluetoothCharacteristicProperties": false,
          "BluetoothDevice": false,
          "BluetoothRemoteGATTCharacteristic": false,
          "BluetoothRemoteGATTDescriptor": false,
          "BluetoothRemoteGATTServer": false,
          "BluetoothRemoteGATTService": false,
          "BluetoothUUID": false,
          "blur": false,
          "BroadcastChannel": false,
          "BrowserCaptureMediaStreamTrack": false,
          "btoa": false,
          "ByteLengthQueuingStrategy": false,
          "Cache": false,
          "caches": false,
          "CacheStorage": false,
          "cancelAnimationFrame": false,
          "cancelIdleCallback": false,
          "CanvasCaptureMediaStream": false,
          "CanvasCaptureMediaStreamTrack": false,
          "CanvasGradient": false,
          "CanvasPattern": false,
          "CanvasRenderingContext2D": false,
          "CaptureController": false,
          "CaretPosition": false,
          "CDATASection": false,
          "ChannelMergerNode": false,
          "ChannelSplitterNode": false,
          "CharacterBoundsUpdateEvent": false,
          "CharacterData": false,
          "clearInterval": false,
          "clearTimeout": false,
          "clientInformation": false,
          "Clipboard": false,
          "ClipboardEvent": false,
          "ClipboardItem": false,
          "close": false,
          "closed": false,
          "CloseEvent": false,
          "CloseWatcher": false,
          "Comment": false,
          "CompositionEvent": false,
          "CompressionStream": false,
          "confirm": false,
          "console": false,
          "ConstantSourceNode": false,
          "ContentVisibilityAutoStateChangeEvent": false,
          "ConvolverNode": false,
          "CookieChangeEvent": false,
          "CookieDeprecationLabel": false,
          "cookieStore": false,
          "CookieStore": false,
          "CookieStoreManager": false,
          "CountQueuingStrategy": false,
          "createImageBitmap": false,
          "Credential": false,
          "credentialless": false,
          "CredentialsContainer": false,
          "CropTarget": false,
          "crossOriginIsolated": false,
          "crypto": false,
          "Crypto": false,
          "CryptoKey": false,
          "CSS": false,
          "CSSAnimation": false,
          "CSSConditionRule": false,
          "CSSContainerRule": false,
          "CSSCounterStyleRule": false,
          "CSSFontFaceRule": false,
          "CSSFontFeatureValuesRule": false,
          "CSSFontPaletteValuesRule": false,
          "CSSGroupingRule": false,
          "CSSImageValue": false,
          "CSSImportRule": false,
          "CSSKeyframeRule": false,
          "CSSKeyframesRule": false,
          "CSSKeywordValue": false,
          "CSSLayerBlockRule": false,
          "CSSLayerStatementRule": false,
          "CSSMathClamp": false,
          "CSSMathInvert": false,
          "CSSMathMax": false,
          "CSSMathMin": false,
          "CSSMathNegate": false,
          "CSSMathProduct": false,
          "CSSMathSum": false,
          "CSSMathValue": false,
          "CSSMatrixComponent": false,
          "CSSMediaRule": false,
          "CSSNamespaceRule": false,
          "CSSNumericArray": false,
          "CSSNumericValue": false,
          "CSSPageRule": false,
          "CSSPerspective": false,
          "CSSPositionTryDescriptors": false,
          "CSSPositionTryRule": false,
          "CSSPositionValue": false,
          "CSSPropertyRule": false,
          "CSSRotate": false,
          "CSSRule": false,
          "CSSRuleList": false,
          "CSSScale": false,
          "CSSScopeRule": false,
          "CSSSkew": false,
          "CSSSkewX": false,
          "CSSSkewY": false,
          "CSSStartingStyleRule": false,
          "CSSStyleDeclaration": false,
          "CSSStyleRule": false,
          "CSSStyleSheet": false,
          "CSSStyleValue": false,
          "CSSSupportsRule": false,
          "CSSTransformComponent": false,
          "CSSTransformValue": false,
          "CSSTransition": false,
          "CSSTranslate": false,
          "CSSUnitValue": false,
          "CSSUnparsedValue": false,
          "CSSVariableReferenceValue": false,
          "CSSViewTransitionRule": false,
          "currentFrame": false,
          "currentTime": false,
          "CustomElementRegistry": false,
          "customElements": false,
          "CustomEvent": false,
          "CustomStateSet": false,
          "DataTransfer": false,
          "DataTransferItem": false,
          "DataTransferItemList": false,
          "DecompressionStream": false,
          "DelayNode": false,
          "DelegatedInkTrailPresenter": false,
          "DeviceMotionEvent": false,
          "DeviceMotionEventAcceleration": false,
          "DeviceMotionEventRotationRate": false,
          "DeviceOrientationEvent": false,
          "devicePixelRatio": false,
          "dispatchEvent": false,
          "document": "readonly",
          "Document": false,
          "DocumentFragment": false,
          "documentPictureInPicture": false,
          "DocumentPictureInPicture": false,
          "DocumentPictureInPictureEvent": false,
          "DocumentTimeline": false,
          "DocumentType": false,
          "DOMError": false,
          "DOMException": false,
          "DOMImplementation": false,
          "DOMMatrix": false,
          "DOMMatrixReadOnly": false,
          "DOMParser": false,
          "DOMPoint": false,
          "DOMPointReadOnly": false,
          "DOMQuad": false,
          "DOMRect": false,
          "DOMRectList": false,
          "DOMRectReadOnly": false,
          "DOMStringList": false,
          "DOMStringMap": false,
          "DOMTokenList": false,
          "DragEvent": false,
          "DynamicsCompressorNode": false,
          "EditContext": false,
          "Element": false,
          "ElementInternals": false,
          "EncodedAudioChunk": false,
          "EncodedVideoChunk": false,
          "ErrorEvent": false,
          "event": false,
          "Event": false,
          "EventCounts": false,
          "EventSource": false,
          "EventTarget": false,
          "external": false,
          "External": false,
          "EyeDropper": false,
          "FeaturePolicy": false,
          "FederatedCredential": false,
          "fence": false,
          "Fence": false,
          "FencedFrameConfig": false,
          "fetch": false,
          "fetchLater": false,
          "FetchLaterResult": false,
          "File": false,
          "FileList": false,
          "FileReader": false,
          "FileSystem": false,
          "FileSystemDirectoryEntry": false,
          "FileSystemDirectoryHandle": false,
          "FileSystemDirectoryReader": false,
          "FileSystemEntry": false,
          "FileSystemFileEntry": false,
          "FileSystemFileHandle": false,
          "FileSystemHandle": false,
          "FileSystemWritableFileStream": false,
          "find": false,
          "Float16Array": false,
          "focus": false,
          "FocusEvent": false,
          "FontData": false,
          "FontFace": false,
          "FontFaceSet": false,
          "FontFaceSetLoadEvent": false,
          "FormData": false,
          "FormDataEvent": false,
          "FragmentDirective": false,
          "frameElement": false,
          "frames": false,
          "GainNode": false,
          "Gamepad": false,
          "GamepadAxisMoveEvent": false,
          "GamepadButton": false,
          "GamepadButtonEvent": false,
          "GamepadEvent": false,
          "GamepadHapticActuator": false,
          "GamepadPose": false,
          "Geolocation": false,
          "GeolocationCoordinates": false,
          "GeolocationPosition": false,
          "GeolocationPositionError": false,
          "getComputedStyle": false,
          "getScreenDetails": false,
          "getSelection": false,
          "GPU": false,
          "GPUAdapter": false,
          "GPUAdapterInfo": false,
          "GPUBindGroup": false,
          "GPUBindGroupLayout": false,
          "GPUBuffer": false,
          "GPUBufferUsage": false,
          "GPUCanvasContext": false,
          "GPUColorWrite": false,
          "GPUCommandBuffer": false,
          "GPUCommandEncoder": false,
          "GPUCompilationInfo": false,
          "GPUCompilationMessage": false,
          "GPUComputePassEncoder": false,
          "GPUComputePipeline": false,
          "GPUDevice": false,
          "GPUDeviceLostInfo": false,
          "GPUError": false,
          "GPUExternalTexture": false,
          "GPUInternalError": false,
          "GPUMapMode": false,
          "GPUOutOfMemoryError": false,
          "GPUPipelineError": false,
          "GPUPipelineLayout": false,
          "GPUQuerySet": false,
          "GPUQueue": false,
          "GPURenderBundle": false,
          "GPURenderBundleEncoder": false,
          "GPURenderPassEncoder": false,
          "GPURenderPipeline": false,
          "GPUSampler": false,
          "GPUShaderModule": false,
          "GPUShaderStage": false,
          "GPUSupportedFeatures": false,
          "GPUSupportedLimits": false,
          "GPUTexture": false,
          "GPUTextureUsage": false,
          "GPUTextureView": false,
          "GPUUncapturedErrorEvent": false,
          "GPUValidationError": false,
          "GravitySensor": false,
          "Gyroscope": false,
          "HashChangeEvent": false,
          "Headers": false,
          "HID": false,
          "HIDConnectionEvent": false,
          "HIDDevice": false,
          "HIDInputReportEvent": false,
          "Highlight": false,
          "HighlightRegistry": false,
          "history": false,
          "History": false,
          "HTMLAllCollection": false,
          "HTMLAnchorElement": false,
          "HTMLAreaElement": false,
          "HTMLAudioElement": false,
          "HTMLBaseElement": false,
          "HTMLBodyElement": false,
          "HTMLBRElement": false,
          "HTMLButtonElement": false,
          "HTMLCanvasElement": false,
          "HTMLCollection": false,
          "HTMLDataElement": false,
          "HTMLDataListElement": false,
          "HTMLDetailsElement": false,
          "HTMLDialogElement": false,
          "HTMLDirectoryElement": false,
          "HTMLDivElement": false,
          "HTMLDListElement": false,
          "HTMLDocument": false,
          "HTMLElement": false,
          "HTMLEmbedElement": false,
          "HTMLFencedFrameElement": false,
          "HTMLFieldSetElement": false,
          "HTMLFontElement": false,
          "HTMLFormControlsCollection": false,
          "HTMLFormElement": false,
          "HTMLFrameElement": false,
          "HTMLFrameSetElement": false,
          "HTMLHeadElement": false,
          "HTMLHeadingElement": false,
          "HTMLHRElement": false,
          "HTMLHtmlElement": false,
          "HTMLIFrameElement": false,
          "HTMLImageElement": false,
          "HTMLInputElement": false,
          "HTMLLabelElement": false,
          "HTMLLegendElement": false,
          "HTMLLIElement": false,
          "HTMLLinkElement": false,
          "HTMLMapElement": false,
          "HTMLMarqueeElement": false,
          "HTMLMediaElement": false,
          "HTMLMenuElement": false,
          "HTMLMetaElement": false,
          "HTMLMeterElement": false,
          "HTMLModElement": false,
          "HTMLObjectElement": false,
          "HTMLOListElement": false,
          "HTMLOptGroupElement": false,
          "HTMLOptionElement": false,
          "HTMLOptionsCollection": false,
          "HTMLOutputElement": false,
          "HTMLParagraphElement": false,
          "HTMLParamElement": false,
          "HTMLPictureElement": false,
          "HTMLPreElement": false,
          "HTMLProgressElement": false,
          "HTMLQuoteElement": false,
          "HTMLScriptElement": false,
          "HTMLSelectElement": false,
          "HTMLSlotElement": false,
          "HTMLSourceElement": false,
          "HTMLSpanElement": false,
          "HTMLStyleElement": false,
          "HTMLTableCaptionElement": false,
          "HTMLTableCellElement": false,
          "HTMLTableColElement": false,
          "HTMLTableElement": false,
          "HTMLTableRowElement": false,
          "HTMLTableSectionElement": false,
          "HTMLTemplateElement": false,
          "HTMLTextAreaElement": false,
          "HTMLTimeElement": false,
          "HTMLTitleElement": false,
          "HTMLTrackElement": false,
          "HTMLUListElement": false,
          "HTMLUnknownElement": false,
          "HTMLVideoElement": false,
          "IDBCursor": false,
          "IDBCursorWithValue": false,
          "IDBDatabase": false,
          "IDBFactory": false,
          "IDBIndex": false,
          "IDBKeyRange": false,
          "IDBObjectStore": false,
          "IDBOpenDBRequest": false,
          "IDBRequest": false,
          "IDBTransaction": false,
          "IDBVersionChangeEvent": false,
          "IdentityCredential": false,
          "IdentityCredentialError": false,
          "IdentityProvider": false,
          "IdleDeadline": false,
          "IdleDetector": false,
          "IIRFilterNode": false,
          "Image": false,
          "ImageBitmap": false,
          "ImageBitmapRenderingContext": false,
          "ImageCapture": false,
          "ImageData": false,
          "ImageDecoder": false,
          "ImageTrack": false,
          "ImageTrackList": false,
          "indexedDB": false,
          "Ink": false,
          "innerHeight": false,
          "innerWidth": false,
          "InputDeviceCapabilities": false,
          "InputDeviceInfo": false,
          "InputEvent": false,
          "IntersectionObserver": false,
          "IntersectionObserverEntry": false,
          "isSecureContext": false,
          "Iterator": false,
          "Keyboard": false,
          "KeyboardEvent": false,
          "KeyboardLayoutMap": false,
          "KeyframeEffect": false,
          "LargestContentfulPaint": false,
          "LaunchParams": false,
          "launchQueue": false,
          "LaunchQueue": false,
          "LayoutShift": false,
          "LayoutShiftAttribution": false,
          "length": false,
          "LinearAccelerationSensor": false,
          "localStorage": false,
          "location": true,
          "Location": false,
          "locationbar": false,
          "Lock": false,
          "LockManager": false,
          "matchMedia": false,
          "MathMLElement": false,
          "MediaCapabilities": false,
          "MediaCapabilitiesInfo": false,
          "MediaDeviceInfo": false,
          "MediaDevices": false,
          "MediaElementAudioSourceNode": false,
          "MediaEncryptedEvent": false,
          "MediaError": false,
          "MediaKeyError": false,
          "MediaKeyMessageEvent": false,
          "MediaKeys": false,
          "MediaKeySession": false,
          "MediaKeyStatusMap": false,
          "MediaKeySystemAccess": false,
          "MediaList": false,
          "MediaMetadata": false,
          "MediaQueryList": false,
          "MediaQueryListEvent": false,
          "MediaRecorder": false,
          "MediaRecorderErrorEvent": false,
          "MediaSession": false,
          "MediaSource": false,
          "MediaSourceHandle": false,
          "MediaStream": false,
          "MediaStreamAudioDestinationNode": false,
          "MediaStreamAudioSourceNode": false,
          "MediaStreamEvent": false,
          "MediaStreamTrack": false,
          "MediaStreamTrackAudioSourceNode": false,
          "MediaStreamTrackAudioStats": false,
          "MediaStreamTrackEvent": false,
          "MediaStreamTrackGenerator": false,
          "MediaStreamTrackProcessor": false,
          "MediaStreamTrackVideoStats": false,
          "menubar": false,
          "MessageChannel": false,
          "MessageEvent": false,
          "MessagePort": false,
          "MIDIAccess": false,
          "MIDIConnectionEvent": false,
          "MIDIInput": false,
          "MIDIInputMap": false,
          "MIDIMessageEvent": false,
          "MIDIOutput": false,
          "MIDIOutputMap": false,
          "MIDIPort": false,
          "MimeType": false,
          "MimeTypeArray": false,
          "model": false,
          "ModelGenericSession": false,
          "ModelManager": false,
          "MouseEvent": false,
          "moveBy": false,
          "moveTo": false,
          "MutationEvent": false,
          "MutationObserver": false,
          "MutationRecord": false,
          "name": false,
          "NamedNodeMap": false,
          "NavigateEvent": false,
          "navigation": false,
          "Navigation": false,
          "NavigationActivation": false,
          "NavigationCurrentEntryChangeEvent": false,
          "NavigationDestination": false,
          "NavigationHistoryEntry": false,
          "NavigationPreloadManager": false,
          "NavigationTransition": false,
          "navigator": "readonly",
          "Navigator": false,
          "NavigatorLogin": false,
          "NavigatorManagedData": false,
          "NavigatorUAData": false,
          "NetworkInformation": false,
          "Node": false,
          "NodeFilter": false,
          "NodeIterator": false,
          "NodeList": false,
          "Notification": false,
          "NotifyPaintEvent": false,
          "NotRestoredReasonDetails": false,
          "NotRestoredReasons": false,
          "OfflineAudioCompletionEvent": false,
          "OfflineAudioContext": false,
          "offscreenBuffering": false,
          "OffscreenCanvas": false,
          "OffscreenCanvasRenderingContext2D": false,
          "onabort": true,
          "onafterprint": true,
          "onanimationcancel": true,
          "onanimationend": true,
          "onanimationiteration": true,
          "onanimationstart": true,
          "onappinstalled": true,
          "onauxclick": true,
          "onbeforeinput": true,
          "onbeforeinstallprompt": true,
          "onbeforematch": true,
          "onbeforeprint": true,
          "onbeforetoggle": true,
          "onbeforeunload": true,
          "onbeforexrselect": true,
          "onblur": true,
          "oncancel": true,
          "oncanplay": true,
          "oncanplaythrough": true,
          "onchange": true,
          "onclick": true,
          "onclose": true,
          "oncontentvisibilityautostatechange": true,
          "oncontextlost": true,
          "oncontextmenu": true,
          "oncontextrestored": true,
          "oncopy": true,
          "oncuechange": true,
          "oncut": true,
          "ondblclick": true,
          "ondevicemotion": true,
          "ondeviceorientation": true,
          "ondeviceorientationabsolute": true,
          "ondrag": true,
          "ondragend": true,
          "ondragenter": true,
          "ondragleave": true,
          "ondragover": true,
          "ondragstart": true,
          "ondrop": true,
          "ondurationchange": true,
          "onemptied": true,
          "onended": true,
          "onerror": true,
          "onfocus": true,
          "onformdata": true,
          "ongamepadconnected": true,
          "ongamepaddisconnected": true,
          "ongotpointercapture": true,
          "onhashchange": true,
          "oninput": true,
          "oninvalid": true,
          "onkeydown": true,
          "onkeypress": true,
          "onkeyup": true,
          "onlanguagechange": true,
          "onload": true,
          "onloadeddata": true,
          "onloadedmetadata": true,
          "onloadstart": true,
          "onlostpointercapture": true,
          "onmessage": true,
          "onmessageerror": true,
          "onmousedown": true,
          "onmouseenter": true,
          "onmouseleave": true,
          "onmousemove": true,
          "onmouseout": true,
          "onmouseover": true,
          "onmouseup": true,
          "onmousewheel": true,
          "onoffline": true,
          "ononline": true,
          "onpagehide": true,
          "onpagereveal": true,
          "onpageshow": true,
          "onpageswap": true,
          "onpaste": true,
          "onpause": true,
          "onplay": true,
          "onplaying": true,
          "onpointercancel": true,
          "onpointerdown": true,
          "onpointerenter": true,
          "onpointerleave": true,
          "onpointermove": true,
          "onpointerout": true,
          "onpointerover": true,
          "onpointerrawupdate": true,
          "onpointerup": true,
          "onpopstate": true,
          "onprogress": true,
          "onratechange": true,
          "onrejectionhandled": true,
          "onreset": true,
          "onresize": true,
          "onscroll": true,
          "onscrollend": true,
          "onsearch": true,
          "onsecuritypolicyviolation": true,
          "onseeked": true,
          "onseeking": true,
          "onselect": true,
          "onselectionchange": true,
          "onselectstart": true,
          "onslotchange": true,
          "onstalled": true,
          "onstorage": true,
          "onsubmit": true,
          "onsuspend": true,
          "ontimeupdate": true,
          "ontoggle": true,
          "ontransitioncancel": true,
          "ontransitionend": true,
          "ontransitionrun": true,
          "ontransitionstart": true,
          "onunhandledrejection": true,
          "onunload": true,
          "onvolumechange": true,
          "onwaiting": true,
          "onwheel": true,
          "open": false,
          "opener": false,
          "Option": false,
          "OrientationSensor": false,
          "origin": false,
          "originAgentCluster": false,
          "OscillatorNode": false,
          "OTPCredential": false,
          "outerHeight": false,
          "outerWidth": false,
          "OverconstrainedError": false,
          "PageRevealEvent": false,
          "PageSwapEvent": false,
          "PageTransitionEvent": false,
          "pageXOffset": false,
          "pageYOffset": false,
          "PannerNode": false,
          "parent": false,
          "PasswordCredential": false,
          "Path2D": false,
          "PaymentAddress": false,
          "PaymentManager": false,
          "PaymentMethodChangeEvent": false,
          "PaymentRequest": false,
          "PaymentRequestUpdateEvent": false,
          "PaymentResponse": false,
          "performance": false,
          "Performance": false,
          "PerformanceElementTiming": false,
          "PerformanceEntry": false,
          "PerformanceEventTiming": false,
          "PerformanceLongAnimationFrameTiming": false,
          "PerformanceLongTaskTiming": false,
          "PerformanceMark": false,
          "PerformanceMeasure": false,
          "PerformanceNavigation": false,
          "PerformanceNavigationTiming": false,
          "PerformanceObserver": false,
          "PerformanceObserverEntryList": false,
          "PerformancePaintTiming": false,
          "PerformanceResourceTiming": false,
          "PerformanceScriptTiming": false,
          "PerformanceServerTiming": false,
          "PerformanceTiming": false,
          "PeriodicSyncManager": false,
          "PeriodicWave": false,
          "Permissions": false,
          "PermissionStatus": false,
          "PERSISTENT": false,
          "personalbar": false,
          "PictureInPictureEvent": false,
          "PictureInPictureWindow": false,
          "Plugin": false,
          "PluginArray": false,
          "PointerEvent": false,
          "PopStateEvent": false,
          "postMessage": false,
          "Presentation": false,
          "PresentationAvailability": false,
          "PresentationConnection": false,
          "PresentationConnectionAvailableEvent": false,
          "PresentationConnectionCloseEvent": false,
          "PresentationConnectionList": false,
          "PresentationReceiver": false,
          "PresentationRequest": false,
          "PressureObserver": false,
          "PressureRecord": false,
          "print": false,
          "ProcessingInstruction": false,
          "Profiler": false,
          "ProgressEvent": false,
          "PromiseRejectionEvent": false,
          "prompt": false,
          "ProtectedAudience": false,
          "PublicKeyCredential": false,
          "PushManager": false,
          "PushSubscription": false,
          "PushSubscriptionOptions": false,
          "queryLocalFonts": false,
          "queueMicrotask": false,
          "RadioNodeList": false,
          "Range": false,
          "ReadableByteStreamController": false,
          "ReadableStream": false,
          "ReadableStreamBYOBReader": false,
          "ReadableStreamBYOBRequest": false,
          "ReadableStreamDefaultController": false,
          "ReadableStreamDefaultReader": false,
          "registerProcessor": false,
          "RelativeOrientationSensor": false,
          "RemotePlayback": false,
          "removeEventListener": false,
          "reportError": false,
          "ReportingObserver": false,
          "Request": false,
          "requestAnimationFrame": false,
          "requestIdleCallback": false,
          "resizeBy": false,
          "ResizeObserver": false,
          "ResizeObserverEntry": false,
          "ResizeObserverSize": false,
          "resizeTo": false,
          "Response": false,
          "RTCCertificate": false,
          "RTCDataChannel": false,
          "RTCDataChannelEvent": false,
          "RTCDtlsTransport": false,
          "RTCDTMFSender": false,
          "RTCDTMFToneChangeEvent": false,
          "RTCEncodedAudioFrame": false,
          "RTCEncodedVideoFrame": false,
          "RTCError": false,
          "RTCErrorEvent": false,
          "RTCIceCandidate": false,
          "RTCIceTransport": false,
          "RTCPeerConnection": false,
          "RTCPeerConnectionIceErrorEvent": false,
          "RTCPeerConnectionIceEvent": false,
          "RTCRtpReceiver": false,
          "RTCRtpScriptTransform": false,
          "RTCRtpSender": false,
          "RTCRtpTransceiver": false,
          "RTCSctpTransport": false,
          "RTCSessionDescription": false,
          "RTCStatsReport": false,
          "RTCTrackEvent": false,
          "sampleRate": false,
          "scheduler": false,
          "Scheduler": false,
          "Scheduling": false,
          "screen": false,
          "Screen": false,
          "ScreenDetailed": false,
          "ScreenDetails": false,
          "screenLeft": false,
          "ScreenOrientation": false,
          "screenTop": false,
          "screenX": false,
          "screenY": false,
          "ScriptProcessorNode": false,
          "scroll": false,
          "scrollbars": false,
          "scrollBy": false,
          "ScrollTimeline": false,
          "scrollTo": false,
          "scrollX": false,
          "scrollY": false,
          "SecurityPolicyViolationEvent": false,
          "Selection": false,
          "self": false,
          "Sensor": false,
          "SensorErrorEvent": false,
          "Serial": false,
          "SerialPort": false,
          "ServiceWorker": false,
          "ServiceWorkerContainer": false,
          "ServiceWorkerRegistration": false,
          "sessionStorage": false,
          "setInterval": false,
          "setTimeout": false,
          "ShadowRoot": false,
          "sharedStorage": false,
          "SharedStorage": false,
          "SharedStorageWorklet": false,
          "SharedWorker": false,
          "showDirectoryPicker": false,
          "showOpenFilePicker": false,
          "showSaveFilePicker": false,
          "SourceBuffer": false,
          "SourceBufferList": false,
          "speechSynthesis": false,
          "SpeechSynthesis": false,
          "SpeechSynthesisErrorEvent": false,
          "SpeechSynthesisEvent": false,
          "SpeechSynthesisUtterance": false,
          "SpeechSynthesisVoice": false,
          "StaticRange": false,
          "status": false,
          "statusbar": false,
          "StereoPannerNode": false,
          "stop": false,
          "Storage": false,
          "StorageBucket": false,
          "StorageBucketManager": false,
          "StorageEvent": false,
          "StorageManager": false,
          "structuredClone": false,
          "styleMedia": false,
          "StylePropertyMap": false,
          "StylePropertyMapReadOnly": false,
          "StyleSheet": false,
          "StyleSheetList": false,
          "SubmitEvent": false,
          "SubtleCrypto": false,
          "SVGAElement": false,
          "SVGAngle": false,
          "SVGAnimatedAngle": false,
          "SVGAnimatedBoolean": false,
          "SVGAnimatedEnumeration": false,
          "SVGAnimatedInteger": false,
          "SVGAnimatedLength": false,
          "SVGAnimatedLengthList": false,
          "SVGAnimatedNumber": false,
          "SVGAnimatedNumberList": false,
          "SVGAnimatedPreserveAspectRatio": false,
          "SVGAnimatedRect": false,
          "SVGAnimatedString": false,
          "SVGAnimatedTransformList": false,
          "SVGAnimateElement": false,
          "SVGAnimateMotionElement": false,
          "SVGAnimateTransformElement": false,
          "SVGAnimationElement": false,
          "SVGCircleElement": false,
          "SVGClipPathElement": false,
          "SVGComponentTransferFunctionElement": false,
          "SVGDefsElement": false,
          "SVGDescElement": false,
          "SVGElement": false,
          "SVGEllipseElement": false,
          "SVGFEBlendElement": false,
          "SVGFEColorMatrixElement": false,
          "SVGFEComponentTransferElement": false,
          "SVGFECompositeElement": false,
          "SVGFEConvolveMatrixElement": false,
          "SVGFEDiffuseLightingElement": false,
          "SVGFEDisplacementMapElement": false,
          "SVGFEDistantLightElement": false,
          "SVGFEDropShadowElement": false,
          "SVGFEFloodElement": false,
          "SVGFEFuncAElement": false,
          "SVGFEFuncBElement": false,
          "SVGFEFuncGElement": false,
          "SVGFEFuncRElement": false,
          "SVGFEGaussianBlurElement": false,
          "SVGFEImageElement": false,
          "SVGFEMergeElement": false,
          "SVGFEMergeNodeElement": false,
          "SVGFEMorphologyElement": false,
          "SVGFEOffsetElement": false,
          "SVGFEPointLightElement": false,
          "SVGFESpecularLightingElement": false,
          "SVGFESpotLightElement": false,
          "SVGFETileElement": false,
          "SVGFETurbulenceElement": false,
          "SVGFilterElement": false,
          "SVGForeignObjectElement": false,
          "SVGGElement": false,
          "SVGGeometryElement": false,
          "SVGGradientElement": false,
          "SVGGraphicsElement": false,
          "SVGImageElement": false,
          "SVGLength": false,
          "SVGLengthList": false,
          "SVGLinearGradientElement": false,
          "SVGLineElement": false,
          "SVGMarkerElement": false,
          "SVGMaskElement": false,
          "SVGMatrix": false,
          "SVGMetadataElement": false,
          "SVGMPathElement": false,
          "SVGNumber": false,
          "SVGNumberList": false,
          "SVGPathElement": false,
          "SVGPatternElement": false,
          "SVGPoint": false,
          "SVGPointList": false,
          "SVGPolygonElement": false,
          "SVGPolylineElement": false,
          "SVGPreserveAspectRatio": false,
          "SVGRadialGradientElement": false,
          "SVGRect": false,
          "SVGRectElement": false,
          "SVGScriptElement": false,
          "SVGSetElement": false,
          "SVGStopElement": false,
          "SVGStringList": false,
          "SVGStyleElement": false,
          "SVGSVGElement": false,
          "SVGSwitchElement": false,
          "SVGSymbolElement": false,
          "SVGTextContentElement": false,
          "SVGTextElement": false,
          "SVGTextPathElement": false,
          "SVGTextPositioningElement": false,
          "SVGTitleElement": false,
          "SVGTransform": false,
          "SVGTransformList": false,
          "SVGTSpanElement": false,
          "SVGUnitTypes": false,
          "SVGUseElement": false,
          "SVGViewElement": false,
          "SyncManager": false,
          "TaskAttributionTiming": false,
          "TaskController": false,
          "TaskPriorityChangeEvent": false,
          "TaskSignal": false,
          "TEMPORARY": false,
          "Text": false,
          "TextDecoder": false,
          "TextDecoderStream": false,
          "TextEncoder": false,
          "TextEncoderStream": false,
          "TextEvent": false,
          "TextFormat": false,
          "TextFormatUpdateEvent": false,
          "TextMetrics": false,
          "TextTrack": false,
          "TextTrackCue": false,
          "TextTrackCueList": false,
          "TextTrackList": false,
          "TextUpdateEvent": false,
          "TimeEvent": false,
          "TimeRanges": false,
          "ToggleEvent": false,
          "toolbar": false,
          "top": false,
          "Touch": false,
          "TouchEvent": false,
          "TouchList": false,
          "TrackEvent": false,
          "TransformStream": false,
          "TransformStreamDefaultController": false,
          "TransitionEvent": false,
          "TreeWalker": false,
          "TrustedHTML": false,
          "TrustedScript": false,
          "TrustedScriptURL": false,
          "TrustedTypePolicy": false,
          "TrustedTypePolicyFactory": false,
          "trustedTypes": false,
          "UIEvent": false,
          "URL": false,
          "URLPattern": false,
          "URLSearchParams": false,
          "USB": false,
          "USBAlternateInterface": false,
          "USBConfiguration": false,
          "USBConnectionEvent": false,
          "USBDevice": false,
          "USBEndpoint": false,
          "USBInterface": false,
          "USBInTransferResult": false,
          "USBIsochronousInTransferPacket": false,
          "USBIsochronousInTransferResult": false,
          "USBIsochronousOutTransferPacket": false,
          "USBIsochronousOutTransferResult": false,
          "USBOutTransferResult": false,
          "UserActivation": false,
          "ValidityState": false,
          "VideoColorSpace": false,
          "VideoDecoder": false,
          "VideoEncoder": false,
          "VideoFrame": false,
          "VideoPlaybackQuality": false,
          "ViewTimeline": false,
          "ViewTransition": false,
          "ViewTransitionTypeSet": false,
          "VirtualKeyboard": false,
          "VirtualKeyboardGeometryChangeEvent": false,
          "VisibilityStateEntry": false,
          "visualViewport": false,
          "VisualViewport": false,
          "VTTCue": false,
          "VTTRegion": false,
          "WakeLock": false,
          "WakeLockSentinel": false,
          "WaveShaperNode": false,
          "WebAssembly": false,
          "WebGL2RenderingContext": false,
          "WebGLActiveInfo": false,
          "WebGLBuffer": false,
          "WebGLContextEvent": false,
          "WebGLFramebuffer": false,
          "WebGLObject": false,
          "WebGLProgram": false,
          "WebGLQuery": false,
          "WebGLRenderbuffer": false,
          "WebGLRenderingContext": false,
          "WebGLSampler": false,
          "WebGLShader": false,
          "WebGLShaderPrecisionFormat": false,
          "WebGLSync": false,
          "WebGLTexture": false,
          "WebGLTransformFeedback": false,
          "WebGLUniformLocation": false,
          "WebGLVertexArrayObject": false,
          "WebSocket": false,
          "WebSocketError": false,
          "WebSocketStream": false,
          "WebTransport": false,
          "WebTransportBidirectionalStream": false,
          "WebTransportDatagramDuplexStream": false,
          "WebTransportError": false,
          "WebTransportReceiveStream": false,
          "WebTransportSendStream": false,
          "WGSLLanguageFeatures": false,
          "WheelEvent": false,
          "window": "readonly",
          "Window": false,
          "WindowControlsOverlay": false,
          "WindowControlsOverlayGeometryChangeEvent": false,
          "Worker": false,
          "Worklet": false,
          "WorkletGlobalScope": false,
          "WritableStream": false,
          "WritableStreamDefaultController": false,
          "WritableStreamDefaultWriter": false,
          "XMLDocument": false,
          "XMLHttpRequest": false,
          "XMLHttpRequestEventTarget": false,
          "XMLHttpRequestUpload": false,
          "XMLSerializer": false,
          "XPathEvaluator": false,
          "XPathExpression": false,
          "XPathResult": false,
          "XRAnchor": false,
          "XRAnchorSet": false,
          "XRBoundedReferenceSpace": false,
          "XRCamera": false,
          "XRCPUDepthInformation": false,
          "XRDepthInformation": false,
          "XRDOMOverlayState": false,
          "XRFrame": false,
          "XRHitTestResult": false,
          "XRHitTestSource": false,
          "XRInputSource": false,
          "XRInputSourceArray": false,
          "XRInputSourceEvent": false,
          "XRInputSourcesChangeEvent": false,
          "XRLayer": false,
          "XRLightEstimate": false,
          "XRLightProbe": false,
          "XRPose": false,
          "XRRay": false,
          "XRReferenceSpace": false,
          "XRReferenceSpaceEvent": false,
          "XRRenderState": false,
          "XRRigidTransform": false,
          "XRSession": false,
          "XRSessionEvent": false,
          "XRSpace": false,
          "XRSystem": false,
          "XRTransientInputHitTestResult": false,
          "XRTransientInputHitTestSource": false,
          "XRView": false,
          "XRViewerPose": false,
          "XRViewport": false,
          "XRWebGLBinding": false,
          "XRWebGLDepthInformation": false,
          "XRWebGLLayer": false,
          "XSLTProcessor": false,
          "__dirname": false,
          "__filename": false,
          "Buffer": false,
          "clearImmediate": false,
          "exports": true,
          "global": false,
          "module": false,
          "process": false,
          "require": false,
          "setImmediate": false,
          "AggregateError": false,
          "Array": false,
          "ArrayBuffer": false,
          "Atomics": false,
          "BigInt": false,
          "BigInt64Array": false,
          "BigUint64Array": false,
          "Boolean": false,
          "DataView": false,
          "Date": false,
          "decodeURI": false,
          "decodeURIComponent": false,
          "encodeURI": false,
          "encodeURIComponent": false,
          "Error": false,
          "escape": false,
          "eval": false,
          "EvalError": false,
          "FinalizationRegistry": false,
          "Float32Array": false,
          "Float64Array": false,
          "Function": false,
          "globalThis": false,
          "Infinity": false,
          "Int16Array": false,
          "Int32Array": false,
          "Int8Array": false,
          "Intl": false,
          "isFinite": false,
          "isNaN": false,
          "JSON": false,
          "Map": false,
          "Math": false,
          "NaN": false,
          "Number": false,
          "Object": false,
          "parseFloat": false,
          "parseInt": false,
          "Promise": false,
          "Proxy": false,
          "RangeError": false,
          "ReferenceError": false,
          "Reflect": false,
          "RegExp": false,
          "Set": false,
          "SharedArrayBuffer": false,
          "String": false,
          "Symbol": false,
          "SyntaxError": false,
          "TypeError": false,
          "Uint16Array": false,
          "Uint32Array": false,
          "Uint8Array": false,
          "Uint8ClampedArray": false,
          "undefined": false,
          "unescape": false,
          "URIError": false,
          "WeakMap": false,
          "WeakRef": false,
          "WeakSet": false
        },
        "parserOptions": {
          "ecmaFeatures": {
            "jsx": true
          },
          "ecmaVersion": 2022,
          "sourceType": "module"
        }
      },
      "linterOptions": {
        "reportUnusedDisableDirectives": true
      },
      "plugins": {
        "unused-imports": {}
      },
      "rules": {
        "constructor-super": "error",
        "for-direction": "error",
        "getter-return": "error",
        "no-async-promise-executor": "error",
        "no-case-declarations": "error",
        "no-class-assign": "error",
        "no-compare-neg-zero": "error",
        "no-cond-assign": "error",
        "no-const-assign": "error",
        "no-constant-binary-expression": "error",
        "no-constant-condition": "error",
        "no-control-regex": "error",
        "no-debugger": "error",
        "no-delete-var": "error",
        "no-dupe-args": "error",
        "no-dupe-class-members": "error",
        "no-dupe-else-if": "error",
        "no-dupe-keys": "error",
        "no-duplicate-case": "error",
        "no-empty": "error",
        "no-empty-character-class": "error",
        "no-empty-pattern": "error",
        "no-empty-static-block": "error",
        "no-ex-assign": "error",
        "no-extra-boolean-cast": "error",
        "no-fallthrough": "error",
        "no-func-assign": "error",
        "no-global-assign": "error",
        "no-import-assign": "error",
        "no-invalid-regexp": "error",
        "no-irregular-whitespace": "error",
        "no-loss-of-precision": "error",
        "no-misleading-character-class": "error",
        "no-new-native-nonconstructor": "error",
        "no-nonoctal-decimal-escape": "error",
        "no-obj-calls": "error",
        "no-octal": "error",
        "no-prototype-builtins": "error",
        "no-redeclare": "error",
        "no-regex-spaces": "error",
        "no-self-assign": "error",
        "no-setter-return": "error",
        "no-shadow-restricted-names": "error",
        "no-sparse-arrays": "error",
        "no-this-before-super": "error",
        "no-undef": "error",
        "no-unexpected-multiline": "error",
        "no-unreachable": "error",
        "no-unsafe-finally": "error",
        "no-unsafe-negation": "error",
        "no-unsafe-optional-chaining": "error",
        "no-unused-labels": "error",
        "no-unused-private-class-members": "error",
        "no-unused-vars": "error",
        "no-useless-backreference": "error",
        "no-useless-catch": "error",
        "no-useless-escape": "error",
        "no-with": "error",
        "require-yield": "error",
        "use-isnan": "error",
        "valid-typeof": "error",
        "unused-imports/no-unused-imports": "error",
        "unused-imports/no-unused-vars": [
          "error",
          {
            "vars": "all",
            "varsIgnorePattern": "^_",
            "args": "after-used",
            "argsIgnorePattern": "^_"
          }
        ]
      },
      "index": 6
    },
    {
      "name": "tszhong0411:unicorn",
      "plugins": {
        "unicorn": {}
      },
      "rules": {
        "no-negated-condition": "off",
        "no-nested-ternary": "off",
        "unicorn/better-regex": "error",
        "unicorn/catch-error-name": "error",
        "unicorn/consistent-destructuring": "off",
        "unicorn/consistent-empty-array-spread": "error",
        "unicorn/consistent-function-scoping": "error",
        "unicorn/custom-error-definition": "off",
        "unicorn/empty-brace-spaces": "error",
        "unicorn/error-message": "error",
        "unicorn/escape-case": "error",
        "unicorn/expiring-todo-comments": "error",
        "unicorn/explicit-length-check": "error",
        "unicorn/filename-case": "error",
        "unicorn/import-style": "error",
        "unicorn/new-for-builtins": "error",
        "unicorn/no-abusive-eslint-disable": "error",
        "unicorn/no-anonymous-default-export": "error",
        "unicorn/no-array-callback-reference": "error",
        "unicorn/no-array-for-each": "error",
        "unicorn/no-array-method-this-argument": "error",
        "unicorn/no-array-push-push": "error",
        "unicorn/no-array-reduce": "error",
        "unicorn/no-await-expression-member": "off",
        "unicorn/no-await-in-promise-methods": "error",
        "unicorn/no-console-spaces": "error",
        "unicorn/no-document-cookie": "error",
        "unicorn/no-empty-file": "error",
        "unicorn/no-for-loop": "error",
        "unicorn/no-hex-escape": "error",
        "unicorn/no-instanceof-array": "error",
        "unicorn/no-invalid-fetch-options": "error",
        "unicorn/no-invalid-remove-event-listener": "error",
        "unicorn/no-keyword-prefix": "off",
        "unicorn/no-lonely-if": "error",
        "unicorn/no-magic-array-flat-depth": "error",
        "unicorn/no-negated-condition": "error",
        "unicorn/no-nested-ternary": "error",
        "unicorn/no-new-array": "error",
        "unicorn/no-new-buffer": "error",
        "unicorn/no-null": "off",
        "unicorn/no-object-as-default-parameter": "error",
        "unicorn/no-process-exit": "error",
        "unicorn/no-single-promise-in-promise-methods": "error",
        "unicorn/no-static-only-class": "error",
        "unicorn/no-thenable": "error",
        "unicorn/no-this-assignment": "error",
        "unicorn/no-typeof-undefined": "error",
        "unicorn/no-unnecessary-await": "error",
        "unicorn/no-unnecessary-polyfills": "error",
        "unicorn/no-unreadable-array-destructuring": "error",
        "unicorn/no-unreadable-iife": "error",
        "unicorn/no-unused-properties": "off",
        "unicorn/no-useless-fallback-in-spread": "error",
        "unicorn/no-useless-length-check": "error",
        "unicorn/no-useless-promise-resolve-reject": "error",
        "unicorn/no-useless-spread": "error",
        "unicorn/no-useless-switch-case": "error",
        "unicorn/no-useless-undefined": "error",
        "unicorn/no-zero-fractions": "error",
        "unicorn/number-literal-case": "error",
        "unicorn/numeric-separators-style": "error",
        "unicorn/prefer-add-event-listener": "error",
        "unicorn/prefer-array-find": "error",
        "unicorn/prefer-array-flat-map": "error",
        "unicorn/prefer-array-flat": "error",
        "unicorn/prefer-array-index-of": "error",
        "unicorn/prefer-array-some": "error",
        "unicorn/prefer-at": "error",
        "unicorn/prefer-blob-reading-methods": "error",
        "unicorn/prefer-code-point": "error",
        "unicorn/prefer-date-now": "error",
        "unicorn/prefer-default-parameters": "error",
        "unicorn/prefer-dom-node-append": "error",
        "unicorn/prefer-dom-node-dataset": "error",
        "unicorn/prefer-dom-node-remove": "error",
        "unicorn/prefer-dom-node-text-content": "error",
        "unicorn/prefer-event-target": "error",
        "unicorn/prefer-export-from": [
          "error",
          {
            "ignoreUsedVariables": true
          }
        ],
        "unicorn/prefer-includes": "error",
        "unicorn/prefer-json-parse-buffer": "off",
        "unicorn/prefer-keyboard-event-key": "error",
        "unicorn/prefer-logical-operator-over-ternary": "error",
        "unicorn/prefer-math-trunc": "error",
        "unicorn/prefer-modern-dom-apis": "error",
        "unicorn/prefer-modern-math-apis": "error",
        "unicorn/prefer-module": "error",
        "unicorn/prefer-native-coercion-functions": "error",
        "unicorn/prefer-negative-index": "error",
        "unicorn/prefer-node-protocol": "error",
        "unicorn/prefer-number-properties": "error",
        "unicorn/prefer-object-from-entries": "error",
        "unicorn/prefer-optional-catch-binding": "error",
        "unicorn/prefer-prototype-methods": "error",
        "unicorn/prefer-query-selector": "error",
        "unicorn/prefer-reflect-apply": "error",
        "unicorn/prefer-regexp-test": "error",
        "unicorn/prefer-set-has": "error",
        "unicorn/prefer-set-size": "error",
        "unicorn/prefer-spread": "error",
        "unicorn/prefer-string-raw": "error",
        "unicorn/prefer-string-replace-all": "error",
        "unicorn/prefer-string-slice": "error",
        "unicorn/prefer-string-starts-ends-with": "error",
        "unicorn/prefer-string-trim-start-end": "error",
        "unicorn/prefer-structured-clone": "error",
        "unicorn/prefer-switch": "error",
        "unicorn/prefer-ternary": "error",
        "unicorn/prefer-top-level-await": "error",
        "unicorn/prefer-type-error": "error",
        "unicorn/prevent-abbreviations": "off",
        "unicorn/relative-url-style": "error",
        "unicorn/require-array-join-separator": "error",
        "unicorn/require-number-to-fixed-digits-argument": "error",
        "unicorn/require-post-message-target-origin": "off",
        "unicorn/string-content": "off",
        "unicorn/switch-case-braces": "error",
        "unicorn/template-indent": "error",
        "unicorn/text-encoding-identifier-case": "error",
        "unicorn/throw-new-error": "error"
      },
      "index": 7
    },
    {
      "name": "tszhong0411:comments",
      "plugins": {
        "eslint-comments": {}
      },
      "rules": {
        "eslint-comments/disable-enable-pair": "error",
        "eslint-comments/no-aggregating-enable": "error",
        "eslint-comments/no-duplicate-disable": "error",
        "eslint-comments/no-unlimited-disable": "error",
        "eslint-comments/no-unused-enable": "error",
        "eslint-comments/require-description": "error"
      },
      "index": 8
    },
    {
      "name": "tszhong0411:import-sort",
      "plugins": {
        "simple-import-sort": {}
      },
      "rules": {
        "simple-import-sort/imports": [
          "error",
          {
            "groups": [
              [
                "^@?\\w"
              ],
              [
                "^[\\w]"
              ],
              [
                "^"
              ],
              [
                "^\\."
              ]
            ]
          }
        ],
        "simple-import-sort/exports": "error"
      },
      "index": 9
    },
    {
      "name": "tszhong0411:sonarjs",
      "plugins": {
        "sonarjs": {}
      },
      "rules": {
        "sonarjs/cognitive-complexity": "off",
        "sonarjs/elseif-without-else": "off",
        "sonarjs/max-switch-cases": "error",
        "sonarjs/no-all-duplicated-branches": "error",
        "sonarjs/no-collapsible-if": "error",
        "sonarjs/no-collection-size-mischeck": "error",
        "sonarjs/no-duplicate-string": "off",
        "sonarjs/no-duplicated-branches": "error",
        "sonarjs/no-element-overwrite": "error",
        "sonarjs/no-empty-collection": "error",
        "sonarjs/no-extra-arguments": "error",
        "sonarjs/no-gratuitous-expressions": "error",
        "sonarjs/no-identical-conditions": "error",
        "sonarjs/no-identical-expressions": "error",
        "sonarjs/no-identical-functions": "error",
        "sonarjs/no-ignored-return": "error",
        "sonarjs/no-inverted-boolean-check": "error",
        "sonarjs/no-nested-switch": "error",
        "sonarjs/no-nested-template-literals": "error",
        "sonarjs/no-one-iteration-loop": "error",
        "sonarjs/no-redundant-boolean": "error",
        "sonarjs/no-redundant-jump": "error",
        "sonarjs/no-same-line-conditional": "error",
        "sonarjs/no-small-switch": "error",
        "sonarjs/no-unused-collection": "error",
        "sonarjs/no-use-of-empty-return-value": "error",
        "sonarjs/no-useless-catch": "error",
        "sonarjs/non-existent-operator": "error",
        "sonarjs/prefer-immediate-return": "error",
        "sonarjs/prefer-object-literal": "error",
        "sonarjs/prefer-single-boolean-return": "error",
        "sonarjs/prefer-while": "error"
      },
      "index": 10
    },
    {
      "name": "tszhong0411:tailwindcss",
      "plugins": {
        "tailwindcss": {}
      },
      "rules": {
        "tailwindcss/classnames-order": "off",
        "tailwindcss/enforces-negative-arbitrary-values": "warn",
        "tailwindcss/enforces-shorthand": "warn",
        "tailwindcss/migration-from-tailwind-2": "warn",
        "tailwindcss/no-arbitrary-value": "off",
        "tailwindcss/no-custom-classname": "off",
        "tailwindcss/no-contradicting-classname": "error",
        "tailwindcss/no-unnecessary-arbitrary-value": "warn"
      },
      "settings": {
        "tailwindcss": {
          "callees": [
            "cn",
            "cva"
          ]
        }
      },
      "index": 11
    },
    {
      "name": "tszhong0411:imports",
      "plugins": {
        "import": {}
      },
      "rules": {
        "import/no-amd": "error",
        "import/no-commonjs": "error",
        "import/first": "error",
        "import/no-duplicates": "error",
        "import/no-mutable-exports": "error",
        "import/no-named-default": "error",
        "import/no-self-import": "error",
        "import/no-webpack-loader-syntax": "error",
        "import/newline-after-import": [
          "error",
          {
            "count": 1
          }
        ]
      },
      "index": 12
    },
    {
      "name": "tszhong0411:prettier",
      "plugins": {
        "prettier": {}
      },
      "rules": {
        "curly": 0,
        "no-unexpected-multiline": 0,
        "@typescript-eslint/lines-around-comment": 0,
        "@typescript-eslint/quotes": 0,
        "babel/quotes": 0,
        "unicorn/template-indent": 0,
        "vue/html-self-closing": 0,
        "vue/max-len": 0,
        "@babel/object-curly-spacing": "off",
        "@babel/semi": "off",
        "@typescript-eslint/block-spacing": "off",
        "@typescript-eslint/brace-style": "off",
        "@typescript-eslint/comma-dangle": "off",
        "@typescript-eslint/comma-spacing": "off",
        "@typescript-eslint/func-call-spacing": "off",
        "@typescript-eslint/indent": "off",
        "@typescript-eslint/key-spacing": "off",
        "@typescript-eslint/keyword-spacing": "off",
        "@typescript-eslint/member-delimiter-style": "off",
        "@typescript-eslint/no-extra-parens": "off",
        "@typescript-eslint/no-extra-semi": "off",
        "@typescript-eslint/object-curly-spacing": "off",
        "@typescript-eslint/semi": "off",
        "@typescript-eslint/space-before-blocks": "off",
        "@typescript-eslint/space-before-function-paren": "off",
        "@typescript-eslint/space-infix-ops": "off",
        "@typescript-eslint/type-annotation-spacing": "off",
        "babel/object-curly-spacing": "off",
        "babel/semi": "off",
        "flowtype/boolean-style": "off",
        "flowtype/delimiter-dangle": "off",
        "flowtype/generic-spacing": "off",
        "flowtype/object-type-curly-spacing": "off",
        "flowtype/object-type-delimiter": "off",
        "flowtype/quotes": "off",
        "flowtype/semi": "off",
        "flowtype/space-after-type-colon": "off",
        "flowtype/space-before-generic-bracket": "off",
        "flowtype/space-before-type-colon": "off",
        "flowtype/union-intersection-spacing": "off",
        "react/jsx-child-element-spacing": "off",
        "react/jsx-closing-bracket-location": "off",
        "react/jsx-closing-tag-location": "off",
        "react/jsx-curly-newline": "off",
        "react/jsx-curly-spacing": "off",
        "react/jsx-equals-spacing": "off",
        "react/jsx-first-prop-new-line": "off",
        "react/jsx-indent": "off",
        "react/jsx-indent-props": "off",
        "react/jsx-max-props-per-line": "off",
        "react/jsx-newline": "off",
        "react/jsx-one-expression-per-line": "off",
        "react/jsx-props-no-multi-spaces": "off",
        "react/jsx-tag-spacing": "off",
        "react/jsx-wrap-multilines": "off",
        "standard/array-bracket-even-spacing": "off",
        "standard/computed-property-even-spacing": "off",
        "standard/object-curly-even-spacing": "off",
        "unicorn/empty-brace-spaces": "off",
        "unicorn/no-nested-ternary": "off",
        "unicorn/number-literal-case": "off",
        "vue/array-bracket-newline": "off",
        "vue/array-bracket-spacing": "off",
        "vue/array-element-newline": "off",
        "vue/arrow-spacing": "off",
        "vue/block-spacing": "off",
        "vue/block-tag-newline": "off",
        "vue/brace-style": "off",
        "vue/comma-dangle": "off",
        "vue/comma-spacing": "off",
        "vue/comma-style": "off",
        "vue/dot-location": "off",
        "vue/func-call-spacing": "off",
        "vue/html-closing-bracket-newline": "off",
        "vue/html-closing-bracket-spacing": "off",
        "vue/html-end-tags": "off",
        "vue/html-indent": "off",
        "vue/html-quotes": "off",
        "vue/key-spacing": "off",
        "vue/keyword-spacing": "off",
        "vue/max-attributes-per-line": "off",
        "vue/multiline-html-element-content-newline": "off",
        "vue/multiline-ternary": "off",
        "vue/mustache-interpolation-spacing": "off",
        "vue/no-extra-parens": "off",
        "vue/no-multi-spaces": "off",
        "vue/no-spaces-around-equal-signs-in-attribute": "off",
        "vue/object-curly-newline": "off",
        "vue/object-curly-spacing": "off",
        "vue/object-property-newline": "off",
        "vue/operator-linebreak": "off",
        "vue/quote-props": "off",
        "vue/script-indent": "off",
        "vue/singleline-html-element-content-newline": "off",
        "vue/space-in-parens": "off",
        "vue/space-infix-ops": "off",
        "vue/space-unary-ops": "off",
        "vue/template-curly-spacing": "off",
        "space-unary-word-ops": "off",
        "generator-star": "off",
        "no-comma-dangle": "off",
        "no-reserved-keys": "off",
        "no-space-before-semi": "off",
        "no-wrap-func": "off",
        "space-after-function-name": "off",
        "space-before-function-parentheses": "off",
        "space-in-brackets": "off",
        "no-arrow-condition": "off",
        "space-after-keywords": "off",
        "space-before-keywords": "off",
        "space-return-throw-case": "off",
        "no-spaced-func": "off",
        "indent-legacy": "off",
        "array-bracket-newline": "off",
        "array-bracket-spacing": "off",
        "array-element-newline": "off",
        "arrow-parens": "off",
        "arrow-spacing": "off",
        "block-spacing": "off",
        "brace-style": "off",
        "comma-dangle": "off",
        "comma-spacing": "off",
        "comma-style": "off",
        "computed-property-spacing": "off",
        "dot-location": "off",
        "eol-last": "off",
        "func-call-spacing": "off",
        "function-call-argument-newline": "off",
        "function-paren-newline": "off",
        "generator-star-spacing": "off",
        "implicit-arrow-linebreak": "off",
        "indent": "off",
        "jsx-quotes": "off",
        "key-spacing": "off",
        "keyword-spacing": "off",
        "linebreak-style": "off",
        "lines-around-comment": 0,
        "max-len": 0,
        "max-statements-per-line": "off",
        "multiline-ternary": "off",
        "new-parens": "off",
        "newline-per-chained-call": "off",
        "no-confusing-arrow": 0,
        "no-extra-parens": "off",
        "no-extra-semi": "off",
        "no-floating-decimal": "off",
        "no-mixed-operators": 0,
        "no-mixed-spaces-and-tabs": "off",
        "no-multi-spaces": "off",
        "no-multiple-empty-lines": "off",
        "no-tabs": 0,
        "no-trailing-spaces": "off",
        "no-whitespace-before-property": "off",
        "nonblock-statement-body-position": "off",
        "object-curly-newline": "off",
        "object-curly-spacing": "off",
        "object-property-newline": "off",
        "one-var-declaration-per-line": "off",
        "operator-linebreak": "off",
        "padded-blocks": "off",
        "quote-props": "off",
        "quotes": 0,
        "rest-spread-spacing": "off",
        "semi": "off",
        "semi-spacing": "off",
        "semi-style": "off",
        "space-before-blocks": "off",
        "space-before-function-paren": "off",
        "space-in-parens": "off",
        "space-infix-ops": "off",
        "space-unary-ops": "off",
        "switch-colon-spacing": "off",
        "template-curly-spacing": "off",
        "template-tag-spacing": "off",
        "wrap-iife": "off",
        "wrap-regex": "off",
        "yield-star-spacing": "off",
        "react/jsx-space-before-closing": "off",
        "prettier/prettier": "error",
        "arrow-body-style": "off",
        "prefer-arrow-callback": "off"
      },
      "index": 13
    },
    {
      "name": "tszhong0411:typescript",
      "plugins": {
        "@typescript-eslint": {}
      },
      "files": [
        "**/*.?([cm])ts",
        "**/*.?([cm])tsx"
      ],
      "languageOptions": {
        "parser": "typescript-eslint/parser",
        "parserOptions": {
          "ecmaFeatures": {
            "jsx": true
          },
          "project": "./tsconfig.json",
          "tsconfigRootDir": "/home/runner/work/honghong.me/honghong.me/packages/eslint-config",
          "sourceType": "module"
        }
      },
      "rules": {
        "@typescript-eslint/await-thenable": "error",
        "@typescript-eslint/ban-ts-comment": [
          "error",
          {
            "minimumDescriptionLength": 10
          }
        ],
        "@typescript-eslint/ban-types": "error",
        "no-array-constructor": "off",
        "@typescript-eslint/no-array-constructor": "error",
        "@typescript-eslint/no-base-to-string": "error",
        "@typescript-eslint/no-duplicate-enum-values": "error",
        "@typescript-eslint/no-duplicate-type-constituents": "error",
        "@typescript-eslint/no-explicit-any": "error",
        "@typescript-eslint/no-extra-non-null-assertion": "error",
        "@typescript-eslint/no-floating-promises": "off",
        "@typescript-eslint/no-for-in-array": "error",
        "no-implied-eval": "off",
        "@typescript-eslint/no-implied-eval": "error",
        "no-loss-of-precision": "off",
        "@typescript-eslint/no-loss-of-precision": "error",
        "@typescript-eslint/no-misused-new": "error",
        "@typescript-eslint/no-misused-promises": "off",
        "@typescript-eslint/no-namespace": "off",
        "@typescript-eslint/no-non-null-asserted-optional-chain": "error",
        "@typescript-eslint/no-redundant-type-constituents": "error",
        "@typescript-eslint/no-this-alias": "error",
        "@typescript-eslint/no-unnecessary-type-assertion": "error",
        "@typescript-eslint/no-unnecessary-type-constraint": "error",
        "@typescript-eslint/no-unsafe-argument": "error",
        "@typescript-eslint/no-unsafe-assignment": "off",
        "@typescript-eslint/no-unsafe-call": "off",
        "@typescript-eslint/no-unsafe-declaration-merging": "error",
        "@typescript-eslint/no-unsafe-enum-comparison": "error",
        "@typescript-eslint/no-unsafe-member-access": "off",
        "@typescript-eslint/no-unsafe-return": "error",
        "no-unused-vars": "off",
        "@typescript-eslint/no-unused-vars": "error",
        "@typescript-eslint/no-var-requires": "error",
        "@typescript-eslint/prefer-as-const": "error",
        "require-await": "off",
        "@typescript-eslint/require-await": "error",
        "@typescript-eslint/restrict-plus-operands": [
          "error",
          {
            "allowAny": false,
            "allowBoolean": false,
            "allowNullish": false,
            "allowNumberAndString": false,
            "allowRegExp": false
          }
        ],
        "@typescript-eslint/restrict-template-expressions": [
          "error",
          {
            "allowNumber": true
          }
        ],
        "@typescript-eslint/triple-slash-reference": "error",
        "@typescript-eslint/unbound-method": "error",
        "@typescript-eslint/no-array-delete": "error",
        "@typescript-eslint/no-confusing-void-expression": "error",
        "@typescript-eslint/no-dynamic-delete": "error",
        "@typescript-eslint/no-extraneous-class": "error",
        "@typescript-eslint/no-invalid-void-type": "error",
        "@typescript-eslint/no-meaningless-void-operator": "error",
        "@typescript-eslint/no-mixed-enums": "error",
        "@typescript-eslint/no-non-null-asserted-nullish-coalescing": "error",
        "@typescript-eslint/no-non-null-assertion": "off",
        "@typescript-eslint/no-unnecessary-boolean-literal-compare": "error",
        "@typescript-eslint/no-unnecessary-condition": "error",
        "@typescript-eslint/no-unnecessary-template-expression": "error",
        "@typescript-eslint/no-unnecessary-type-arguments": "error",
        "no-useless-constructor": "off",
        "@typescript-eslint/no-useless-constructor": "error",
        "no-throw-literal": "off",
        "@typescript-eslint/only-throw-error": "error",
        "@typescript-eslint/prefer-includes": "error",
        "@typescript-eslint/prefer-literal-enum-member": "error",
        "prefer-promise-reject-errors": "off",
        "@typescript-eslint/prefer-promise-reject-errors": "error",
        "@typescript-eslint/prefer-reduce-type-parameter": "error",
        "@typescript-eslint/prefer-return-this-type": "error",
        "@typescript-eslint/unified-signatures": "error",
        "@typescript-eslint/use-unknown-in-catch-callback-variable": "error",
        "@typescript-eslint/adjacent-overload-signatures": "error",
        "@typescript-eslint/array-type": [
          "error",
          {
            "default": "array-simple"
          }
        ],
        "@typescript-eslint/ban-tslint-comment": "error",
        "@typescript-eslint/class-literal-property-style": "error",
        "@typescript-eslint/consistent-generic-constructors": "error",
        "@typescript-eslint/consistent-indexed-object-style": "error",
        "@typescript-eslint/consistent-type-assertions": "error",
        "@typescript-eslint/consistent-type-definitions": "off",
        "dot-notation": "off",
        "@typescript-eslint/dot-notation": "error",
        "@typescript-eslint/no-confusing-non-null-assertion": "error",
        "no-empty-function": "off",
        "@typescript-eslint/no-empty-function": "error",
        "@typescript-eslint/no-empty-interface": "error",
        "@typescript-eslint/no-inferrable-types": "error",
        "@typescript-eslint/non-nullable-type-assertion-style": "error",
        "@typescript-eslint/prefer-for-of": "error",
        "@typescript-eslint/prefer-function-type": "error",
        "@typescript-eslint/prefer-namespace-keyword": "error",
        "@typescript-eslint/prefer-nullish-coalescing": "error",
        "@typescript-eslint/prefer-optional-chain": "error",
        "@typescript-eslint/prefer-string-starts-ends-with": "error",
        "constructor-super": "off",
        "getter-return": "off",
        "no-const-assign": "off",
        "no-dupe-args": "off",
        "no-dupe-class-members": "off",
        "no-dupe-keys": "off",
        "no-func-assign": "off",
        "no-import-assign": "off",
        "no-new-symbol": "off",
        "no-new-native-nonconstructor": "off",
        "no-obj-calls": "off",
        "no-redeclare": "off",
        "no-setter-return": "off",
        "no-this-before-super": "off",
        "no-undef": "off",
        "no-unreachable": "off",
        "no-unsafe-negation": "off",
        "no-var": "error",
        "prefer-const": "error",
        "prefer-rest-params": "error",
        "prefer-spread": "error",
        "@typescript-eslint/no-invalid-this": "error",
        "@typescript-eslint/no-shadow": "error",
        "@typescript-eslint/consistent-type-imports": [
          "error",
          {
            "prefer": "type-imports",
            "fixStyle": "inline-type-imports"
          }
        ]
      },
      "index": 14
    },
    {
      "name": "tszhong0411:react",
      "plugins": {
        "@eslint-react": {},
        "@eslint-react/dom": {},
        "react-hooks": {},
        "@eslint-react/hooks-extra": {},
        "@eslint-react/naming-convention": {},
        "jsx-a11y": {}
      },
      "files": [
        "**/*.?([cm])js",
        "**/*.?([cm])jsx",
        "**/*.?([cm])ts",
        "**/*.?([cm])tsx"
      ],
      "languageOptions": {
        "parser": "typescript-eslint/parser",
        "parserOptions": {
          "ecmaFeatures": {
            "jsx": true
          },
          "project": "./tsconfig.json",
          "sourceType": "module"
        }
      },
      "rules": {
        "@eslint-react/ensure-forward-ref-using-ref": "warn",
        "@eslint-react/no-access-state-in-setstate": "error",
        "@eslint-react/no-array-index-key": "warn",
        "@eslint-react/no-children-count": "warn",
        "@eslint-react/no-children-for-each": "warn",
        "@eslint-react/no-children-map": "warn",
        "@eslint-react/no-children-only": "warn",
        "@eslint-react/no-children-to-array": "warn",
        "@eslint-react/no-clone-element": "warn",
        "@eslint-react/no-comment-textnodes": "warn",
        "@eslint-react/no-component-will-mount": "error",
        "@eslint-react/no-component-will-receive-props": "error",
        "@eslint-react/no-component-will-update": "error",
        "@eslint-react/no-create-ref": "error",
        "@eslint-react/no-default-props": "error",
        "@eslint-react/no-direct-mutation-state": "error",
        "@eslint-react/no-duplicate-key": "error",
        "@eslint-react/no-missing-key": "error",
        "@eslint-react/no-nested-components": "warn",
        "@eslint-react/no-prop-types": "error",
        "@eslint-react/no-redundant-should-component-update": "error",
        "@eslint-react/no-set-state-in-component-did-mount": "warn",
        "@eslint-react/no-set-state-in-component-did-update": "warn",
        "@eslint-react/no-set-state-in-component-will-update": "warn",
        "@eslint-react/no-string-refs": "error",
        "@eslint-react/no-unsafe-component-will-mount": "warn",
        "@eslint-react/no-unsafe-component-will-receive-props": "warn",
        "@eslint-react/no-unsafe-component-will-update": "warn",
        "@eslint-react/no-unstable-context-value": "error",
        "@eslint-react/no-unstable-default-props": "error",
        "@eslint-react/no-unused-class-component-members": "warn",
        "@eslint-react/no-unused-state": "warn",
        "@eslint-react/dom/no-children-in-void-dom-elements": "warn",
        "@eslint-react/dom/no-dangerously-set-innerhtml": "off",
        "@eslint-react/dom/no-dangerously-set-innerhtml-with-children": "error",
        "@eslint-react/dom/no-find-dom-node": "error",
        "@eslint-react/dom/no-missing-button-type": "warn",
        "@eslint-react/dom/no-missing-iframe-sandbox": "warn",
        "@eslint-react/dom/no-namespace": "error",
        "@eslint-react/dom/no-render-return-value": "error",
        "@eslint-react/dom/no-script-url": "warn",
        "@eslint-react/dom/no-unsafe-iframe-sandbox": "warn",
        "@eslint-react/dom/no-unsafe-target-blank": "warn",
        "@eslint-react/hooks-extra/no-direct-set-state-in-use-effect": "warn",
        "@eslint-react/hooks-extra/no-direct-set-state-in-use-layout-effect": "warn",
        "@eslint-react/hooks-extra/prefer-use-state-lazy-initialization": "error",
        "@eslint-react/no-leaked-conditional-rendering": "warn",
        "react-hooks/rules-of-hooks": "error",
        "react-hooks/exhaustive-deps": "warn",
        "jsx-a11y/alt-text": [
          "error",
          {
            "elements": [
              "img"
            ],
            "img": [
              "Image"
            ]
          }
        ],
        "jsx-a11y/anchor-has-content": "error",
        "jsx-a11y/anchor-is-valid": "error",
        "jsx-a11y/aria-activedescendant-has-tabindex": "error",
        "jsx-a11y/aria-props": "error",
        "jsx-a11y/aria-proptypes": "error",
        "jsx-a11y/aria-role": "error",
        "jsx-a11y/aria-unsupported-elements": "error",
        "jsx-a11y/autocomplete-valid": "error",
        "jsx-a11y/click-events-have-key-events": "error",
        "jsx-a11y/control-has-associated-label": [
          "off",
          {
            "ignoreElements": [
              "audio",
              "canvas",
              "embed",
              "input",
              "textarea",
              "tr",
              "video"
            ],
            "ignoreRoles": [
              "grid",
              "listbox",
              "menu",
              "menubar",
              "radiogroup",
              "row",
              "tablist",
              "toolbar",
              "tree",
              "treegrid"
            ],
            "includeRoles": [
              "alert",
              "dialog"
            ]
          }
        ],
        "jsx-a11y/heading-has-content": "error",
        "jsx-a11y/html-has-lang": "error",
        "jsx-a11y/iframe-has-title": "error",
        "jsx-a11y/img-redundant-alt": "error",
        "jsx-a11y/interactive-supports-focus": [
          "error",
          {
            "tabbable": [
              "button",
              "checkbox",
              "link",
              "progressbar",
              "searchbox",
              "slider",
              "spinbutton",
              "switch",
              "textbox"
            ]
          }
        ],
        "jsx-a11y/label-has-for": "off",
        "jsx-a11y/label-has-associated-control": "error",
        "jsx-a11y/media-has-caption": "error",
        "jsx-a11y/mouse-events-have-key-events": "error",
        "jsx-a11y/no-access-key": "error",
        "jsx-a11y/no-autofocus": "error",
        "jsx-a11y/no-distracting-elements": "error",
        "jsx-a11y/no-interactive-element-to-noninteractive-role": "error",
        "jsx-a11y/no-noninteractive-element-interactions": [
          "error",
          {
            "body": [
              "onError",
              "onLoad"
            ],
            "iframe": [
              "onError",
              "onLoad"
            ],
            "img": [
              "onError",
              "onLoad"
            ]
          }
        ],
        "jsx-a11y/no-noninteractive-element-to-interactive-role": "error",
        "jsx-a11y/no-noninteractive-tabindex": "error",
        "jsx-a11y/no-redundant-roles": "error",
        "jsx-a11y/no-static-element-interactions": "error",
        "jsx-a11y/role-has-required-aria-props": "error",
        "jsx-a11y/role-supports-aria-props": "error",
        "jsx-a11y/scope": "error",
        "jsx-a11y/tabindex-no-positive": "error",
        "@eslint-react/no-missing-component-display-name": "error",
        "@eslint-react/no-class-component": "error",
        "@eslint-react/hooks-extra/ensure-custom-hooks-using-other-hooks": "error",
        "@eslint-react/naming-convention/component-name": "error",
        "@eslint-react/naming-convention/filename": [
          "error",
          {
            "rule": "kebab-case"
          }
        ],
        "@eslint-react/naming-convention/use-state": "error",
        "jsx-a11y/lang": "error"
      },
      "settings": {
        "jsx-a11y": {
          "components": {
            "Button": "button",
            "Image": "img",
            "Input": "input",
            "Textarea": "textarea",
            "Link": "a"
          }
        }
      },
      "index": 15
    },
    {
      "name": "tszhong0411:turbo",
      "plugins": {
        "turbo": {}
      },
      "rules": {
        "turbo/no-undeclared-env-vars": "error"
      },
      "index": 16
    },
    {
      "name": "tszhong0411:next",
      "plugins": {
        "@next/next": {}
      },
      "rules": {
        "@next/next/google-font-display": "warn",
        "@next/next/google-font-preconnect": "warn",
        "@next/next/next-script-for-ga": "warn",
        "@next/next/no-async-client-component": "warn",
        "@next/next/no-before-interactive-script-outside-document": "warn",
        "@next/next/no-css-tags": "warn",
        "@next/next/no-head-element": "warn",
        "@next/next/no-html-link-for-pages": "off",
        "@next/next/no-img-element": "warn",
        "@next/next/no-page-custom-font": "warn",
        "@next/next/no-styled-jsx-in-document": "warn",
        "@next/next/no-sync-scripts": "error",
        "@next/next/no-title-in-document-head": "warn",
        "@next/next/no-typos": "warn",
        "@next/next/no-unwanted-polyfillio": "warn",
        "@next/next/inline-script-id": "error",
        "@next/next/no-assign-module-variable": "error",
        "@next/next/no-document-import-in-page": "error",
        "@next/next/no-duplicate-head": "error",
        "@next/next/no-head-import-in-document": "error",
        "@next/next/no-script-component-in-head": "error"
      },
      "index": 17
    },
    {
      "name": "tszhong0411:playwright",
      "rules": {
        "no-empty-pattern": "off",
        "playwright/expect-expect": "warn",
        "playwright/max-nested-describe": "warn",
        "playwright/missing-playwright-await": "error",
        "playwright/no-conditional-expect": "warn",
        "playwright/no-conditional-in-test": "warn",
        "playwright/no-element-handle": "warn",
        "playwright/no-eval": "warn",
        "playwright/no-focused-test": "error",
        "playwright/no-force-option": "warn",
        "playwright/no-nested-step": "warn",
        "playwright/no-networkidle": "error",
        "playwright/no-page-pause": "warn",
        "playwright/no-skipped-test": "warn",
        "playwright/no-standalone-expect": "error",
        "playwright/no-unsafe-references": "error",
        "playwright/no-useless-await": "warn",
        "playwright/no-useless-not": "warn",
        "playwright/no-wait-for-selector": "warn",
        "playwright/no-wait-for-timeout": "warn",
        "playwright/prefer-web-first-assertions": "error",
        "playwright/valid-describe-callback": "error",
        "playwright/valid-expect": "error",
        "playwright/valid-expect-in-promise": "error",
        "playwright/valid-title": "error"
      },
      "languageOptions": {
        "globals": {
          "AbortController": false,
          "AbortSignal": false,
          "atob": false,
          "Blob": false,
          "BroadcastChannel": false,
          "btoa": false,
          "ByteLengthQueuingStrategy": false,
          "clearInterval": false,
          "clearTimeout": false,
          "CompressionStream": false,
          "console": false,
          "CountQueuingStrategy": false,
          "crypto": false,
          "Crypto": false,
          "CryptoKey": false,
          "CustomEvent": false,
          "DecompressionStream": false,
          "DOMException": false,
          "Event": false,
          "EventTarget": false,
          "fetch": false,
          "File": false,
          "FormData": false,
          "Headers": false,
          "Intl": false,
          "MessageChannel": false,
          "MessageEvent": false,
          "MessagePort": false,
          "performance": false,
          "PerformanceEntry": false,
          "PerformanceMark": false,
          "PerformanceMeasure": false,
          "PerformanceObserver": false,
          "PerformanceObserverEntryList": false,
          "PerformanceResourceTiming": false,
          "queueMicrotask": false,
          "ReadableByteStreamController": false,
          "ReadableStream": false,
          "ReadableStreamBYOBReader": false,
          "ReadableStreamBYOBRequest": false,
          "ReadableStreamDefaultController": false,
          "ReadableStreamDefaultReader": false,
          "Request": false,
          "Response": false,
          "setInterval": false,
          "setTimeout": false,
          "structuredClone": false,
          "SubtleCrypto": false,
          "TextDecoder": false,
          "TextDecoderStream": false,
          "TextEncoder": false,
          "TextEncoderStream": false,
          "TransformStream": false,
          "TransformStreamDefaultController": false,
          "URL": false,
          "URLSearchParams": false,
          "WebAssembly": false,
          "WritableStream": false,
          "WritableStreamDefaultController": false,
          "WritableStreamDefaultWriter": false
        }
      },
      "plugins": {
        "playwright": {}
      },
      "files": [
        "**/e2e/**/*.{test,spec}.?([cm])[jt]s?(x)"
      ],
      "index": 18
    },
    {
      "name": "tszhong0411:testing-library",
      "plugins": {
        "testing-library": {}
      },
      "rules": {
        "testing-library/await-async-events": [
          "error",
          {
            "eventModule": "userEvent"
          }
        ],
        "testing-library/await-async-queries": "error",
        "testing-library/await-async-utils": "error",
        "testing-library/no-await-sync-events": [
          "error",
          {
            "eventModules": [
              "fire-event"
            ]
          }
        ],
        "testing-library/no-await-sync-queries": "error",
        "testing-library/no-container": "error",
        "testing-library/no-debugging-utils": "warn",
        "testing-library/no-dom-import": [
          "error",
          "react"
        ],
        "testing-library/no-global-regexp-flag-in-query": "error",
        "testing-library/no-manual-cleanup": "error",
        "testing-library/no-node-access": "error",
        "testing-library/no-promise-in-fire-event": "error",
        "testing-library/no-render-in-lifecycle": "error",
        "testing-library/no-unnecessary-act": "error",
        "testing-library/no-wait-for-multiple-assertions": "error",
        "testing-library/no-wait-for-side-effects": "error",
        "testing-library/no-wait-for-snapshot": "error",
        "testing-library/prefer-find-by": "error",
        "testing-library/prefer-presence-queries": "error",
        "testing-library/prefer-query-by-disappearance": "error",
        "testing-library/prefer-screen-queries": "error",
        "testing-library/render-result-naming-convention": "error"
      },
      "files": [
        "**/tests/**/*.{test,spec}.?([cm])[jt]s?(x)"
      ],
      "index": 19
    }
  ],
  "rules": {
    "accessor-pairs": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce getter and setter pairs in objects and classes",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/accessor-pairs"
      },
      "name": "accessor-pairs",
      "plugin": "eslint"
    },
    "array-bracket-newline": {
      "deprecated": true,
      "replacedBy": [],
      "type": "layout",
      "docs": {
        "description": "Enforce linebreaks after opening and before closing array brackets",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/array-bracket-newline"
      },
      "fixable": "whitespace",
      "name": "array-bracket-newline",
      "plugin": "eslint"
    },
    "array-bracket-spacing": {
      "deprecated": true,
      "replacedBy": [],
      "type": "layout",
      "docs": {
        "description": "Enforce consistent spacing inside array brackets",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/array-bracket-spacing"
      },
      "fixable": "whitespace",
      "name": "array-bracket-spacing",
      "plugin": "eslint"
    },
    "array-callback-return": {
      "type": "problem",
      "docs": {
        "description": "Enforce `return` statements in callbacks of array methods",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/array-callback-return"
      },
      "hasSuggestions": true,
      "name": "array-callback-return",
      "plugin": "eslint"
    },
    "array-element-newline": {
      "deprecated": true,
      "replacedBy": [],
      "type": "layout",
      "docs": {
        "description": "Enforce line breaks after each array element",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/array-element-newline"
      },
      "fixable": "whitespace",
      "name": "array-element-newline",
      "plugin": "eslint"
    },
    "arrow-body-style": {
      "type": "suggestion",
      "docs": {
        "description": "Require braces around arrow function bodies",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/arrow-body-style"
      },
      "fixable": "code",
      "name": "arrow-body-style",
      "plugin": "eslint"
    },
    "arrow-parens": {
      "deprecated": true,
      "replacedBy": [],
      "type": "layout",
      "docs": {
        "description": "Require parentheses around arrow function arguments",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/arrow-parens"
      },
      "fixable": "code",
      "name": "arrow-parens",
      "plugin": "eslint"
    },
    "arrow-spacing": {
      "deprecated": true,
      "replacedBy": [],
      "type": "layout",
      "docs": {
        "description": "Enforce consistent spacing before and after the arrow in arrow functions",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/arrow-spacing"
      },
      "fixable": "whitespace",
      "name": "arrow-spacing",
      "plugin": "eslint"
    },
    "block-scoped-var": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce the use of variables within the scope they are defined",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/block-scoped-var"
      },
      "name": "block-scoped-var",
      "plugin": "eslint"
    },
    "block-spacing": {
      "deprecated": true,
      "replacedBy": [],
      "type": "layout",
      "docs": {
        "description": "Disallow or enforce spaces inside of blocks after opening block and before closing block",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/block-spacing"
      },
      "fixable": "whitespace",
      "name": "block-spacing",
      "plugin": "eslint"
    },
    "brace-style": {
      "deprecated": true,
      "replacedBy": [],
      "type": "layout",
      "docs": {
        "description": "Enforce consistent brace style for blocks",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/brace-style"
      },
      "fixable": "whitespace",
      "name": "brace-style",
      "plugin": "eslint"
    },
    "callback-return": {
      "deprecated": true,
      "replacedBy": [],
      "type": "suggestion",
      "docs": {
        "description": "Require `return` statements after callbacks",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/callback-return"
      },
      "name": "callback-return",
      "plugin": "eslint"
    },
    "camelcase": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce camelcase naming convention",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/camelcase"
      },
      "name": "camelcase",
      "plugin": "eslint"
    },
    "capitalized-comments": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce or disallow capitalization of the first letter of a comment",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/capitalized-comments"
      },
      "fixable": "code",
      "name": "capitalized-comments",
      "plugin": "eslint"
    },
    "class-methods-use-this": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce that class methods utilize `this`",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/class-methods-use-this"
      },
      "name": "class-methods-use-this",
      "plugin": "eslint"
    },
    "comma-dangle": {
      "deprecated": true,
      "replacedBy": [],
      "type": "layout",
      "docs": {
        "description": "Require or disallow trailing commas",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/comma-dangle"
      },
      "fixable": "code",
      "name": "comma-dangle",
      "plugin": "eslint"
    },
    "comma-spacing": {
      "deprecated": true,
      "replacedBy": [],
      "type": "layout",
      "docs": {
        "description": "Enforce consistent spacing before and after commas",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/comma-spacing"
      },
      "fixable": "whitespace",
      "name": "comma-spacing",
      "plugin": "eslint"
    },
    "comma-style": {
      "deprecated": true,
      "replacedBy": [],
      "type": "layout",
      "docs": {
        "description": "Enforce consistent comma style",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/comma-style"
      },
      "fixable": "code",
      "name": "comma-style",
      "plugin": "eslint"
    },
    "complexity": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce a maximum cyclomatic complexity allowed in a program",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/complexity"
      },
      "name": "complexity",
      "plugin": "eslint"
    },
    "computed-property-spacing": {
      "deprecated": true,
      "replacedBy": [],
      "type": "layout",
      "docs": {
        "description": "Enforce consistent spacing inside computed property brackets",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/computed-property-spacing"
      },
      "fixable": "whitespace",
      "name": "computed-property-spacing",
      "plugin": "eslint"
    },
    "consistent-return": {
      "type": "suggestion",
      "docs": {
        "description": "Require `return` statements to either always or never specify values",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/consistent-return"
      },
      "name": "consistent-return",
      "plugin": "eslint"
    },
    "consistent-this": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce consistent naming when capturing the current execution context",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/consistent-this"
      },
      "name": "consistent-this",
      "plugin": "eslint"
    },
    "constructor-super": {
      "type": "problem",
      "docs": {
        "description": "Require `super()` calls in constructors",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/constructor-super"
      },
      "name": "constructor-super",
      "plugin": "eslint"
    },
    "curly": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce consistent brace style for all control statements",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/curly"
      },
      "fixable": "code",
      "name": "curly",
      "plugin": "eslint"
    },
    "default-case": {
      "type": "suggestion",
      "docs": {
        "description": "Require `default` cases in `switch` statements",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/default-case"
      },
      "name": "default-case",
      "plugin": "eslint"
    },
    "default-case-last": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce default clauses in switch statements to be last",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/default-case-last"
      },
      "name": "default-case-last",
      "plugin": "eslint"
    },
    "default-param-last": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce default parameters to be last",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/default-param-last"
      },
      "name": "default-param-last",
      "plugin": "eslint"
    },
    "dot-location": {
      "deprecated": true,
      "replacedBy": [],
      "type": "layout",
      "docs": {
        "description": "Enforce consistent newlines before and after dots",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/dot-location"
      },
      "fixable": "code",
      "name": "dot-location",
      "plugin": "eslint"
    },
    "dot-notation": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce dot notation whenever possible",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/dot-notation"
      },
      "fixable": "code",
      "name": "dot-notation",
      "plugin": "eslint"
    },
    "eol-last": {
      "deprecated": true,
      "replacedBy": [],
      "type": "layout",
      "docs": {
        "description": "Require or disallow newline at the end of files",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/eol-last"
      },
      "fixable": "whitespace",
      "name": "eol-last",
      "plugin": "eslint"
    },
    "eqeqeq": {
      "type": "suggestion",
      "docs": {
        "description": "Require the use of `===` and `!==`",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/eqeqeq"
      },
      "fixable": "code",
      "name": "eqeqeq",
      "plugin": "eslint"
    },
    "for-direction": {
      "type": "problem",
      "docs": {
        "description": "Enforce \"for\" loop update clause moving the counter in the right direction",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/for-direction"
      },
      "fixable": null,
      "name": "for-direction",
      "plugin": "eslint"
    },
    "func-call-spacing": {
      "deprecated": true,
      "replacedBy": [],
      "type": "layout",
      "docs": {
        "description": "Require or disallow spacing between function identifiers and their invocations",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/func-call-spacing"
      },
      "fixable": "whitespace",
      "name": "func-call-spacing",
      "plugin": "eslint"
    },
    "func-name-matching": {
      "type": "suggestion",
      "docs": {
        "description": "Require function names to match the name of the variable or property to which they are assigned",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/func-name-matching"
      },
      "name": "func-name-matching",
      "plugin": "eslint"
    },
    "func-names": {
      "type": "suggestion",
      "docs": {
        "description": "Require or disallow named `function` expressions",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/func-names"
      },
      "name": "func-names",
      "plugin": "eslint"
    },
    "func-style": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce the consistent use of either `function` declarations or expressions",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/func-style"
      },
      "name": "func-style",
      "plugin": "eslint"
    },
    "function-call-argument-newline": {
      "deprecated": true,
      "replacedBy": [],
      "type": "layout",
      "docs": {
        "description": "Enforce line breaks between arguments of a function call",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/function-call-argument-newline"
      },
      "fixable": "whitespace",
      "name": "function-call-argument-newline",
      "plugin": "eslint"
    },
    "function-paren-newline": {
      "deprecated": true,
      "replacedBy": [],
      "type": "layout",
      "docs": {
        "description": "Enforce consistent line breaks inside function parentheses",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/function-paren-newline"
      },
      "fixable": "whitespace",
      "name": "function-paren-newline",
      "plugin": "eslint"
    },
    "generator-star-spacing": {
      "deprecated": true,
      "replacedBy": [],
      "type": "layout",
      "docs": {
        "description": "Enforce consistent spacing around `*` operators in generator functions",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/generator-star-spacing"
      },
      "fixable": "whitespace",
      "name": "generator-star-spacing",
      "plugin": "eslint"
    },
    "getter-return": {
      "type": "problem",
      "docs": {
        "description": "Enforce `return` statements in getters",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/getter-return"
      },
      "fixable": null,
      "name": "getter-return",
      "plugin": "eslint"
    },
    "global-require": {
      "deprecated": true,
      "replacedBy": [],
      "type": "suggestion",
      "docs": {
        "description": "Require `require()` calls to be placed at top-level module scope",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/global-require"
      },
      "name": "global-require",
      "plugin": "eslint"
    },
    "grouped-accessor-pairs": {
      "type": "suggestion",
      "docs": {
        "description": "Require grouped accessor pairs in object literals and classes",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/grouped-accessor-pairs"
      },
      "name": "grouped-accessor-pairs",
      "plugin": "eslint"
    },
    "guard-for-in": {
      "type": "suggestion",
      "docs": {
        "description": "Require `for-in` loops to include an `if` statement",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/guard-for-in"
      },
      "name": "guard-for-in",
      "plugin": "eslint"
    },
    "handle-callback-err": {
      "deprecated": true,
      "replacedBy": [],
      "type": "suggestion",
      "docs": {
        "description": "Require error handling in callbacks",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/handle-callback-err"
      },
      "name": "handle-callback-err",
      "plugin": "eslint"
    },
    "id-blacklist": {
      "deprecated": true,
      "replacedBy": [
        "id-denylist"
      ],
      "type": "suggestion",
      "docs": {
        "description": "Disallow specified identifiers",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/id-blacklist"
      },
      "name": "id-blacklist",
      "plugin": "eslint"
    },
    "id-denylist": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow specified identifiers",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/id-denylist"
      },
      "name": "id-denylist",
      "plugin": "eslint"
    },
    "id-length": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce minimum and maximum identifier lengths",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/id-length"
      },
      "name": "id-length",
      "plugin": "eslint"
    },
    "id-match": {
      "type": "suggestion",
      "docs": {
        "description": "Require identifiers to match a specified regular expression",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/id-match"
      },
      "name": "id-match",
      "plugin": "eslint"
    },
    "implicit-arrow-linebreak": {
      "deprecated": true,
      "replacedBy": [],
      "type": "layout",
      "docs": {
        "description": "Enforce the location of arrow function bodies",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/implicit-arrow-linebreak"
      },
      "fixable": "whitespace",
      "name": "implicit-arrow-linebreak",
      "plugin": "eslint"
    },
    "indent": {
      "deprecated": true,
      "replacedBy": [],
      "type": "layout",
      "docs": {
        "description": "Enforce consistent indentation",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/indent"
      },
      "fixable": "whitespace",
      "name": "indent",
      "plugin": "eslint"
    },
    "indent-legacy": {
      "type": "layout",
      "docs": {
        "description": "Enforce consistent indentation",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/indent-legacy"
      },
      "deprecated": true,
      "replacedBy": [
        "indent"
      ],
      "fixable": "whitespace",
      "name": "indent-legacy",
      "plugin": "eslint"
    },
    "init-declarations": {
      "type": "suggestion",
      "docs": {
        "description": "Require or disallow initialization in variable declarations",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/init-declarations"
      },
      "name": "init-declarations",
      "plugin": "eslint"
    },
    "jsx-quotes": {
      "deprecated": true,
      "replacedBy": [],
      "type": "layout",
      "docs": {
        "description": "Enforce the consistent use of either double or single quotes in JSX attributes",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/jsx-quotes"
      },
      "fixable": "whitespace",
      "name": "jsx-quotes",
      "plugin": "eslint"
    },
    "key-spacing": {
      "deprecated": true,
      "replacedBy": [],
      "type": "layout",
      "docs": {
        "description": "Enforce consistent spacing between keys and values in object literal properties",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/key-spacing"
      },
      "fixable": "whitespace",
      "name": "key-spacing",
      "plugin": "eslint"
    },
    "keyword-spacing": {
      "deprecated": true,
      "replacedBy": [],
      "type": "layout",
      "docs": {
        "description": "Enforce consistent spacing before and after keywords",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/keyword-spacing"
      },
      "fixable": "whitespace",
      "name": "keyword-spacing",
      "plugin": "eslint"
    },
    "line-comment-position": {
      "type": "layout",
      "docs": {
        "description": "Enforce position of line comments",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/line-comment-position"
      },
      "name": "line-comment-position",
      "plugin": "eslint"
    },
    "linebreak-style": {
      "deprecated": true,
      "replacedBy": [],
      "type": "layout",
      "docs": {
        "description": "Enforce consistent linebreak style",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/linebreak-style"
      },
      "fixable": "whitespace",
      "name": "linebreak-style",
      "plugin": "eslint"
    },
    "lines-around-comment": {
      "deprecated": true,
      "replacedBy": [],
      "type": "layout",
      "docs": {
        "description": "Require empty lines around comments",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/lines-around-comment"
      },
      "fixable": "whitespace",
      "name": "lines-around-comment",
      "plugin": "eslint"
    },
    "lines-around-directive": {
      "type": "layout",
      "docs": {
        "description": "Require or disallow newlines around directives",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/lines-around-directive"
      },
      "fixable": "whitespace",
      "deprecated": true,
      "replacedBy": [
        "padding-line-between-statements"
      ],
      "name": "lines-around-directive",
      "plugin": "eslint"
    },
    "lines-between-class-members": {
      "deprecated": true,
      "replacedBy": [],
      "type": "layout",
      "docs": {
        "description": "Require or disallow an empty line between class members",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/lines-between-class-members"
      },
      "fixable": "whitespace",
      "name": "lines-between-class-members",
      "plugin": "eslint"
    },
    "logical-assignment-operators": {
      "type": "suggestion",
      "docs": {
        "description": "Require or disallow logical assignment operator shorthand",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/logical-assignment-operators"
      },
      "fixable": "code",
      "hasSuggestions": true,
      "name": "logical-assignment-operators",
      "plugin": "eslint"
    },
    "max-classes-per-file": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce a maximum number of classes per file",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/max-classes-per-file"
      },
      "name": "max-classes-per-file",
      "plugin": "eslint"
    },
    "max-depth": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce a maximum depth that blocks can be nested",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/max-depth"
      },
      "name": "max-depth",
      "plugin": "eslint"
    },
    "max-len": {
      "deprecated": true,
      "replacedBy": [],
      "type": "layout",
      "docs": {
        "description": "Enforce a maximum line length",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/max-len"
      },
      "name": "max-len",
      "plugin": "eslint"
    },
    "max-lines": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce a maximum number of lines per file",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/max-lines"
      },
      "name": "max-lines",
      "plugin": "eslint"
    },
    "max-lines-per-function": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce a maximum number of lines of code in a function",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/max-lines-per-function"
      },
      "name": "max-lines-per-function",
      "plugin": "eslint"
    },
    "max-nested-callbacks": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce a maximum depth that callbacks can be nested",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/max-nested-callbacks"
      },
      "name": "max-nested-callbacks",
      "plugin": "eslint"
    },
    "max-params": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce a maximum number of parameters in function definitions",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/max-params"
      },
      "name": "max-params",
      "plugin": "eslint"
    },
    "max-statements": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce a maximum number of statements allowed in function blocks",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/max-statements"
      },
      "name": "max-statements",
      "plugin": "eslint"
    },
    "max-statements-per-line": {
      "deprecated": true,
      "replacedBy": [],
      "type": "layout",
      "docs": {
        "description": "Enforce a maximum number of statements allowed per line",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/max-statements-per-line"
      },
      "name": "max-statements-per-line",
      "plugin": "eslint"
    },
    "multiline-comment-style": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce a particular style for multiline comments",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/multiline-comment-style"
      },
      "fixable": "whitespace",
      "name": "multiline-comment-style",
      "plugin": "eslint"
    },
    "multiline-ternary": {
      "deprecated": true,
      "replacedBy": [],
      "type": "layout",
      "docs": {
        "description": "Enforce newlines between operands of ternary expressions",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/multiline-ternary"
      },
      "fixable": "whitespace",
      "name": "multiline-ternary",
      "plugin": "eslint"
    },
    "new-cap": {
      "type": "suggestion",
      "docs": {
        "description": "Require constructor names to begin with a capital letter",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/new-cap"
      },
      "name": "new-cap",
      "plugin": "eslint"
    },
    "new-parens": {
      "deprecated": true,
      "replacedBy": [],
      "type": "layout",
      "docs": {
        "description": "Enforce or disallow parentheses when invoking a constructor with no arguments",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/new-parens"
      },
      "fixable": "code",
      "name": "new-parens",
      "plugin": "eslint"
    },
    "newline-after-var": {
      "type": "layout",
      "docs": {
        "description": "Require or disallow an empty line after variable declarations",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/newline-after-var"
      },
      "fixable": "whitespace",
      "deprecated": true,
      "replacedBy": [
        "padding-line-between-statements"
      ],
      "name": "newline-after-var",
      "plugin": "eslint"
    },
    "newline-before-return": {
      "type": "layout",
      "docs": {
        "description": "Require an empty line before `return` statements",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/newline-before-return"
      },
      "fixable": "whitespace",
      "deprecated": true,
      "replacedBy": [
        "padding-line-between-statements"
      ],
      "name": "newline-before-return",
      "plugin": "eslint"
    },
    "newline-per-chained-call": {
      "deprecated": true,
      "replacedBy": [],
      "type": "layout",
      "docs": {
        "description": "Require a newline after each call in a method chain",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/newline-per-chained-call"
      },
      "fixable": "whitespace",
      "name": "newline-per-chained-call",
      "plugin": "eslint"
    },
    "no-alert": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow the use of `alert`, `confirm`, and `prompt`",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-alert"
      },
      "name": "no-alert",
      "plugin": "eslint"
    },
    "no-array-constructor": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow `Array` constructors",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-array-constructor"
      },
      "hasSuggestions": true,
      "name": "no-array-constructor",
      "plugin": "eslint"
    },
    "no-async-promise-executor": {
      "type": "problem",
      "docs": {
        "description": "Disallow using an async function as a Promise executor",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-async-promise-executor"
      },
      "fixable": null,
      "name": "no-async-promise-executor",
      "plugin": "eslint"
    },
    "no-await-in-loop": {
      "type": "problem",
      "docs": {
        "description": "Disallow `await` inside of loops",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-await-in-loop"
      },
      "name": "no-await-in-loop",
      "plugin": "eslint"
    },
    "no-bitwise": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow bitwise operators",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-bitwise"
      },
      "name": "no-bitwise",
      "plugin": "eslint"
    },
    "no-buffer-constructor": {
      "deprecated": true,
      "replacedBy": [],
      "type": "problem",
      "docs": {
        "description": "Disallow use of the `Buffer()` constructor",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-buffer-constructor"
      },
      "name": "no-buffer-constructor",
      "plugin": "eslint"
    },
    "no-caller": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow the use of `arguments.caller` or `arguments.callee`",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-caller"
      },
      "name": "no-caller",
      "plugin": "eslint"
    },
    "no-case-declarations": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow lexical declarations in case clauses",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-case-declarations"
      },
      "name": "no-case-declarations",
      "plugin": "eslint"
    },
    "no-catch-shadow": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow `catch` clause parameters from shadowing variables in the outer scope",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-catch-shadow"
      },
      "replacedBy": [
        "no-shadow"
      ],
      "deprecated": true,
      "name": "no-catch-shadow",
      "plugin": "eslint"
    },
    "no-class-assign": {
      "type": "problem",
      "docs": {
        "description": "Disallow reassigning class members",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-class-assign"
      },
      "name": "no-class-assign",
      "plugin": "eslint"
    },
    "no-compare-neg-zero": {
      "type": "problem",
      "docs": {
        "description": "Disallow comparing against -0",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-compare-neg-zero"
      },
      "fixable": null,
      "name": "no-compare-neg-zero",
      "plugin": "eslint"
    },
    "no-cond-assign": {
      "type": "problem",
      "docs": {
        "description": "Disallow assignment operators in conditional expressions",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-cond-assign"
      },
      "name": "no-cond-assign",
      "plugin": "eslint"
    },
    "no-confusing-arrow": {
      "deprecated": true,
      "replacedBy": [],
      "type": "suggestion",
      "docs": {
        "description": "Disallow arrow functions where they could be confused with comparisons",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-confusing-arrow"
      },
      "fixable": "code",
      "name": "no-confusing-arrow",
      "plugin": "eslint"
    },
    "no-console": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow the use of `console`",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-console"
      },
      "hasSuggestions": true,
      "name": "no-console",
      "plugin": "eslint"
    },
    "no-const-assign": {
      "type": "problem",
      "docs": {
        "description": "Disallow reassigning `const` variables",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-const-assign"
      },
      "name": "no-const-assign",
      "plugin": "eslint"
    },
    "no-constant-binary-expression": {
      "type": "problem",
      "docs": {
        "description": "Disallow expressions where the operation doesn't affect the value",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-constant-binary-expression"
      },
      "name": "no-constant-binary-expression",
      "plugin": "eslint"
    },
    "no-constant-condition": {
      "type": "problem",
      "docs": {
        "description": "Disallow constant expressions in conditions",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-constant-condition"
      },
      "name": "no-constant-condition",
      "plugin": "eslint"
    },
    "no-constructor-return": {
      "type": "problem",
      "docs": {
        "description": "Disallow returning value from constructor",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-constructor-return"
      },
      "fixable": null,
      "name": "no-constructor-return",
      "plugin": "eslint"
    },
    "no-continue": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow `continue` statements",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-continue"
      },
      "name": "no-continue",
      "plugin": "eslint"
    },
    "no-control-regex": {
      "type": "problem",
      "docs": {
        "description": "Disallow control characters in regular expressions",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-control-regex"
      },
      "name": "no-control-regex",
      "plugin": "eslint"
    },
    "no-debugger": {
      "type": "problem",
      "docs": {
        "description": "Disallow the use of `debugger`",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-debugger"
      },
      "fixable": null,
      "name": "no-debugger",
      "plugin": "eslint"
    },
    "no-delete-var": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow deleting variables",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-delete-var"
      },
      "name": "no-delete-var",
      "plugin": "eslint"
    },
    "no-div-regex": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow equal signs explicitly at the beginning of regular expressions",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-div-regex"
      },
      "fixable": "code",
      "name": "no-div-regex",
      "plugin": "eslint"
    },
    "no-dupe-args": {
      "type": "problem",
      "docs": {
        "description": "Disallow duplicate arguments in `function` definitions",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-dupe-args"
      },
      "name": "no-dupe-args",
      "plugin": "eslint"
    },
    "no-dupe-class-members": {
      "type": "problem",
      "docs": {
        "description": "Disallow duplicate class members",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-dupe-class-members"
      },
      "name": "no-dupe-class-members",
      "plugin": "eslint"
    },
    "no-dupe-else-if": {
      "type": "problem",
      "docs": {
        "description": "Disallow duplicate conditions in if-else-if chains",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-dupe-else-if"
      },
      "name": "no-dupe-else-if",
      "plugin": "eslint"
    },
    "no-dupe-keys": {
      "type": "problem",
      "docs": {
        "description": "Disallow duplicate keys in object literals",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-dupe-keys"
      },
      "name": "no-dupe-keys",
      "plugin": "eslint"
    },
    "no-duplicate-case": {
      "type": "problem",
      "docs": {
        "description": "Disallow duplicate case labels",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-duplicate-case"
      },
      "name": "no-duplicate-case",
      "plugin": "eslint"
    },
    "no-duplicate-imports": {
      "type": "problem",
      "docs": {
        "description": "Disallow duplicate module imports",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-duplicate-imports"
      },
      "name": "no-duplicate-imports",
      "plugin": "eslint"
    },
    "no-else-return": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow `else` blocks after `return` statements in `if` statements",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-else-return"
      },
      "fixable": "code",
      "name": "no-else-return",
      "plugin": "eslint"
    },
    "no-empty": {
      "hasSuggestions": true,
      "type": "suggestion",
      "docs": {
        "description": "Disallow empty block statements",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-empty"
      },
      "name": "no-empty",
      "plugin": "eslint"
    },
    "no-empty-character-class": {
      "type": "problem",
      "docs": {
        "description": "Disallow empty character classes in regular expressions",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-empty-character-class"
      },
      "name": "no-empty-character-class",
      "plugin": "eslint"
    },
    "no-empty-function": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow empty functions",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-empty-function"
      },
      "name": "no-empty-function",
      "plugin": "eslint"
    },
    "no-empty-pattern": {
      "type": "problem",
      "docs": {
        "description": "Disallow empty destructuring patterns",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-empty-pattern"
      },
      "name": "no-empty-pattern",
      "plugin": "eslint"
    },
    "no-empty-static-block": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow empty static blocks",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-empty-static-block"
      },
      "name": "no-empty-static-block",
      "plugin": "eslint"
    },
    "no-eq-null": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow `null` comparisons without type-checking operators",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-eq-null"
      },
      "name": "no-eq-null",
      "plugin": "eslint"
    },
    "no-eval": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow the use of `eval()`",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-eval"
      },
      "name": "no-eval",
      "plugin": "eslint"
    },
    "no-ex-assign": {
      "type": "problem",
      "docs": {
        "description": "Disallow reassigning exceptions in `catch` clauses",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-ex-assign"
      },
      "name": "no-ex-assign",
      "plugin": "eslint"
    },
    "no-extend-native": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow extending native types",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-extend-native"
      },
      "name": "no-extend-native",
      "plugin": "eslint"
    },
    "no-extra-bind": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow unnecessary calls to `.bind()`",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-extra-bind"
      },
      "fixable": "code",
      "name": "no-extra-bind",
      "plugin": "eslint"
    },
    "no-extra-boolean-cast": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow unnecessary boolean casts",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-extra-boolean-cast"
      },
      "fixable": "code",
      "name": "no-extra-boolean-cast",
      "plugin": "eslint"
    },
    "no-extra-label": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow unnecessary labels",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-extra-label"
      },
      "fixable": "code",
      "name": "no-extra-label",
      "plugin": "eslint"
    },
    "no-extra-parens": {
      "deprecated": true,
      "replacedBy": [],
      "type": "layout",
      "docs": {
        "description": "Disallow unnecessary parentheses",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-extra-parens"
      },
      "fixable": "code",
      "name": "no-extra-parens",
      "plugin": "eslint"
    },
    "no-extra-semi": {
      "deprecated": true,
      "replacedBy": [],
      "type": "suggestion",
      "docs": {
        "description": "Disallow unnecessary semicolons",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-extra-semi"
      },
      "fixable": "code",
      "name": "no-extra-semi",
      "plugin": "eslint"
    },
    "no-fallthrough": {
      "type": "problem",
      "docs": {
        "description": "Disallow fallthrough of `case` statements",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-fallthrough"
      },
      "name": "no-fallthrough",
      "plugin": "eslint"
    },
    "no-floating-decimal": {
      "deprecated": true,
      "replacedBy": [],
      "type": "suggestion",
      "docs": {
        "description": "Disallow leading or trailing decimal points in numeric literals",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-floating-decimal"
      },
      "fixable": "code",
      "name": "no-floating-decimal",
      "plugin": "eslint"
    },
    "no-func-assign": {
      "type": "problem",
      "docs": {
        "description": "Disallow reassigning `function` declarations",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-func-assign"
      },
      "name": "no-func-assign",
      "plugin": "eslint"
    },
    "no-global-assign": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow assignments to native objects or read-only global variables",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-global-assign"
      },
      "name": "no-global-assign",
      "plugin": "eslint"
    },
    "no-implicit-coercion": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow shorthand type conversions",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-implicit-coercion"
      },
      "fixable": "code",
      "name": "no-implicit-coercion",
      "plugin": "eslint"
    },
    "no-implicit-globals": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow declarations in the global scope",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-implicit-globals"
      },
      "name": "no-implicit-globals",
      "plugin": "eslint"
    },
    "no-implied-eval": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow the use of `eval()`-like methods",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-implied-eval"
      },
      "name": "no-implied-eval",
      "plugin": "eslint"
    },
    "no-import-assign": {
      "type": "problem",
      "docs": {
        "description": "Disallow assigning to imported bindings",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-import-assign"
      },
      "name": "no-import-assign",
      "plugin": "eslint"
    },
    "no-inline-comments": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow inline comments after code",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-inline-comments"
      },
      "name": "no-inline-comments",
      "plugin": "eslint"
    },
    "no-inner-declarations": {
      "type": "problem",
      "docs": {
        "description": "Disallow variable or `function` declarations in nested blocks",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-inner-declarations"
      },
      "name": "no-inner-declarations",
      "plugin": "eslint"
    },
    "no-invalid-regexp": {
      "type": "problem",
      "docs": {
        "description": "Disallow invalid regular expression strings in `RegExp` constructors",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-invalid-regexp"
      },
      "name": "no-invalid-regexp",
      "plugin": "eslint"
    },
    "no-invalid-this": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow use of `this` in contexts where the value of `this` is `undefined`",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-invalid-this"
      },
      "name": "no-invalid-this",
      "plugin": "eslint"
    },
    "no-irregular-whitespace": {
      "type": "problem",
      "docs": {
        "description": "Disallow irregular whitespace",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-irregular-whitespace"
      },
      "name": "no-irregular-whitespace",
      "plugin": "eslint"
    },
    "no-iterator": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow the use of the `__iterator__` property",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-iterator"
      },
      "name": "no-iterator",
      "plugin": "eslint"
    },
    "no-label-var": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow labels that share a name with a variable",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-label-var"
      },
      "name": "no-label-var",
      "plugin": "eslint"
    },
    "no-labels": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow labeled statements",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-labels"
      },
      "name": "no-labels",
      "plugin": "eslint"
    },
    "no-lone-blocks": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow unnecessary nested blocks",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-lone-blocks"
      },
      "name": "no-lone-blocks",
      "plugin": "eslint"
    },
    "no-lonely-if": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow `if` statements as the only statement in `else` blocks",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-lonely-if"
      },
      "fixable": "code",
      "name": "no-lonely-if",
      "plugin": "eslint"
    },
    "no-loop-func": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow function declarations that contain unsafe references inside loop statements",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-loop-func"
      },
      "name": "no-loop-func",
      "plugin": "eslint"
    },
    "no-loss-of-precision": {
      "type": "problem",
      "docs": {
        "description": "Disallow literal numbers that lose precision",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-loss-of-precision"
      },
      "name": "no-loss-of-precision",
      "plugin": "eslint"
    },
    "no-magic-numbers": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow magic numbers",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-magic-numbers"
      },
      "name": "no-magic-numbers",
      "plugin": "eslint"
    },
    "no-misleading-character-class": {
      "type": "problem",
      "docs": {
        "description": "Disallow characters which are made with multiple code points in character class syntax",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-misleading-character-class"
      },
      "hasSuggestions": true,
      "name": "no-misleading-character-class",
      "plugin": "eslint"
    },
    "no-mixed-operators": {
      "deprecated": true,
      "replacedBy": [],
      "type": "suggestion",
      "docs": {
        "description": "Disallow mixed binary operators",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-mixed-operators"
      },
      "name": "no-mixed-operators",
      "plugin": "eslint"
    },
    "no-mixed-requires": {
      "deprecated": true,
      "replacedBy": [],
      "type": "suggestion",
      "docs": {
        "description": "Disallow `require` calls to be mixed with regular variable declarations",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-mixed-requires"
      },
      "name": "no-mixed-requires",
      "plugin": "eslint"
    },
    "no-mixed-spaces-and-tabs": {
      "deprecated": true,
      "replacedBy": [],
      "type": "layout",
      "docs": {
        "description": "Disallow mixed spaces and tabs for indentation",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-mixed-spaces-and-tabs"
      },
      "name": "no-mixed-spaces-and-tabs",
      "plugin": "eslint"
    },
    "no-multi-assign": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow use of chained assignment expressions",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-multi-assign"
      },
      "name": "no-multi-assign",
      "plugin": "eslint"
    },
    "no-multi-spaces": {
      "deprecated": true,
      "replacedBy": [],
      "type": "layout",
      "docs": {
        "description": "Disallow multiple spaces",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-multi-spaces"
      },
      "fixable": "whitespace",
      "name": "no-multi-spaces",
      "plugin": "eslint"
    },
    "no-multi-str": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow multiline strings",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-multi-str"
      },
      "name": "no-multi-str",
      "plugin": "eslint"
    },
    "no-multiple-empty-lines": {
      "deprecated": true,
      "replacedBy": [],
      "type": "layout",
      "docs": {
        "description": "Disallow multiple empty lines",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-multiple-empty-lines"
      },
      "fixable": "whitespace",
      "name": "no-multiple-empty-lines",
      "plugin": "eslint"
    },
    "no-native-reassign": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow assignments to native objects or read-only global variables",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-native-reassign"
      },
      "deprecated": true,
      "replacedBy": [
        "no-global-assign"
      ],
      "name": "no-native-reassign",
      "plugin": "eslint"
    },
    "no-negated-condition": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow negated conditions",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-negated-condition"
      },
      "name": "no-negated-condition",
      "plugin": "eslint"
    },
    "no-negated-in-lhs": {
      "type": "problem",
      "docs": {
        "description": "Disallow negating the left operand in `in` expressions",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-negated-in-lhs"
      },
      "replacedBy": [
        "no-unsafe-negation"
      ],
      "deprecated": true,
      "name": "no-negated-in-lhs",
      "plugin": "eslint"
    },
    "no-nested-ternary": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow nested ternary expressions",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-nested-ternary"
      },
      "name": "no-nested-ternary",
      "plugin": "eslint"
    },
    "no-new": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow `new` operators outside of assignments or comparisons",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-new"
      },
      "name": "no-new",
      "plugin": "eslint"
    },
    "no-new-func": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow `new` operators with the `Function` object",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-new-func"
      },
      "name": "no-new-func",
      "plugin": "eslint"
    },
    "no-new-native-nonconstructor": {
      "type": "problem",
      "docs": {
        "description": "Disallow `new` operators with global non-constructor functions",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
      },
      "name": "no-new-native-nonconstructor",
      "plugin": "eslint"
    },
    "no-new-object": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow `Object` constructors",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-new-object"
      },
      "deprecated": true,
      "replacedBy": [
        "no-object-constructor"
      ],
      "name": "no-new-object",
      "plugin": "eslint"
    },
    "no-new-require": {
      "deprecated": true,
      "replacedBy": [],
      "type": "suggestion",
      "docs": {
        "description": "Disallow `new` operators with calls to `require`",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-new-require"
      },
      "name": "no-new-require",
      "plugin": "eslint"
    },
    "no-new-symbol": {
      "type": "problem",
      "docs": {
        "description": "Disallow `new` operators with the `Symbol` object",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-new-symbol"
      },
      "name": "no-new-symbol",
      "plugin": "eslint"
    },
    "no-new-wrappers": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow `new` operators with the `String`, `Number`, and `Boolean` objects",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-new-wrappers"
      },
      "name": "no-new-wrappers",
      "plugin": "eslint"
    },
    "no-nonoctal-decimal-escape": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow `\\8` and `\\9` escape sequences in string literals",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-nonoctal-decimal-escape"
      },
      "hasSuggestions": true,
      "name": "no-nonoctal-decimal-escape",
      "plugin": "eslint"
    },
    "no-obj-calls": {
      "type": "problem",
      "docs": {
        "description": "Disallow calling global object properties as functions",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-obj-calls"
      },
      "name": "no-obj-calls",
      "plugin": "eslint"
    },
    "no-object-constructor": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow calls to the `Object` constructor without an argument",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-object-constructor"
      },
      "hasSuggestions": true,
      "name": "no-object-constructor",
      "plugin": "eslint"
    },
    "no-octal": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow octal literals",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-octal"
      },
      "name": "no-octal",
      "plugin": "eslint"
    },
    "no-octal-escape": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow octal escape sequences in string literals",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-octal-escape"
      },
      "name": "no-octal-escape",
      "plugin": "eslint"
    },
    "no-param-reassign": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow reassigning `function` parameters",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-param-reassign"
      },
      "name": "no-param-reassign",
      "plugin": "eslint"
    },
    "no-path-concat": {
      "deprecated": true,
      "replacedBy": [],
      "type": "suggestion",
      "docs": {
        "description": "Disallow string concatenation with `__dirname` and `__filename`",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-path-concat"
      },
      "name": "no-path-concat",
      "plugin": "eslint"
    },
    "no-plusplus": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow the unary operators `++` and `--`",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-plusplus"
      },
      "name": "no-plusplus",
      "plugin": "eslint"
    },
    "no-process-env": {
      "deprecated": true,
      "replacedBy": [],
      "type": "suggestion",
      "docs": {
        "description": "Disallow the use of `process.env`",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-process-env"
      },
      "name": "no-process-env",
      "plugin": "eslint"
    },
    "no-process-exit": {
      "deprecated": true,
      "replacedBy": [],
      "type": "suggestion",
      "docs": {
        "description": "Disallow the use of `process.exit()`",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-process-exit"
      },
      "name": "no-process-exit",
      "plugin": "eslint"
    },
    "no-promise-executor-return": {
      "type": "problem",
      "docs": {
        "description": "Disallow returning values from Promise executor functions",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-promise-executor-return"
      },
      "hasSuggestions": true,
      "name": "no-promise-executor-return",
      "plugin": "eslint"
    },
    "no-proto": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow the use of the `__proto__` property",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-proto"
      },
      "name": "no-proto",
      "plugin": "eslint"
    },
    "no-prototype-builtins": {
      "type": "problem",
      "docs": {
        "description": "Disallow calling some `Object.prototype` methods directly on objects",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-prototype-builtins"
      },
      "hasSuggestions": true,
      "name": "no-prototype-builtins",
      "plugin": "eslint"
    },
    "no-redeclare": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow variable redeclaration",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-redeclare"
      },
      "name": "no-redeclare",
      "plugin": "eslint"
    },
    "no-regex-spaces": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow multiple spaces in regular expressions",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-regex-spaces"
      },
      "fixable": "code",
      "name": "no-regex-spaces",
      "plugin": "eslint"
    },
    "no-restricted-exports": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow specified names in exports",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-restricted-exports"
      },
      "name": "no-restricted-exports",
      "plugin": "eslint"
    },
    "no-restricted-globals": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow specified global variables",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-restricted-globals"
      },
      "name": "no-restricted-globals",
      "plugin": "eslint"
    },
    "no-restricted-imports": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow specified modules when loaded by `import`",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-restricted-imports"
      },
      "name": "no-restricted-imports",
      "plugin": "eslint"
    },
    "no-restricted-modules": {
      "deprecated": true,
      "replacedBy": [],
      "type": "suggestion",
      "docs": {
        "description": "Disallow specified modules when loaded by `require`",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-restricted-modules"
      },
      "name": "no-restricted-modules",
      "plugin": "eslint"
    },
    "no-restricted-properties": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow certain properties on certain objects",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-restricted-properties"
      },
      "name": "no-restricted-properties",
      "plugin": "eslint"
    },
    "no-restricted-syntax": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow specified syntax",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-restricted-syntax"
      },
      "name": "no-restricted-syntax",
      "plugin": "eslint"
    },
    "no-return-assign": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow assignment operators in `return` statements",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-return-assign"
      },
      "name": "no-return-assign",
      "plugin": "eslint"
    },
    "no-return-await": {
      "hasSuggestions": true,
      "type": "suggestion",
      "docs": {
        "description": "Disallow unnecessary `return await`",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-return-await"
      },
      "fixable": null,
      "deprecated": true,
      "replacedBy": [],
      "name": "no-return-await",
      "plugin": "eslint"
    },
    "no-script-url": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow `javascript:` urls",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-script-url"
      },
      "name": "no-script-url",
      "plugin": "eslint"
    },
    "no-self-assign": {
      "type": "problem",
      "docs": {
        "description": "Disallow assignments where both sides are exactly the same",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-self-assign"
      },
      "name": "no-self-assign",
      "plugin": "eslint"
    },
    "no-self-compare": {
      "type": "problem",
      "docs": {
        "description": "Disallow comparisons where both sides are exactly the same",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-self-compare"
      },
      "name": "no-self-compare",
      "plugin": "eslint"
    },
    "no-sequences": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow comma operators",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-sequences"
      },
      "name": "no-sequences",
      "plugin": "eslint"
    },
    "no-setter-return": {
      "type": "problem",
      "docs": {
        "description": "Disallow returning values from setters",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-setter-return"
      },
      "name": "no-setter-return",
      "plugin": "eslint"
    },
    "no-shadow": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow variable declarations from shadowing variables declared in the outer scope",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-shadow"
      },
      "name": "no-shadow",
      "plugin": "eslint"
    },
    "no-shadow-restricted-names": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow identifiers from shadowing restricted names",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-shadow-restricted-names"
      },
      "name": "no-shadow-restricted-names",
      "plugin": "eslint"
    },
    "no-spaced-func": {
      "type": "layout",
      "docs": {
        "description": "Disallow spacing between function identifiers and their applications (deprecated)",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-spaced-func"
      },
      "deprecated": true,
      "replacedBy": [
        "func-call-spacing"
      ],
      "fixable": "whitespace",
      "name": "no-spaced-func",
      "plugin": "eslint"
    },
    "no-sparse-arrays": {
      "type": "problem",
      "docs": {
        "description": "Disallow sparse arrays",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-sparse-arrays"
      },
      "name": "no-sparse-arrays",
      "plugin": "eslint"
    },
    "no-sync": {
      "deprecated": true,
      "replacedBy": [],
      "type": "suggestion",
      "docs": {
        "description": "Disallow synchronous methods",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-sync"
      },
      "name": "no-sync",
      "plugin": "eslint"
    },
    "no-tabs": {
      "deprecated": true,
      "replacedBy": [],
      "type": "layout",
      "docs": {
        "description": "Disallow all tabs",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-tabs"
      },
      "name": "no-tabs",
      "plugin": "eslint"
    },
    "no-template-curly-in-string": {
      "type": "problem",
      "docs": {
        "description": "Disallow template literal placeholder syntax in regular strings",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-template-curly-in-string"
      },
      "name": "no-template-curly-in-string",
      "plugin": "eslint"
    },
    "no-ternary": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow ternary operators",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-ternary"
      },
      "name": "no-ternary",
      "plugin": "eslint"
    },
    "no-this-before-super": {
      "type": "problem",
      "docs": {
        "description": "Disallow `this`/`super` before calling `super()` in constructors",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-this-before-super"
      },
      "name": "no-this-before-super",
      "plugin": "eslint"
    },
    "no-throw-literal": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow throwing literals as exceptions",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-throw-literal"
      },
      "name": "no-throw-literal",
      "plugin": "eslint"
    },
    "no-trailing-spaces": {
      "deprecated": true,
      "replacedBy": [],
      "type": "layout",
      "docs": {
        "description": "Disallow trailing whitespace at the end of lines",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-trailing-spaces"
      },
      "fixable": "whitespace",
      "name": "no-trailing-spaces",
      "plugin": "eslint"
    },
    "no-undef": {
      "type": "problem",
      "docs": {
        "description": "Disallow the use of undeclared variables unless mentioned in `/*global */` comments",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-undef"
      },
      "name": "no-undef",
      "plugin": "eslint"
    },
    "no-undef-init": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow initializing variables to `undefined`",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-undef-init"
      },
      "fixable": "code",
      "name": "no-undef-init",
      "plugin": "eslint"
    },
    "no-undefined": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow the use of `undefined` as an identifier",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-undefined"
      },
      "name": "no-undefined",
      "plugin": "eslint"
    },
    "no-underscore-dangle": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow dangling underscores in identifiers",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-underscore-dangle"
      },
      "name": "no-underscore-dangle",
      "plugin": "eslint"
    },
    "no-unexpected-multiline": {
      "type": "problem",
      "docs": {
        "description": "Disallow confusing multiline expressions",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-unexpected-multiline"
      },
      "name": "no-unexpected-multiline",
      "plugin": "eslint"
    },
    "no-unmodified-loop-condition": {
      "type": "problem",
      "docs": {
        "description": "Disallow unmodified loop conditions",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-unmodified-loop-condition"
      },
      "name": "no-unmodified-loop-condition",
      "plugin": "eslint"
    },
    "no-unneeded-ternary": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow ternary operators when simpler alternatives exist",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-unneeded-ternary"
      },
      "fixable": "code",
      "name": "no-unneeded-ternary",
      "plugin": "eslint"
    },
    "no-unreachable": {
      "type": "problem",
      "docs": {
        "description": "Disallow unreachable code after `return`, `throw`, `continue`, and `break` statements",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-unreachable"
      },
      "name": "no-unreachable",
      "plugin": "eslint"
    },
    "no-unreachable-loop": {
      "type": "problem",
      "docs": {
        "description": "Disallow loops with a body that allows only one iteration",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-unreachable-loop"
      },
      "name": "no-unreachable-loop",
      "plugin": "eslint"
    },
    "no-unsafe-finally": {
      "type": "problem",
      "docs": {
        "description": "Disallow control flow statements in `finally` blocks",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-unsafe-finally"
      },
      "name": "no-unsafe-finally",
      "plugin": "eslint"
    },
    "no-unsafe-negation": {
      "type": "problem",
      "docs": {
        "description": "Disallow negating the left operand of relational operators",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-unsafe-negation"
      },
      "hasSuggestions": true,
      "fixable": null,
      "name": "no-unsafe-negation",
      "plugin": "eslint"
    },
    "no-unsafe-optional-chaining": {
      "type": "problem",
      "docs": {
        "description": "Disallow use of optional chaining in contexts where the `undefined` value is not allowed",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-unsafe-optional-chaining"
      },
      "fixable": null,
      "name": "no-unsafe-optional-chaining",
      "plugin": "eslint"
    },
    "no-unused-expressions": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow unused expressions",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-unused-expressions"
      },
      "name": "no-unused-expressions",
      "plugin": "eslint"
    },
    "no-unused-labels": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow unused labels",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-unused-labels"
      },
      "fixable": "code",
      "name": "no-unused-labels",
      "plugin": "eslint"
    },
    "no-unused-private-class-members": {
      "type": "problem",
      "docs": {
        "description": "Disallow unused private class members",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-unused-private-class-members"
      },
      "name": "no-unused-private-class-members",
      "plugin": "eslint"
    },
    "no-unused-vars": {
      "type": "problem",
      "docs": {
        "description": "Disallow unused variables",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-unused-vars"
      },
      "name": "no-unused-vars",
      "plugin": "eslint"
    },
    "no-use-before-define": {
      "type": "problem",
      "docs": {
        "description": "Disallow the use of variables before they are defined",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-use-before-define"
      },
      "name": "no-use-before-define",
      "plugin": "eslint"
    },
    "no-useless-backreference": {
      "type": "problem",
      "docs": {
        "description": "Disallow useless backreferences in regular expressions",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-useless-backreference"
      },
      "name": "no-useless-backreference",
      "plugin": "eslint"
    },
    "no-useless-call": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow unnecessary calls to `.call()` and `.apply()`",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-useless-call"
      },
      "name": "no-useless-call",
      "plugin": "eslint"
    },
    "no-useless-catch": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow unnecessary `catch` clauses",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-useless-catch"
      },
      "name": "no-useless-catch",
      "plugin": "eslint"
    },
    "no-useless-computed-key": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow unnecessary computed property keys in objects and classes",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-useless-computed-key"
      },
      "fixable": "code",
      "name": "no-useless-computed-key",
      "plugin": "eslint"
    },
    "no-useless-concat": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow unnecessary concatenation of literals or template literals",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-useless-concat"
      },
      "name": "no-useless-concat",
      "plugin": "eslint"
    },
    "no-useless-constructor": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow unnecessary constructors",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-useless-constructor"
      },
      "name": "no-useless-constructor",
      "plugin": "eslint"
    },
    "no-useless-escape": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow unnecessary escape characters",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-useless-escape"
      },
      "hasSuggestions": true,
      "name": "no-useless-escape",
      "plugin": "eslint"
    },
    "no-useless-rename": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow renaming import, export, and destructured assignments to the same name",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-useless-rename"
      },
      "fixable": "code",
      "name": "no-useless-rename",
      "plugin": "eslint"
    },
    "no-useless-return": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow redundant return statements",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-useless-return"
      },
      "fixable": "code",
      "name": "no-useless-return",
      "plugin": "eslint"
    },
    "no-var": {
      "type": "suggestion",
      "docs": {
        "description": "Require `let` or `const` instead of `var`",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-var"
      },
      "fixable": "code",
      "name": "no-var",
      "plugin": "eslint"
    },
    "no-void": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow `void` operators",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-void"
      },
      "name": "no-void",
      "plugin": "eslint"
    },
    "no-warning-comments": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow specified warning terms in comments",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-warning-comments"
      },
      "name": "no-warning-comments",
      "plugin": "eslint"
    },
    "no-whitespace-before-property": {
      "deprecated": true,
      "replacedBy": [],
      "type": "layout",
      "docs": {
        "description": "Disallow whitespace before properties",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-whitespace-before-property"
      },
      "fixable": "whitespace",
      "name": "no-whitespace-before-property",
      "plugin": "eslint"
    },
    "no-with": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow `with` statements",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-with"
      },
      "name": "no-with",
      "plugin": "eslint"
    },
    "nonblock-statement-body-position": {
      "deprecated": true,
      "replacedBy": [],
      "type": "layout",
      "docs": {
        "description": "Enforce the location of single-line statements",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/nonblock-statement-body-position"
      },
      "fixable": "whitespace",
      "name": "nonblock-statement-body-position",
      "plugin": "eslint"
    },
    "object-curly-newline": {
      "deprecated": true,
      "replacedBy": [],
      "type": "layout",
      "docs": {
        "description": "Enforce consistent line breaks after opening and before closing braces",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/object-curly-newline"
      },
      "fixable": "whitespace",
      "name": "object-curly-newline",
      "plugin": "eslint"
    },
    "object-curly-spacing": {
      "deprecated": true,
      "replacedBy": [],
      "type": "layout",
      "docs": {
        "description": "Enforce consistent spacing inside braces",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/object-curly-spacing"
      },
      "fixable": "whitespace",
      "name": "object-curly-spacing",
      "plugin": "eslint"
    },
    "object-property-newline": {
      "deprecated": true,
      "replacedBy": [],
      "type": "layout",
      "docs": {
        "description": "Enforce placing object properties on separate lines",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/object-property-newline"
      },
      "fixable": "whitespace",
      "name": "object-property-newline",
      "plugin": "eslint"
    },
    "object-shorthand": {
      "type": "suggestion",
      "docs": {
        "description": "Require or disallow method and property shorthand syntax for object literals",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/object-shorthand"
      },
      "fixable": "code",
      "name": "object-shorthand",
      "plugin": "eslint"
    },
    "one-var": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce variables to be declared either together or separately in functions",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/one-var"
      },
      "fixable": "code",
      "name": "one-var",
      "plugin": "eslint"
    },
    "one-var-declaration-per-line": {
      "deprecated": true,
      "replacedBy": [],
      "type": "suggestion",
      "docs": {
        "description": "Require or disallow newlines around variable declarations",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/one-var-declaration-per-line"
      },
      "fixable": "whitespace",
      "name": "one-var-declaration-per-line",
      "plugin": "eslint"
    },
    "operator-assignment": {
      "type": "suggestion",
      "docs": {
        "description": "Require or disallow assignment operator shorthand where possible",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/operator-assignment"
      },
      "fixable": "code",
      "name": "operator-assignment",
      "plugin": "eslint"
    },
    "operator-linebreak": {
      "deprecated": true,
      "replacedBy": [],
      "type": "layout",
      "docs": {
        "description": "Enforce consistent linebreak style for operators",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/operator-linebreak"
      },
      "fixable": "code",
      "name": "operator-linebreak",
      "plugin": "eslint"
    },
    "padded-blocks": {
      "deprecated": true,
      "replacedBy": [],
      "type": "layout",
      "docs": {
        "description": "Require or disallow padding within blocks",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/padded-blocks"
      },
      "fixable": "whitespace",
      "name": "padded-blocks",
      "plugin": "eslint"
    },
    "padding-line-between-statements": {
      "deprecated": true,
      "replacedBy": [],
      "type": "layout",
      "docs": {
        "description": "Require or disallow padding lines between statements",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/padding-line-between-statements"
      },
      "fixable": "whitespace",
      "name": "padding-line-between-statements",
      "plugin": "eslint"
    },
    "prefer-arrow-callback": {
      "type": "suggestion",
      "docs": {
        "description": "Require using arrow functions for callbacks",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/prefer-arrow-callback"
      },
      "fixable": "code",
      "name": "prefer-arrow-callback",
      "plugin": "eslint"
    },
    "prefer-const": {
      "type": "suggestion",
      "docs": {
        "description": "Require `const` declarations for variables that are never reassigned after declared",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/prefer-const"
      },
      "fixable": "code",
      "name": "prefer-const",
      "plugin": "eslint"
    },
    "prefer-destructuring": {
      "type": "suggestion",
      "docs": {
        "description": "Require destructuring from arrays and/or objects",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/prefer-destructuring"
      },
      "fixable": "code",
      "name": "prefer-destructuring",
      "plugin": "eslint"
    },
    "prefer-exponentiation-operator": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow the use of `Math.pow` in favor of the `**` operator",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/prefer-exponentiation-operator"
      },
      "fixable": "code",
      "name": "prefer-exponentiation-operator",
      "plugin": "eslint"
    },
    "prefer-named-capture-group": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce using named capture group in regular expression",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/prefer-named-capture-group"
      },
      "hasSuggestions": true,
      "name": "prefer-named-capture-group",
      "plugin": "eslint"
    },
    "prefer-numeric-literals": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow `parseInt()` and `Number.parseInt()` in favor of binary, octal, and hexadecimal literals",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/prefer-numeric-literals"
      },
      "fixable": "code",
      "name": "prefer-numeric-literals",
      "plugin": "eslint"
    },
    "prefer-object-has-own": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow use of `Object.prototype.hasOwnProperty.call()` and prefer use of `Object.hasOwn()`",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/prefer-object-has-own"
      },
      "fixable": "code",
      "name": "prefer-object-has-own",
      "plugin": "eslint"
    },
    "prefer-object-spread": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow using Object.assign with an object literal as the first argument and prefer the use of object spread instead",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/prefer-object-spread"
      },
      "fixable": "code",
      "name": "prefer-object-spread",
      "plugin": "eslint"
    },
    "prefer-promise-reject-errors": {
      "type": "suggestion",
      "docs": {
        "description": "Require using Error objects as Promise rejection reasons",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/prefer-promise-reject-errors"
      },
      "fixable": null,
      "name": "prefer-promise-reject-errors",
      "plugin": "eslint"
    },
    "prefer-reflect": {
      "type": "suggestion",
      "docs": {
        "description": "Require `Reflect` methods where applicable",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/prefer-reflect"
      },
      "deprecated": true,
      "replacedBy": [],
      "name": "prefer-reflect",
      "plugin": "eslint"
    },
    "prefer-regex-literals": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow use of the `RegExp` constructor in favor of regular expression literals",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/prefer-regex-literals"
      },
      "hasSuggestions": true,
      "name": "prefer-regex-literals",
      "plugin": "eslint"
    },
    "prefer-rest-params": {
      "type": "suggestion",
      "docs": {
        "description": "Require rest parameters instead of `arguments`",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/prefer-rest-params"
      },
      "name": "prefer-rest-params",
      "plugin": "eslint"
    },
    "prefer-spread": {
      "type": "suggestion",
      "docs": {
        "description": "Require spread operators instead of `.apply()`",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/prefer-spread"
      },
      "fixable": null,
      "name": "prefer-spread",
      "plugin": "eslint"
    },
    "prefer-template": {
      "type": "suggestion",
      "docs": {
        "description": "Require template literals instead of string concatenation",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/prefer-template"
      },
      "fixable": "code",
      "name": "prefer-template",
      "plugin": "eslint"
    },
    "quote-props": {
      "deprecated": true,
      "replacedBy": [],
      "type": "suggestion",
      "docs": {
        "description": "Require quotes around object literal property names",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/quote-props"
      },
      "fixable": "code",
      "name": "quote-props",
      "plugin": "eslint"
    },
    "quotes": {
      "deprecated": true,
      "replacedBy": [],
      "type": "layout",
      "docs": {
        "description": "Enforce the consistent use of either backticks, double, or single quotes",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/quotes"
      },
      "fixable": "code",
      "name": "quotes",
      "plugin": "eslint"
    },
    "radix": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce the consistent use of the radix argument when using `parseInt()`",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/radix"
      },
      "hasSuggestions": true,
      "name": "radix",
      "plugin": "eslint"
    },
    "require-atomic-updates": {
      "type": "problem",
      "docs": {
        "description": "Disallow assignments that can lead to race conditions due to usage of `await` or `yield`",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/require-atomic-updates"
      },
      "fixable": null,
      "name": "require-atomic-updates",
      "plugin": "eslint"
    },
    "require-await": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow async functions which have no `await` expression",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/require-await"
      },
      "name": "require-await",
      "plugin": "eslint"
    },
    "require-jsdoc": {
      "type": "suggestion",
      "docs": {
        "description": "Require JSDoc comments",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/require-jsdoc"
      },
      "deprecated": true,
      "replacedBy": [],
      "name": "require-jsdoc",
      "plugin": "eslint"
    },
    "require-unicode-regexp": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce the use of `u` or `v` flag on RegExp",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/require-unicode-regexp"
      },
      "hasSuggestions": true,
      "name": "require-unicode-regexp",
      "plugin": "eslint"
    },
    "require-yield": {
      "type": "suggestion",
      "docs": {
        "description": "Require generator functions to contain `yield`",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/require-yield"
      },
      "name": "require-yield",
      "plugin": "eslint"
    },
    "rest-spread-spacing": {
      "deprecated": true,
      "replacedBy": [],
      "type": "layout",
      "docs": {
        "description": "Enforce spacing between rest and spread operators and their expressions",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/rest-spread-spacing"
      },
      "fixable": "whitespace",
      "name": "rest-spread-spacing",
      "plugin": "eslint"
    },
    "semi": {
      "deprecated": true,
      "replacedBy": [],
      "type": "layout",
      "docs": {
        "description": "Require or disallow semicolons instead of ASI",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/semi"
      },
      "fixable": "code",
      "name": "semi",
      "plugin": "eslint"
    },
    "semi-spacing": {
      "deprecated": true,
      "replacedBy": [],
      "type": "layout",
      "docs": {
        "description": "Enforce consistent spacing before and after semicolons",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/semi-spacing"
      },
      "fixable": "whitespace",
      "name": "semi-spacing",
      "plugin": "eslint"
    },
    "semi-style": {
      "deprecated": true,
      "replacedBy": [],
      "type": "layout",
      "docs": {
        "description": "Enforce location of semicolons",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/semi-style"
      },
      "fixable": "whitespace",
      "name": "semi-style",
      "plugin": "eslint"
    },
    "sort-imports": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce sorted import declarations within modules",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/sort-imports"
      },
      "fixable": "code",
      "name": "sort-imports",
      "plugin": "eslint"
    },
    "sort-keys": {
      "type": "suggestion",
      "docs": {
        "description": "Require object keys to be sorted",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/sort-keys"
      },
      "name": "sort-keys",
      "plugin": "eslint"
    },
    "sort-vars": {
      "type": "suggestion",
      "docs": {
        "description": "Require variables within the same declaration block to be sorted",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/sort-vars"
      },
      "fixable": "code",
      "name": "sort-vars",
      "plugin": "eslint"
    },
    "space-before-blocks": {
      "deprecated": true,
      "replacedBy": [],
      "type": "layout",
      "docs": {
        "description": "Enforce consistent spacing before blocks",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/space-before-blocks"
      },
      "fixable": "whitespace",
      "name": "space-before-blocks",
      "plugin": "eslint"
    },
    "space-before-function-paren": {
      "deprecated": true,
      "replacedBy": [],
      "type": "layout",
      "docs": {
        "description": "Enforce consistent spacing before `function` definition opening parenthesis",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/space-before-function-paren"
      },
      "fixable": "whitespace",
      "name": "space-before-function-paren",
      "plugin": "eslint"
    },
    "space-in-parens": {
      "deprecated": true,
      "replacedBy": [],
      "type": "layout",
      "docs": {
        "description": "Enforce consistent spacing inside parentheses",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/space-in-parens"
      },
      "fixable": "whitespace",
      "name": "space-in-parens",
      "plugin": "eslint"
    },
    "space-infix-ops": {
      "deprecated": true,
      "replacedBy": [],
      "type": "layout",
      "docs": {
        "description": "Require spacing around infix operators",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/space-infix-ops"
      },
      "fixable": "whitespace",
      "name": "space-infix-ops",
      "plugin": "eslint"
    },
    "space-unary-ops": {
      "deprecated": true,
      "replacedBy": [],
      "type": "layout",
      "docs": {
        "description": "Enforce consistent spacing before or after unary operators",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/space-unary-ops"
      },
      "fixable": "whitespace",
      "name": "space-unary-ops",
      "plugin": "eslint"
    },
    "spaced-comment": {
      "deprecated": true,
      "replacedBy": [],
      "type": "suggestion",
      "docs": {
        "description": "Enforce consistent spacing after the `//` or `/*` in a comment",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/spaced-comment"
      },
      "fixable": "whitespace",
      "name": "spaced-comment",
      "plugin": "eslint"
    },
    "strict": {
      "type": "suggestion",
      "docs": {
        "description": "Require or disallow strict mode directives",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/strict"
      },
      "fixable": "code",
      "name": "strict",
      "plugin": "eslint"
    },
    "switch-colon-spacing": {
      "deprecated": true,
      "replacedBy": [],
      "type": "layout",
      "docs": {
        "description": "Enforce spacing around colons of switch statements",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/switch-colon-spacing"
      },
      "fixable": "whitespace",
      "name": "switch-colon-spacing",
      "plugin": "eslint"
    },
    "symbol-description": {
      "type": "suggestion",
      "docs": {
        "description": "Require symbol descriptions",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/symbol-description"
      },
      "fixable": null,
      "name": "symbol-description",
      "plugin": "eslint"
    },
    "template-curly-spacing": {
      "deprecated": true,
      "replacedBy": [],
      "type": "layout",
      "docs": {
        "description": "Require or disallow spacing around embedded expressions of template strings",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/template-curly-spacing"
      },
      "fixable": "whitespace",
      "name": "template-curly-spacing",
      "plugin": "eslint"
    },
    "template-tag-spacing": {
      "deprecated": true,
      "replacedBy": [],
      "type": "layout",
      "docs": {
        "description": "Require or disallow spacing between template tags and their literals",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/template-tag-spacing"
      },
      "fixable": "whitespace",
      "name": "template-tag-spacing",
      "plugin": "eslint"
    },
    "unicode-bom": {
      "type": "layout",
      "docs": {
        "description": "Require or disallow Unicode byte order mark (BOM)",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/unicode-bom"
      },
      "fixable": "whitespace",
      "name": "unicode-bom",
      "plugin": "eslint"
    },
    "use-isnan": {
      "type": "problem",
      "docs": {
        "description": "Require calls to `isNaN()` when checking for `NaN`",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/use-isnan"
      },
      "name": "use-isnan",
      "plugin": "eslint"
    },
    "valid-jsdoc": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce valid JSDoc comments",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/valid-jsdoc"
      },
      "fixable": "code",
      "deprecated": true,
      "replacedBy": [],
      "name": "valid-jsdoc",
      "plugin": "eslint"
    },
    "valid-typeof": {
      "type": "problem",
      "docs": {
        "description": "Enforce comparing `typeof` expressions against valid strings",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/valid-typeof"
      },
      "hasSuggestions": true,
      "name": "valid-typeof",
      "plugin": "eslint"
    },
    "vars-on-top": {
      "type": "suggestion",
      "docs": {
        "description": "Require `var` declarations be placed at the top of their containing scope",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/vars-on-top"
      },
      "name": "vars-on-top",
      "plugin": "eslint"
    },
    "wrap-iife": {
      "deprecated": true,
      "replacedBy": [],
      "type": "layout",
      "docs": {
        "description": "Require parentheses around immediate `function` invocations",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/wrap-iife"
      },
      "fixable": "code",
      "name": "wrap-iife",
      "plugin": "eslint"
    },
    "wrap-regex": {
      "deprecated": true,
      "replacedBy": [],
      "type": "layout",
      "docs": {
        "description": "Require parenthesis around regex literals",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/wrap-regex"
      },
      "fixable": "code",
      "name": "wrap-regex",
      "plugin": "eslint"
    },
    "yield-star-spacing": {
      "deprecated": true,
      "replacedBy": [],
      "type": "layout",
      "docs": {
        "description": "Require or disallow spacing around the `*` in `yield*` expressions",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/yield-star-spacing"
      },
      "fixable": "whitespace",
      "name": "yield-star-spacing",
      "plugin": "eslint"
    },
    "yoda": {
      "type": "suggestion",
      "docs": {
        "description": "Require or disallow \"Yoda\" conditions",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/yoda"
      },
      "fixable": "code",
      "name": "yoda",
      "plugin": "eslint"
    },
    "unused-imports/no-unused-vars": {
      "type": "problem",
      "docs": {
        "description": "Disallow unused variables",
        "recommended": "recommended",
        "extendsBaseRule": false,
        "url": "https://github.com/sweepline/eslint-plugin-unused-imports/blob/master/docs/rules/no-unused-imports.md"
      },
      "fixable": "code",
      "name": "unused-imports/no-unused-vars",
      "plugin": "unused-imports"
    },
    "unused-imports/no-unused-imports": {
      "type": "problem",
      "docs": {
        "description": "Disallow unused variables",
        "recommended": "recommended",
        "extendsBaseRule": false,
        "url": "https://github.com/sweepline/eslint-plugin-unused-imports/blob/master/docs/rules/no-unused-imports.md"
      },
      "fixable": "code",
      "name": "unused-imports/no-unused-imports",
      "plugin": "unused-imports"
    },
    "unicorn/better-regex": {
      "type": "suggestion",
      "docs": {
        "description": "Improve regexes by making them shorter, consistent, and safer.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v53.0.0/docs/rules/better-regex.md"
      },
      "fixable": "code",
      "name": "unicorn/better-regex",
      "plugin": "unicorn"
    },
    "unicorn/catch-error-name": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce a specific parameter name in catch clauses.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v53.0.0/docs/rules/catch-error-name.md"
      },
      "fixable": "code",
      "name": "unicorn/catch-error-name",
      "plugin": "unicorn"
    },
    "unicorn/consistent-destructuring": {
      "type": "suggestion",
      "docs": {
        "description": "Use destructured variables over properties.",
        "recommended": false,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v53.0.0/docs/rules/consistent-destructuring.md"
      },
      "fixable": "code",
      "hasSuggestions": true,
      "name": "unicorn/consistent-destructuring",
      "plugin": "unicorn"
    },
    "unicorn/consistent-empty-array-spread": {
      "type": "suggestion",
      "docs": {
        "description": "Prefer consistent types when spreading a ternary in an array literal.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v53.0.0/docs/rules/consistent-empty-array-spread.md"
      },
      "fixable": "code",
      "name": "unicorn/consistent-empty-array-spread",
      "plugin": "unicorn"
    },
    "unicorn/consistent-function-scoping": {
      "type": "suggestion",
      "docs": {
        "description": "Move function definitions to the highest possible scope.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v53.0.0/docs/rules/consistent-function-scoping.md"
      },
      "name": "unicorn/consistent-function-scoping",
      "plugin": "unicorn"
    },
    "unicorn/custom-error-definition": {
      "type": "problem",
      "docs": {
        "description": "Enforce correct `Error` subclassing.",
        "recommended": false,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v53.0.0/docs/rules/custom-error-definition.md"
      },
      "fixable": "code",
      "name": "unicorn/custom-error-definition",
      "plugin": "unicorn"
    },
    "unicorn/empty-brace-spaces": {
      "type": "layout",
      "docs": {
        "description": "Enforce no spaces between braces.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v53.0.0/docs/rules/empty-brace-spaces.md"
      },
      "fixable": "whitespace",
      "name": "unicorn/empty-brace-spaces",
      "plugin": "unicorn"
    },
    "unicorn/error-message": {
      "type": "problem",
      "docs": {
        "description": "Enforce passing a `message` value when creating a built-in error.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v53.0.0/docs/rules/error-message.md"
      },
      "name": "unicorn/error-message",
      "plugin": "unicorn"
    },
    "unicorn/escape-case": {
      "type": "suggestion",
      "docs": {
        "description": "Require escape sequences to use uppercase values.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v53.0.0/docs/rules/escape-case.md"
      },
      "fixable": "code",
      "name": "unicorn/escape-case",
      "plugin": "unicorn"
    },
    "unicorn/expiring-todo-comments": {
      "type": "suggestion",
      "docs": {
        "description": "Add expiration conditions to TODO comments.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v53.0.0/docs/rules/expiring-todo-comments.md"
      },
      "name": "unicorn/expiring-todo-comments",
      "plugin": "unicorn"
    },
    "unicorn/explicit-length-check": {
      "type": "problem",
      "docs": {
        "description": "Enforce explicitly comparing the `length` or `size` property of a value.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v53.0.0/docs/rules/explicit-length-check.md"
      },
      "fixable": "code",
      "hasSuggestions": true,
      "name": "unicorn/explicit-length-check",
      "plugin": "unicorn"
    },
    "unicorn/filename-case": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce a case style for filenames.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v53.0.0/docs/rules/filename-case.md"
      },
      "name": "unicorn/filename-case",
      "plugin": "unicorn"
    },
    "unicorn/import-style": {
      "type": "problem",
      "docs": {
        "description": "Enforce specific import styles per module.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v53.0.0/docs/rules/import-style.md"
      },
      "name": "unicorn/import-style",
      "plugin": "unicorn"
    },
    "unicorn/new-for-builtins": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce the use of `new` for all builtins, except `String`, `Number`, `Boolean`, `Symbol` and `BigInt`.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v53.0.0/docs/rules/new-for-builtins.md"
      },
      "fixable": "code",
      "name": "unicorn/new-for-builtins",
      "plugin": "unicorn"
    },
    "unicorn/no-abusive-eslint-disable": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce specifying rules to disable in `eslint-disable` comments.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v53.0.0/docs/rules/no-abusive-eslint-disable.md"
      },
      "name": "unicorn/no-abusive-eslint-disable",
      "plugin": "unicorn"
    },
    "unicorn/no-anonymous-default-export": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow anonymous functions and classes as the default export.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v53.0.0/docs/rules/no-anonymous-default-export.md"
      },
      "hasSuggestions": true,
      "name": "unicorn/no-anonymous-default-export",
      "plugin": "unicorn"
    },
    "unicorn/no-array-callback-reference": {
      "type": "problem",
      "docs": {
        "description": "Prevent passing a function reference directly to iterator methods.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v53.0.0/docs/rules/no-array-callback-reference.md"
      },
      "hasSuggestions": true,
      "name": "unicorn/no-array-callback-reference",
      "plugin": "unicorn"
    },
    "unicorn/no-array-for-each": {
      "type": "suggestion",
      "docs": {
        "description": "Prefer `for…of` over the `forEach` method.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v53.0.0/docs/rules/no-array-for-each.md"
      },
      "fixable": "code",
      "hasSuggestions": true,
      "name": "unicorn/no-array-for-each",
      "plugin": "unicorn"
    },
    "unicorn/no-array-method-this-argument": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow using the `this` argument in array methods.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v53.0.0/docs/rules/no-array-method-this-argument.md"
      },
      "fixable": "code",
      "hasSuggestions": true,
      "name": "unicorn/no-array-method-this-argument",
      "plugin": "unicorn"
    },
    "unicorn/no-array-push-push": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce combining multiple `Array#push()` into one call.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v53.0.0/docs/rules/no-array-push-push.md"
      },
      "fixable": "code",
      "hasSuggestions": true,
      "name": "unicorn/no-array-push-push",
      "plugin": "unicorn"
    },
    "unicorn/no-array-reduce": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow `Array#reduce()` and `Array#reduceRight()`.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v53.0.0/docs/rules/no-array-reduce.md"
      },
      "name": "unicorn/no-array-reduce",
      "plugin": "unicorn"
    },
    "unicorn/no-await-expression-member": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow member access from await expression.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v53.0.0/docs/rules/no-await-expression-member.md"
      },
      "fixable": "code",
      "name": "unicorn/no-await-expression-member",
      "plugin": "unicorn"
    },
    "unicorn/no-await-in-promise-methods": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow using `await` in `Promise` method parameters.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v53.0.0/docs/rules/no-await-in-promise-methods.md"
      },
      "hasSuggestions": true,
      "name": "unicorn/no-await-in-promise-methods",
      "plugin": "unicorn"
    },
    "unicorn/no-console-spaces": {
      "type": "suggestion",
      "docs": {
        "description": "Do not use leading/trailing space between `console.log` parameters.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v53.0.0/docs/rules/no-console-spaces.md"
      },
      "fixable": "code",
      "name": "unicorn/no-console-spaces",
      "plugin": "unicorn"
    },
    "unicorn/no-document-cookie": {
      "type": "problem",
      "docs": {
        "description": "Do not use `document.cookie` directly.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v53.0.0/docs/rules/no-document-cookie.md"
      },
      "name": "unicorn/no-document-cookie",
      "plugin": "unicorn"
    },
    "unicorn/no-empty-file": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow empty files.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v53.0.0/docs/rules/no-empty-file.md"
      },
      "name": "unicorn/no-empty-file",
      "plugin": "unicorn"
    },
    "unicorn/no-for-loop": {
      "type": "suggestion",
      "docs": {
        "description": "Do not use a `for` loop that can be replaced with a `for-of` loop.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v53.0.0/docs/rules/no-for-loop.md"
      },
      "fixable": "code",
      "hasSuggestions": true,
      "name": "unicorn/no-for-loop",
      "plugin": "unicorn"
    },
    "unicorn/no-hex-escape": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce the use of Unicode escapes instead of hexadecimal escapes.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v53.0.0/docs/rules/no-hex-escape.md"
      },
      "fixable": "code",
      "name": "unicorn/no-hex-escape",
      "plugin": "unicorn"
    },
    "unicorn/no-instanceof-array": {
      "type": "suggestion",
      "docs": {
        "description": "Require `Array.isArray()` instead of `instanceof Array`.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v53.0.0/docs/rules/no-instanceof-array.md"
      },
      "fixable": "code",
      "name": "unicorn/no-instanceof-array",
      "plugin": "unicorn"
    },
    "unicorn/no-invalid-fetch-options": {
      "type": "problem",
      "docs": {
        "description": "Disallow invalid options in `fetch()` and `new Request()`.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v53.0.0/docs/rules/no-invalid-fetch-options.md"
      },
      "name": "unicorn/no-invalid-fetch-options",
      "plugin": "unicorn"
    },
    "unicorn/no-invalid-remove-event-listener": {
      "type": "problem",
      "docs": {
        "description": "Prevent calling `EventTarget#removeEventListener()` with the result of an expression.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v53.0.0/docs/rules/no-invalid-remove-event-listener.md"
      },
      "name": "unicorn/no-invalid-remove-event-listener",
      "plugin": "unicorn"
    },
    "unicorn/no-keyword-prefix": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow identifiers starting with `new` or `class`.",
        "recommended": false,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v53.0.0/docs/rules/no-keyword-prefix.md"
      },
      "name": "unicorn/no-keyword-prefix",
      "plugin": "unicorn"
    },
    "unicorn/no-lonely-if": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow `if` statements as the only statement in `if` blocks without `else`.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v53.0.0/docs/rules/no-lonely-if.md"
      },
      "fixable": "code",
      "name": "unicorn/no-lonely-if",
      "plugin": "unicorn"
    },
    "unicorn/no-magic-array-flat-depth": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow a magic number as the `depth` argument in `Array#flat(…).`",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v53.0.0/docs/rules/no-magic-array-flat-depth.md"
      },
      "name": "unicorn/no-magic-array-flat-depth",
      "plugin": "unicorn"
    },
    "unicorn/no-negated-condition": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow negated conditions.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v53.0.0/docs/rules/no-negated-condition.md"
      },
      "fixable": "code",
      "name": "unicorn/no-negated-condition",
      "plugin": "unicorn"
    },
    "unicorn/no-nested-ternary": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow nested ternary expressions.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v53.0.0/docs/rules/no-nested-ternary.md"
      },
      "fixable": "code",
      "name": "unicorn/no-nested-ternary",
      "plugin": "unicorn"
    },
    "unicorn/no-new-array": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow `new Array()`.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v53.0.0/docs/rules/no-new-array.md"
      },
      "fixable": "code",
      "hasSuggestions": true,
      "name": "unicorn/no-new-array",
      "plugin": "unicorn"
    },
    "unicorn/no-new-buffer": {
      "type": "problem",
      "docs": {
        "description": "Enforce the use of `Buffer.from()` and `Buffer.alloc()` instead of the deprecated `new Buffer()`.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v53.0.0/docs/rules/no-new-buffer.md"
      },
      "fixable": "code",
      "hasSuggestions": true,
      "name": "unicorn/no-new-buffer",
      "plugin": "unicorn"
    },
    "unicorn/no-null": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow the use of the `null` literal.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v53.0.0/docs/rules/no-null.md"
      },
      "fixable": "code",
      "hasSuggestions": true,
      "name": "unicorn/no-null",
      "plugin": "unicorn"
    },
    "unicorn/no-object-as-default-parameter": {
      "type": "problem",
      "docs": {
        "description": "Disallow the use of objects as default parameters.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v53.0.0/docs/rules/no-object-as-default-parameter.md"
      },
      "name": "unicorn/no-object-as-default-parameter",
      "plugin": "unicorn"
    },
    "unicorn/no-process-exit": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow `process.exit()`.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v53.0.0/docs/rules/no-process-exit.md"
      },
      "name": "unicorn/no-process-exit",
      "plugin": "unicorn"
    },
    "unicorn/no-single-promise-in-promise-methods": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow passing single-element arrays to `Promise` methods.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v53.0.0/docs/rules/no-single-promise-in-promise-methods.md"
      },
      "fixable": "code",
      "hasSuggestions": true,
      "name": "unicorn/no-single-promise-in-promise-methods",
      "plugin": "unicorn"
    },
    "unicorn/no-static-only-class": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow classes that only have static members.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v53.0.0/docs/rules/no-static-only-class.md"
      },
      "fixable": "code",
      "name": "unicorn/no-static-only-class",
      "plugin": "unicorn"
    },
    "unicorn/no-thenable": {
      "type": "problem",
      "docs": {
        "description": "Disallow `then` property.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v53.0.0/docs/rules/no-thenable.md"
      },
      "name": "unicorn/no-thenable",
      "plugin": "unicorn"
    },
    "unicorn/no-this-assignment": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow assigning `this` to a variable.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v53.0.0/docs/rules/no-this-assignment.md"
      },
      "name": "unicorn/no-this-assignment",
      "plugin": "unicorn"
    },
    "unicorn/no-typeof-undefined": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow comparing `undefined` using `typeof`.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v53.0.0/docs/rules/no-typeof-undefined.md"
      },
      "fixable": "code",
      "hasSuggestions": true,
      "name": "unicorn/no-typeof-undefined",
      "plugin": "unicorn"
    },
    "unicorn/no-unnecessary-await": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow awaiting non-promise values.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v53.0.0/docs/rules/no-unnecessary-await.md"
      },
      "fixable": "code",
      "name": "unicorn/no-unnecessary-await",
      "plugin": "unicorn"
    },
    "unicorn/no-unnecessary-polyfills": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce the use of built-in methods instead of unnecessary polyfills.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v53.0.0/docs/rules/no-unnecessary-polyfills.md"
      },
      "name": "unicorn/no-unnecessary-polyfills",
      "plugin": "unicorn"
    },
    "unicorn/no-unreadable-array-destructuring": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow unreadable array destructuring.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v53.0.0/docs/rules/no-unreadable-array-destructuring.md"
      },
      "fixable": "code",
      "name": "unicorn/no-unreadable-array-destructuring",
      "plugin": "unicorn"
    },
    "unicorn/no-unreadable-iife": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow unreadable IIFEs.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v53.0.0/docs/rules/no-unreadable-iife.md"
      },
      "hasSuggestions": false,
      "name": "unicorn/no-unreadable-iife",
      "plugin": "unicorn"
    },
    "unicorn/no-unused-properties": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow unused object properties.",
        "recommended": false,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v53.0.0/docs/rules/no-unused-properties.md"
      },
      "name": "unicorn/no-unused-properties",
      "plugin": "unicorn"
    },
    "unicorn/no-useless-fallback-in-spread": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow useless fallback when spreading in object literals.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v53.0.0/docs/rules/no-useless-fallback-in-spread.md"
      },
      "fixable": "code",
      "name": "unicorn/no-useless-fallback-in-spread",
      "plugin": "unicorn"
    },
    "unicorn/no-useless-length-check": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow useless array length check.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v53.0.0/docs/rules/no-useless-length-check.md"
      },
      "fixable": "code",
      "name": "unicorn/no-useless-length-check",
      "plugin": "unicorn"
    },
    "unicorn/no-useless-promise-resolve-reject": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow returning/yielding `Promise.resolve/reject()` in async functions or promise callbacks",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v53.0.0/docs/rules/no-useless-promise-resolve-reject.md"
      },
      "fixable": "code",
      "name": "unicorn/no-useless-promise-resolve-reject",
      "plugin": "unicorn"
    },
    "unicorn/no-useless-spread": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow unnecessary spread.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v53.0.0/docs/rules/no-useless-spread.md"
      },
      "fixable": "code",
      "name": "unicorn/no-useless-spread",
      "plugin": "unicorn"
    },
    "unicorn/no-useless-switch-case": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow useless case in switch statements.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v53.0.0/docs/rules/no-useless-switch-case.md"
      },
      "hasSuggestions": true,
      "name": "unicorn/no-useless-switch-case",
      "plugin": "unicorn"
    },
    "unicorn/no-useless-undefined": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow useless `undefined`.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v53.0.0/docs/rules/no-useless-undefined.md"
      },
      "fixable": "code",
      "name": "unicorn/no-useless-undefined",
      "plugin": "unicorn"
    },
    "unicorn/no-zero-fractions": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow number literals with zero fractions or dangling dots.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v53.0.0/docs/rules/no-zero-fractions.md"
      },
      "fixable": "code",
      "name": "unicorn/no-zero-fractions",
      "plugin": "unicorn"
    },
    "unicorn/number-literal-case": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce proper case for numeric literals.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v53.0.0/docs/rules/number-literal-case.md"
      },
      "fixable": "code",
      "name": "unicorn/number-literal-case",
      "plugin": "unicorn"
    },
    "unicorn/numeric-separators-style": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce the style of numeric separators by correctly grouping digits.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v53.0.0/docs/rules/numeric-separators-style.md"
      },
      "fixable": "code",
      "name": "unicorn/numeric-separators-style",
      "plugin": "unicorn"
    },
    "unicorn/prefer-add-event-listener": {
      "type": "suggestion",
      "docs": {
        "description": "Prefer `.addEventListener()` and `.removeEventListener()` over `on`-functions.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v53.0.0/docs/rules/prefer-add-event-listener.md"
      },
      "fixable": "code",
      "name": "unicorn/prefer-add-event-listener",
      "plugin": "unicorn"
    },
    "unicorn/prefer-array-find": {
      "type": "suggestion",
      "docs": {
        "description": "Prefer `.find(…)` and `.findLast(…)` over the first or last element from `.filter(…)`.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v53.0.0/docs/rules/prefer-array-find.md"
      },
      "fixable": "code",
      "hasSuggestions": true,
      "name": "unicorn/prefer-array-find",
      "plugin": "unicorn"
    },
    "unicorn/prefer-array-flat-map": {
      "type": "suggestion",
      "docs": {
        "description": "Prefer `.flatMap(…)` over `.map(…).flat()`.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v53.0.0/docs/rules/prefer-array-flat-map.md"
      },
      "fixable": "code",
      "name": "unicorn/prefer-array-flat-map",
      "plugin": "unicorn"
    },
    "unicorn/prefer-array-flat": {
      "type": "suggestion",
      "docs": {
        "description": "Prefer `Array#flat()` over legacy techniques to flatten arrays.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v53.0.0/docs/rules/prefer-array-flat.md"
      },
      "fixable": "code",
      "name": "unicorn/prefer-array-flat",
      "plugin": "unicorn"
    },
    "unicorn/prefer-array-index-of": {
      "type": "suggestion",
      "docs": {
        "description": "Prefer `Array#{indexOf,lastIndexOf}()` over `Array#{findIndex,findLastIndex}()` when looking for the index of an item.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v53.0.0/docs/rules/prefer-array-index-of.md"
      },
      "fixable": "code",
      "hasSuggestions": true,
      "name": "unicorn/prefer-array-index-of",
      "plugin": "unicorn"
    },
    "unicorn/prefer-array-some": {
      "type": "suggestion",
      "docs": {
        "description": "Prefer `.some(…)` over `.filter(…).length` check and `.{find,findLast}(…)`.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v53.0.0/docs/rules/prefer-array-some.md"
      },
      "fixable": "code",
      "hasSuggestions": true,
      "name": "unicorn/prefer-array-some",
      "plugin": "unicorn"
    },
    "unicorn/prefer-at": {
      "type": "suggestion",
      "docs": {
        "description": "Prefer `.at()` method for index access and `String#charAt()`.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v53.0.0/docs/rules/prefer-at.md"
      },
      "fixable": "code",
      "hasSuggestions": true,
      "name": "unicorn/prefer-at",
      "plugin": "unicorn"
    },
    "unicorn/prefer-blob-reading-methods": {
      "type": "suggestion",
      "docs": {
        "description": "Prefer `Blob#arrayBuffer()` over `FileReader#readAsArrayBuffer(…)` and `Blob#text()` over `FileReader#readAsText(…)`.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v53.0.0/docs/rules/prefer-blob-reading-methods.md"
      },
      "name": "unicorn/prefer-blob-reading-methods",
      "plugin": "unicorn"
    },
    "unicorn/prefer-code-point": {
      "type": "suggestion",
      "docs": {
        "description": "Prefer `String#codePointAt(…)` over `String#charCodeAt(…)` and `String.fromCodePoint(…)` over `String.fromCharCode(…)`.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v53.0.0/docs/rules/prefer-code-point.md"
      },
      "hasSuggestions": true,
      "name": "unicorn/prefer-code-point",
      "plugin": "unicorn"
    },
    "unicorn/prefer-date-now": {
      "type": "suggestion",
      "docs": {
        "description": "Prefer `Date.now()` to get the number of milliseconds since the Unix Epoch.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v53.0.0/docs/rules/prefer-date-now.md"
      },
      "fixable": "code",
      "name": "unicorn/prefer-date-now",
      "plugin": "unicorn"
    },
    "unicorn/prefer-default-parameters": {
      "type": "suggestion",
      "docs": {
        "description": "Prefer default parameters over reassignment.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v53.0.0/docs/rules/prefer-default-parameters.md"
      },
      "fixable": "code",
      "hasSuggestions": true,
      "name": "unicorn/prefer-default-parameters",
      "plugin": "unicorn"
    },
    "unicorn/prefer-dom-node-append": {
      "type": "suggestion",
      "docs": {
        "description": "Prefer `Node#append()` over `Node#appendChild()`.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v53.0.0/docs/rules/prefer-dom-node-append.md"
      },
      "fixable": "code",
      "name": "unicorn/prefer-dom-node-append",
      "plugin": "unicorn"
    },
    "unicorn/prefer-dom-node-dataset": {
      "type": "suggestion",
      "docs": {
        "description": "Prefer using `.dataset` on DOM elements over calling attribute methods.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v53.0.0/docs/rules/prefer-dom-node-dataset.md"
      },
      "fixable": "code",
      "name": "unicorn/prefer-dom-node-dataset",
      "plugin": "unicorn"
    },
    "unicorn/prefer-dom-node-remove": {
      "type": "suggestion",
      "docs": {
        "description": "Prefer `childNode.remove()` over `parentNode.removeChild(childNode)`.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v53.0.0/docs/rules/prefer-dom-node-remove.md"
      },
      "fixable": "code",
      "hasSuggestions": true,
      "name": "unicorn/prefer-dom-node-remove",
      "plugin": "unicorn"
    },
    "unicorn/prefer-dom-node-text-content": {
      "type": "suggestion",
      "docs": {
        "description": "Prefer `.textContent` over `.innerText`.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v53.0.0/docs/rules/prefer-dom-node-text-content.md"
      },
      "hasSuggestions": true,
      "name": "unicorn/prefer-dom-node-text-content",
      "plugin": "unicorn"
    },
    "unicorn/prefer-event-target": {
      "type": "suggestion",
      "docs": {
        "description": "Prefer `EventTarget` over `EventEmitter`.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v53.0.0/docs/rules/prefer-event-target.md"
      },
      "name": "unicorn/prefer-event-target",
      "plugin": "unicorn"
    },
    "unicorn/prefer-export-from": {
      "type": "suggestion",
      "docs": {
        "description": "Prefer `export…from` when re-exporting.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v53.0.0/docs/rules/prefer-export-from.md"
      },
      "fixable": "code",
      "hasSuggestions": true,
      "name": "unicorn/prefer-export-from",
      "plugin": "unicorn"
    },
    "unicorn/prefer-includes": {
      "type": "suggestion",
      "docs": {
        "description": "Prefer `.includes()` over `.indexOf()` and `Array#some()` when checking for existence or non-existence.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v53.0.0/docs/rules/prefer-includes.md"
      },
      "fixable": "code",
      "hasSuggestions": true,
      "name": "unicorn/prefer-includes",
      "plugin": "unicorn"
    },
    "unicorn/prefer-json-parse-buffer": {
      "type": "suggestion",
      "docs": {
        "description": "Prefer reading a JSON file as a buffer.",
        "recommended": false,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v53.0.0/docs/rules/prefer-json-parse-buffer.md"
      },
      "fixable": "code",
      "name": "unicorn/prefer-json-parse-buffer",
      "plugin": "unicorn"
    },
    "unicorn/prefer-keyboard-event-key": {
      "type": "suggestion",
      "docs": {
        "description": "Prefer `KeyboardEvent#key` over `KeyboardEvent#keyCode`.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v53.0.0/docs/rules/prefer-keyboard-event-key.md"
      },
      "fixable": "code",
      "name": "unicorn/prefer-keyboard-event-key",
      "plugin": "unicorn"
    },
    "unicorn/prefer-logical-operator-over-ternary": {
      "type": "suggestion",
      "docs": {
        "description": "Prefer using a logical operator over a ternary.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v53.0.0/docs/rules/prefer-logical-operator-over-ternary.md"
      },
      "hasSuggestions": true,
      "name": "unicorn/prefer-logical-operator-over-ternary",
      "plugin": "unicorn"
    },
    "unicorn/prefer-math-trunc": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce the use of `Math.trunc` instead of bitwise operators.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v53.0.0/docs/rules/prefer-math-trunc.md"
      },
      "fixable": "code",
      "hasSuggestions": true,
      "name": "unicorn/prefer-math-trunc",
      "plugin": "unicorn"
    },
    "unicorn/prefer-modern-dom-apis": {
      "type": "suggestion",
      "docs": {
        "description": "Prefer `.before()` over `.insertBefore()`, `.replaceWith()` over `.replaceChild()`, prefer one of `.before()`, `.after()`, `.append()` or `.prepend()` over `insertAdjacentText()` and `insertAdjacentElement()`.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v53.0.0/docs/rules/prefer-modern-dom-apis.md"
      },
      "fixable": "code",
      "name": "unicorn/prefer-modern-dom-apis",
      "plugin": "unicorn"
    },
    "unicorn/prefer-modern-math-apis": {
      "type": "suggestion",
      "docs": {
        "description": "Prefer modern `Math` APIs over legacy patterns.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v53.0.0/docs/rules/prefer-modern-math-apis.md"
      },
      "fixable": "code",
      "name": "unicorn/prefer-modern-math-apis",
      "plugin": "unicorn"
    },
    "unicorn/prefer-module": {
      "type": "suggestion",
      "docs": {
        "description": "Prefer JavaScript modules (ESM) over CommonJS.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v53.0.0/docs/rules/prefer-module.md"
      },
      "fixable": "code",
      "hasSuggestions": true,
      "name": "unicorn/prefer-module",
      "plugin": "unicorn"
    },
    "unicorn/prefer-native-coercion-functions": {
      "type": "suggestion",
      "docs": {
        "description": "Prefer using `String`, `Number`, `BigInt`, `Boolean`, and `Symbol` directly.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v53.0.0/docs/rules/prefer-native-coercion-functions.md"
      },
      "fixable": "code",
      "name": "unicorn/prefer-native-coercion-functions",
      "plugin": "unicorn"
    },
    "unicorn/prefer-negative-index": {
      "type": "suggestion",
      "docs": {
        "description": "Prefer negative index over `.length - index` when possible.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v53.0.0/docs/rules/prefer-negative-index.md"
      },
      "fixable": "code",
      "name": "unicorn/prefer-negative-index",
      "plugin": "unicorn"
    },
    "unicorn/prefer-node-protocol": {
      "type": "suggestion",
      "docs": {
        "description": "Prefer using the `node:` protocol when importing Node.js builtin modules.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v53.0.0/docs/rules/prefer-node-protocol.md"
      },
      "fixable": "code",
      "name": "unicorn/prefer-node-protocol",
      "plugin": "unicorn"
    },
    "unicorn/prefer-number-properties": {
      "type": "suggestion",
      "docs": {
        "description": "Prefer `Number` static properties over global ones.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v53.0.0/docs/rules/prefer-number-properties.md"
      },
      "fixable": "code",
      "hasSuggestions": true,
      "name": "unicorn/prefer-number-properties",
      "plugin": "unicorn"
    },
    "unicorn/prefer-object-from-entries": {
      "type": "suggestion",
      "docs": {
        "description": "Prefer using `Object.fromEntries(…)` to transform a list of key-value pairs into an object.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v53.0.0/docs/rules/prefer-object-from-entries.md"
      },
      "fixable": "code",
      "name": "unicorn/prefer-object-from-entries",
      "plugin": "unicorn"
    },
    "unicorn/prefer-optional-catch-binding": {
      "type": "suggestion",
      "docs": {
        "description": "Prefer omitting the `catch` binding parameter.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v53.0.0/docs/rules/prefer-optional-catch-binding.md"
      },
      "fixable": "code",
      "name": "unicorn/prefer-optional-catch-binding",
      "plugin": "unicorn"
    },
    "unicorn/prefer-prototype-methods": {
      "type": "suggestion",
      "docs": {
        "description": "Prefer borrowing methods from the prototype instead of the instance.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v53.0.0/docs/rules/prefer-prototype-methods.md"
      },
      "fixable": "code",
      "name": "unicorn/prefer-prototype-methods",
      "plugin": "unicorn"
    },
    "unicorn/prefer-query-selector": {
      "type": "suggestion",
      "docs": {
        "description": "Prefer `.querySelector()` over `.getElementById()`, `.querySelectorAll()` over `.getElementsByClassName()` and `.getElementsByTagName()`.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v53.0.0/docs/rules/prefer-query-selector.md"
      },
      "fixable": "code",
      "name": "unicorn/prefer-query-selector",
      "plugin": "unicorn"
    },
    "unicorn/prefer-reflect-apply": {
      "type": "suggestion",
      "docs": {
        "description": "Prefer `Reflect.apply()` over `Function#apply()`.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v53.0.0/docs/rules/prefer-reflect-apply.md"
      },
      "fixable": "code",
      "name": "unicorn/prefer-reflect-apply",
      "plugin": "unicorn"
    },
    "unicorn/prefer-regexp-test": {
      "type": "suggestion",
      "docs": {
        "description": "Prefer `RegExp#test()` over `String#match()` and `RegExp#exec()`.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v53.0.0/docs/rules/prefer-regexp-test.md"
      },
      "fixable": "code",
      "hasSuggestions": true,
      "name": "unicorn/prefer-regexp-test",
      "plugin": "unicorn"
    },
    "unicorn/prefer-set-has": {
      "type": "suggestion",
      "docs": {
        "description": "Prefer `Set#has()` over `Array#includes()` when checking for existence or non-existence.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v53.0.0/docs/rules/prefer-set-has.md"
      },
      "fixable": "code",
      "hasSuggestions": true,
      "name": "unicorn/prefer-set-has",
      "plugin": "unicorn"
    },
    "unicorn/prefer-set-size": {
      "type": "suggestion",
      "docs": {
        "description": "Prefer using `Set#size` instead of `Array#length`.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v53.0.0/docs/rules/prefer-set-size.md"
      },
      "fixable": "code",
      "name": "unicorn/prefer-set-size",
      "plugin": "unicorn"
    },
    "unicorn/prefer-spread": {
      "type": "suggestion",
      "docs": {
        "description": "Prefer the spread operator over `Array.from(…)`, `Array#concat(…)`, `Array#{slice,toSpliced}()` and `String#split('')`.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v53.0.0/docs/rules/prefer-spread.md"
      },
      "fixable": "code",
      "hasSuggestions": true,
      "name": "unicorn/prefer-spread",
      "plugin": "unicorn"
    },
    "unicorn/prefer-string-raw": {
      "type": "suggestion",
      "docs": {
        "description": "Prefer using the `String.raw` tag to avoid escaping `\\`.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v53.0.0/docs/rules/prefer-string-raw.md"
      },
      "fixable": "code",
      "name": "unicorn/prefer-string-raw",
      "plugin": "unicorn"
    },
    "unicorn/prefer-string-replace-all": {
      "type": "suggestion",
      "docs": {
        "description": "Prefer `String#replaceAll()` over regex searches with the global flag.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v53.0.0/docs/rules/prefer-string-replace-all.md"
      },
      "fixable": "code",
      "name": "unicorn/prefer-string-replace-all",
      "plugin": "unicorn"
    },
    "unicorn/prefer-string-slice": {
      "type": "suggestion",
      "docs": {
        "description": "Prefer `String#slice()` over `String#substr()` and `String#substring()`.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v53.0.0/docs/rules/prefer-string-slice.md"
      },
      "fixable": "code",
      "name": "unicorn/prefer-string-slice",
      "plugin": "unicorn"
    },
    "unicorn/prefer-string-starts-ends-with": {
      "type": "suggestion",
      "docs": {
        "description": "Prefer `String#startsWith()` & `String#endsWith()` over `RegExp#test()`.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v53.0.0/docs/rules/prefer-string-starts-ends-with.md"
      },
      "fixable": "code",
      "hasSuggestions": true,
      "name": "unicorn/prefer-string-starts-ends-with",
      "plugin": "unicorn"
    },
    "unicorn/prefer-string-trim-start-end": {
      "type": "suggestion",
      "docs": {
        "description": "Prefer `String#trimStart()` / `String#trimEnd()` over `String#trimLeft()` / `String#trimRight()`.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v53.0.0/docs/rules/prefer-string-trim-start-end.md"
      },
      "fixable": "code",
      "name": "unicorn/prefer-string-trim-start-end",
      "plugin": "unicorn"
    },
    "unicorn/prefer-structured-clone": {
      "type": "suggestion",
      "docs": {
        "description": "Prefer using `structuredClone` to create a deep clone.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v53.0.0/docs/rules/prefer-structured-clone.md"
      },
      "hasSuggestions": true,
      "name": "unicorn/prefer-structured-clone",
      "plugin": "unicorn"
    },
    "unicorn/prefer-switch": {
      "type": "suggestion",
      "docs": {
        "description": "Prefer `switch` over multiple `else-if`.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v53.0.0/docs/rules/prefer-switch.md"
      },
      "fixable": "code",
      "name": "unicorn/prefer-switch",
      "plugin": "unicorn"
    },
    "unicorn/prefer-ternary": {
      "type": "suggestion",
      "docs": {
        "description": "Prefer ternary expressions over simple `if-else` statements.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v53.0.0/docs/rules/prefer-ternary.md"
      },
      "fixable": "code",
      "name": "unicorn/prefer-ternary",
      "plugin": "unicorn"
    },
    "unicorn/prefer-top-level-await": {
      "type": "suggestion",
      "docs": {
        "description": "Prefer top-level await over top-level promises and async function calls.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v53.0.0/docs/rules/prefer-top-level-await.md"
      },
      "hasSuggestions": true,
      "name": "unicorn/prefer-top-level-await",
      "plugin": "unicorn"
    },
    "unicorn/prefer-type-error": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce throwing `TypeError` in type checking conditions.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v53.0.0/docs/rules/prefer-type-error.md"
      },
      "fixable": "code",
      "name": "unicorn/prefer-type-error",
      "plugin": "unicorn"
    },
    "unicorn/prevent-abbreviations": {
      "type": "suggestion",
      "docs": {
        "description": "Prevent abbreviations.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v53.0.0/docs/rules/prevent-abbreviations.md"
      },
      "fixable": "code",
      "name": "unicorn/prevent-abbreviations",
      "plugin": "unicorn"
    },
    "unicorn/relative-url-style": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce consistent relative URL style.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v53.0.0/docs/rules/relative-url-style.md"
      },
      "fixable": "code",
      "hasSuggestions": true,
      "name": "unicorn/relative-url-style",
      "plugin": "unicorn"
    },
    "unicorn/require-array-join-separator": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce using the separator argument with `Array#join()`.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v53.0.0/docs/rules/require-array-join-separator.md"
      },
      "fixable": "code",
      "name": "unicorn/require-array-join-separator",
      "plugin": "unicorn"
    },
    "unicorn/require-number-to-fixed-digits-argument": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce using the digits argument with `Number#toFixed()`.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v53.0.0/docs/rules/require-number-to-fixed-digits-argument.md"
      },
      "fixable": "code",
      "name": "unicorn/require-number-to-fixed-digits-argument",
      "plugin": "unicorn"
    },
    "unicorn/require-post-message-target-origin": {
      "type": "problem",
      "docs": {
        "description": "Enforce using the `targetOrigin` argument with `window.postMessage()`.",
        "recommended": false,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v53.0.0/docs/rules/require-post-message-target-origin.md"
      },
      "hasSuggestions": true,
      "name": "unicorn/require-post-message-target-origin",
      "plugin": "unicorn"
    },
    "unicorn/string-content": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce better string content.",
        "recommended": false,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v53.0.0/docs/rules/string-content.md"
      },
      "fixable": "code",
      "hasSuggestions": true,
      "name": "unicorn/string-content",
      "plugin": "unicorn"
    },
    "unicorn/switch-case-braces": {
      "type": "layout",
      "docs": {
        "description": "Enforce consistent brace style for `case` clauses.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v53.0.0/docs/rules/switch-case-braces.md"
      },
      "fixable": "code",
      "name": "unicorn/switch-case-braces",
      "plugin": "unicorn"
    },
    "unicorn/template-indent": {
      "type": "suggestion",
      "docs": {
        "description": "Fix whitespace-insensitive template indentation.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v53.0.0/docs/rules/template-indent.md"
      },
      "fixable": "code",
      "name": "unicorn/template-indent",
      "plugin": "unicorn"
    },
    "unicorn/text-encoding-identifier-case": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce consistent case for text encoding identifiers.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v53.0.0/docs/rules/text-encoding-identifier-case.md"
      },
      "fixable": "code",
      "hasSuggestions": true,
      "name": "unicorn/text-encoding-identifier-case",
      "plugin": "unicorn"
    },
    "unicorn/throw-new-error": {
      "type": "suggestion",
      "docs": {
        "description": "Require `new` when creating an error.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v53.0.0/docs/rules/throw-new-error.md"
      },
      "fixable": "code",
      "name": "unicorn/throw-new-error",
      "plugin": "unicorn"
    },
    "unicorn/import-index": {
      "docs": {
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v53.0.0/docs/deprecated-rules.md#import-index"
      },
      "deprecated": true,
      "replacedBy": [],
      "name": "unicorn/import-index",
      "plugin": "unicorn"
    },
    "unicorn/no-array-instanceof": {
      "docs": {
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v53.0.0/docs/deprecated-rules.md#no-array-instanceof"
      },
      "deprecated": true,
      "replacedBy": [
        "unicorn/no-instanceof-array"
      ],
      "name": "unicorn/no-array-instanceof",
      "plugin": "unicorn"
    },
    "unicorn/no-fn-reference-in-iterator": {
      "docs": {
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v53.0.0/docs/deprecated-rules.md#no-fn-reference-in-iterator"
      },
      "deprecated": true,
      "replacedBy": [
        "unicorn/no-array-callback-reference"
      ],
      "name": "unicorn/no-fn-reference-in-iterator",
      "plugin": "unicorn"
    },
    "unicorn/no-reduce": {
      "docs": {
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v53.0.0/docs/deprecated-rules.md#no-reduce"
      },
      "deprecated": true,
      "replacedBy": [
        "unicorn/no-array-reduce"
      ],
      "name": "unicorn/no-reduce",
      "plugin": "unicorn"
    },
    "unicorn/no-unsafe-regex": {
      "docs": {
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v53.0.0/docs/deprecated-rules.md#no-unsafe-regex"
      },
      "deprecated": true,
      "replacedBy": [],
      "name": "unicorn/no-unsafe-regex",
      "plugin": "unicorn"
    },
    "unicorn/prefer-dataset": {
      "docs": {
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v53.0.0/docs/deprecated-rules.md#prefer-dataset"
      },
      "deprecated": true,
      "replacedBy": [
        "unicorn/prefer-dom-node-dataset"
      ],
      "name": "unicorn/prefer-dataset",
      "plugin": "unicorn"
    },
    "unicorn/prefer-event-key": {
      "docs": {
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v53.0.0/docs/deprecated-rules.md#prefer-event-key"
      },
      "deprecated": true,
      "replacedBy": [
        "unicorn/prefer-keyboard-event-key"
      ],
      "name": "unicorn/prefer-event-key",
      "plugin": "unicorn"
    },
    "unicorn/prefer-exponentiation-operator": {
      "docs": {
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v53.0.0/docs/deprecated-rules.md#prefer-exponentiation-operator"
      },
      "deprecated": true,
      "replacedBy": [
        "prefer-exponentiation-operator"
      ],
      "name": "unicorn/prefer-exponentiation-operator",
      "plugin": "unicorn"
    },
    "unicorn/prefer-flat-map": {
      "docs": {
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v53.0.0/docs/deprecated-rules.md#prefer-flat-map"
      },
      "deprecated": true,
      "replacedBy": [
        "unicorn/prefer-array-flat-map"
      ],
      "name": "unicorn/prefer-flat-map",
      "plugin": "unicorn"
    },
    "unicorn/prefer-node-append": {
      "docs": {
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v53.0.0/docs/deprecated-rules.md#prefer-node-append"
      },
      "deprecated": true,
      "replacedBy": [
        "unicorn/prefer-dom-node-append"
      ],
      "name": "unicorn/prefer-node-append",
      "plugin": "unicorn"
    },
    "unicorn/prefer-node-remove": {
      "docs": {
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v53.0.0/docs/deprecated-rules.md#prefer-node-remove"
      },
      "deprecated": true,
      "replacedBy": [
        "unicorn/prefer-dom-node-remove"
      ],
      "name": "unicorn/prefer-node-remove",
      "plugin": "unicorn"
    },
    "unicorn/prefer-object-has-own": {
      "docs": {
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v53.0.0/docs/deprecated-rules.md#prefer-object-has-own"
      },
      "deprecated": true,
      "replacedBy": [
        "prefer-object-has-own"
      ],
      "name": "unicorn/prefer-object-has-own",
      "plugin": "unicorn"
    },
    "unicorn/prefer-replace-all": {
      "docs": {
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v53.0.0/docs/deprecated-rules.md#prefer-replace-all"
      },
      "deprecated": true,
      "replacedBy": [
        "unicorn/prefer-string-replace-all"
      ],
      "name": "unicorn/prefer-replace-all",
      "plugin": "unicorn"
    },
    "unicorn/prefer-starts-ends-with": {
      "docs": {
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v53.0.0/docs/deprecated-rules.md#prefer-starts-ends-with"
      },
      "deprecated": true,
      "replacedBy": [
        "unicorn/prefer-string-starts-ends-with"
      ],
      "name": "unicorn/prefer-starts-ends-with",
      "plugin": "unicorn"
    },
    "unicorn/prefer-text-content": {
      "docs": {
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v53.0.0/docs/deprecated-rules.md#prefer-text-content"
      },
      "deprecated": true,
      "replacedBy": [
        "unicorn/prefer-dom-node-text-content"
      ],
      "name": "unicorn/prefer-text-content",
      "plugin": "unicorn"
    },
    "unicorn/prefer-trim-start-end": {
      "docs": {
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v53.0.0/docs/deprecated-rules.md#prefer-trim-start-end"
      },
      "deprecated": true,
      "replacedBy": [
        "unicorn/prefer-string-trim-start-end"
      ],
      "name": "unicorn/prefer-trim-start-end",
      "plugin": "unicorn"
    },
    "unicorn/regex-shorthand": {
      "docs": {
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v53.0.0/docs/deprecated-rules.md#regex-shorthand"
      },
      "deprecated": true,
      "replacedBy": [
        "unicorn/better-regex"
      ],
      "name": "unicorn/regex-shorthand",
      "plugin": "unicorn"
    },
    "eslint-comments/disable-enable-pair": {
      "docs": {
        "description": "require a `eslint-enable` comment for every `eslint-disable` comment",
        "category": "Best Practices",
        "recommended": true,
        "url": "https://mysticatea.github.io/eslint-plugin-eslint-comments/rules/disable-enable-pair.html"
      },
      "fixable": null,
      "type": "suggestion",
      "name": "eslint-comments/disable-enable-pair",
      "plugin": "eslint-comments"
    },
    "eslint-comments/no-aggregating-enable": {
      "docs": {
        "description": "disallow a `eslint-enable` comment for multiple `eslint-disable` comments",
        "category": "Best Practices",
        "recommended": true,
        "url": "https://mysticatea.github.io/eslint-plugin-eslint-comments/rules/no-aggregating-enable.html"
      },
      "fixable": null,
      "type": "suggestion",
      "name": "eslint-comments/no-aggregating-enable",
      "plugin": "eslint-comments"
    },
    "eslint-comments/no-duplicate-disable": {
      "docs": {
        "description": "disallow duplicate `eslint-disable` comments",
        "category": "Best Practices",
        "recommended": true,
        "url": "https://mysticatea.github.io/eslint-plugin-eslint-comments/rules/no-duplicate-disable.html"
      },
      "fixable": null,
      "type": "problem",
      "name": "eslint-comments/no-duplicate-disable",
      "plugin": "eslint-comments"
    },
    "eslint-comments/no-restricted-disable": {
      "docs": {
        "description": "disallow `eslint-disable` comments about specific rules",
        "category": "Stylistic Issues",
        "recommended": false,
        "url": "https://mysticatea.github.io/eslint-plugin-eslint-comments/rules/no-restricted-disable.html"
      },
      "fixable": null,
      "type": "suggestion",
      "name": "eslint-comments/no-restricted-disable",
      "plugin": "eslint-comments"
    },
    "eslint-comments/no-unlimited-disable": {
      "docs": {
        "description": "disallow `eslint-disable` comments without rule names",
        "category": "Best Practices",
        "recommended": true,
        "url": "https://mysticatea.github.io/eslint-plugin-eslint-comments/rules/no-unlimited-disable.html"
      },
      "fixable": null,
      "type": "suggestion",
      "name": "eslint-comments/no-unlimited-disable",
      "plugin": "eslint-comments"
    },
    "eslint-comments/no-unused-disable": {
      "docs": {
        "description": "disallow unused `eslint-disable` comments",
        "category": "Best Practices",
        "recommended": false,
        "url": "https://mysticatea.github.io/eslint-plugin-eslint-comments/rules/no-unused-disable.html"
      },
      "fixable": null,
      "type": "problem",
      "name": "eslint-comments/no-unused-disable",
      "plugin": "eslint-comments"
    },
    "eslint-comments/no-unused-enable": {
      "docs": {
        "description": "disallow unused `eslint-enable` comments",
        "category": "Best Practices",
        "recommended": true,
        "url": "https://mysticatea.github.io/eslint-plugin-eslint-comments/rules/no-unused-enable.html"
      },
      "fixable": null,
      "type": "problem",
      "name": "eslint-comments/no-unused-enable",
      "plugin": "eslint-comments"
    },
    "eslint-comments/no-use": {
      "docs": {
        "description": "disallow ESLint directive-comments",
        "category": "Stylistic Issues",
        "recommended": false,
        "url": "https://mysticatea.github.io/eslint-plugin-eslint-comments/rules/no-use.html"
      },
      "fixable": null,
      "type": "suggestion",
      "name": "eslint-comments/no-use",
      "plugin": "eslint-comments"
    },
    "eslint-comments/require-description": {
      "docs": {
        "description": "require include descriptions in ESLint directive-comments",
        "category": "Stylistic Issues",
        "recommended": false,
        "url": "https://mysticatea.github.io/eslint-plugin-eslint-comments/rules/require-description.html"
      },
      "fixable": null,
      "type": "suggestion",
      "name": "eslint-comments/require-description",
      "plugin": "eslint-comments"
    },
    "simple-import-sort/imports": {
      "type": "layout",
      "fixable": "code",
      "docs": {
        "url": "https://github.com/lydell/eslint-plugin-simple-import-sort#sort-order",
        "description": "Automatically sort imports."
      },
      "name": "simple-import-sort/imports",
      "plugin": "simple-import-sort"
    },
    "simple-import-sort/exports": {
      "type": "layout",
      "fixable": "code",
      "docs": {
        "url": "https://github.com/lydell/eslint-plugin-simple-import-sort#sort-order",
        "description": "Automatically sort exports."
      },
      "name": "simple-import-sort/exports",
      "plugin": "simple-import-sort"
    },
    "sonarjs/cognitive-complexity": {
      "type": "suggestion",
      "docs": {
        "description": "Cognitive Complexity of functions should not be too high",
        "url": "https://github.com/SonarSource/eslint-plugin-sonarjs/blob/master/docs/rules/cognitive-complexity.md"
      },
      "name": "sonarjs/cognitive-complexity",
      "plugin": "sonarjs"
    },
    "sonarjs/elseif-without-else": {
      "type": "suggestion",
      "docs": {
        "description": "\"if ... else if\" constructs should end with \"else\" clauses",
        "url": "https://github.com/SonarSource/eslint-plugin-sonarjs/blob/master/docs/rules/elseif-without-else.md"
      },
      "name": "sonarjs/elseif-without-else",
      "plugin": "sonarjs"
    },
    "sonarjs/max-switch-cases": {
      "type": "suggestion",
      "docs": {
        "description": "\"switch\" statements should not have too many \"case\" clauses",
        "recommended": "recommended",
        "url": "https://github.com/SonarSource/eslint-plugin-sonarjs/blob/master/docs/rules/max-switch-cases.md"
      },
      "name": "sonarjs/max-switch-cases",
      "plugin": "sonarjs"
    },
    "sonarjs/no-all-duplicated-branches": {
      "type": "problem",
      "docs": {
        "description": "All branches in a conditional structure should not have exactly the same implementation",
        "recommended": "recommended",
        "url": "https://github.com/SonarSource/eslint-plugin-sonarjs/blob/master/docs/rules/no-all-duplicated-branches.md"
      },
      "name": "sonarjs/no-all-duplicated-branches",
      "plugin": "sonarjs"
    },
    "sonarjs/no-collapsible-if": {
      "type": "suggestion",
      "docs": {
        "description": "Collapsible \"if\" statements should be merged",
        "recommended": "recommended",
        "url": "https://github.com/SonarSource/eslint-plugin-sonarjs/blob/master/docs/rules/no-collapsible-if.md"
      },
      "name": "sonarjs/no-collapsible-if",
      "plugin": "sonarjs"
    },
    "sonarjs/no-collection-size-mischeck": {
      "type": "problem",
      "hasSuggestions": true,
      "docs": {
        "description": "Collection sizes and array length comparisons should make sense",
        "recommended": "recommended",
        "url": "https://github.com/SonarSource/eslint-plugin-sonarjs/blob/master/docs/rules/no-collection-size-mischeck.md"
      },
      "name": "sonarjs/no-collection-size-mischeck",
      "plugin": "sonarjs"
    },
    "sonarjs/no-duplicate-string": {
      "type": "suggestion",
      "docs": {
        "description": "String literals should not be duplicated",
        "recommended": "recommended",
        "url": "https://github.com/SonarSource/eslint-plugin-sonarjs/blob/master/docs/rules/no-duplicate-string.md"
      },
      "name": "sonarjs/no-duplicate-string",
      "plugin": "sonarjs"
    },
    "sonarjs/no-duplicated-branches": {
      "type": "problem",
      "docs": {
        "description": "Two branches in a conditional structure should not have exactly the same implementation",
        "recommended": "recommended",
        "url": "https://github.com/SonarSource/eslint-plugin-sonarjs/blob/master/docs/rules/no-duplicated-branches.md"
      },
      "name": "sonarjs/no-duplicated-branches",
      "plugin": "sonarjs"
    },
    "sonarjs/no-element-overwrite": {
      "type": "problem",
      "docs": {
        "description": "Collection elements should not be replaced unconditionally",
        "recommended": "recommended",
        "url": "https://github.com/SonarSource/eslint-plugin-sonarjs/blob/master/docs/rules/no-element-overwrite.md"
      },
      "name": "sonarjs/no-element-overwrite",
      "plugin": "sonarjs"
    },
    "sonarjs/no-empty-collection": {
      "type": "problem",
      "docs": {
        "description": "Empty collections should not be accessed or iterated",
        "recommended": "recommended",
        "url": "https://github.com/SonarSource/eslint-plugin-sonarjs/blob/master/docs/rules/no-empty-collection.md"
      },
      "name": "sonarjs/no-empty-collection",
      "plugin": "sonarjs"
    },
    "sonarjs/no-extra-arguments": {
      "type": "problem",
      "docs": {
        "description": "Function calls should not pass extra arguments",
        "recommended": "recommended",
        "url": "https://github.com/SonarSource/eslint-plugin-sonarjs/blob/master/docs/rules/no-extra-arguments.md"
      },
      "name": "sonarjs/no-extra-arguments",
      "plugin": "sonarjs"
    },
    "sonarjs/no-gratuitous-expressions": {
      "type": "suggestion",
      "docs": {
        "description": "Boolean expressions should not be gratuitous",
        "recommended": "recommended",
        "url": "https://github.com/SonarSource/eslint-plugin-sonarjs/blob/master/docs/rules/no-gratuitous-expressions.md"
      },
      "name": "sonarjs/no-gratuitous-expressions",
      "plugin": "sonarjs"
    },
    "sonarjs/no-identical-conditions": {
      "type": "problem",
      "docs": {
        "description": "Related \"if-else-if\" and \"switch-case\" statements should not have the same condition",
        "recommended": "recommended",
        "url": "https://github.com/SonarSource/eslint-plugin-sonarjs/blob/master/docs/rules/no-identical-conditions.md"
      },
      "name": "sonarjs/no-identical-conditions",
      "plugin": "sonarjs"
    },
    "sonarjs/no-identical-expressions": {
      "type": "problem",
      "docs": {
        "description": "Identical expressions should not be used on both sides of a binary operator",
        "recommended": "recommended",
        "url": "https://github.com/SonarSource/eslint-plugin-sonarjs/blob/master/docs/rules/no-identical-expressions.md"
      },
      "name": "sonarjs/no-identical-expressions",
      "plugin": "sonarjs"
    },
    "sonarjs/no-identical-functions": {
      "type": "problem",
      "docs": {
        "description": "Functions should not have identical implementations",
        "recommended": "recommended",
        "url": "https://github.com/SonarSource/eslint-plugin-sonarjs/blob/master/docs/rules/no-identical-functions.md"
      },
      "name": "sonarjs/no-identical-functions",
      "plugin": "sonarjs"
    },
    "sonarjs/no-ignored-return": {
      "type": "problem",
      "docs": {
        "description": "Return values from functions without side effects should not be ignored",
        "recommended": "recommended",
        "url": "https://github.com/SonarSource/eslint-plugin-sonarjs/blob/master/docs/rules/no-ignored-return.md"
      },
      "name": "sonarjs/no-ignored-return",
      "plugin": "sonarjs"
    },
    "sonarjs/no-inverted-boolean-check": {
      "type": "suggestion",
      "docs": {
        "description": "Boolean checks should not be inverted",
        "recommended": "recommended",
        "url": "https://github.com/SonarSource/eslint-plugin-sonarjs/blob/master/docs/rules/no-inverted-boolean-check.md"
      },
      "hasSuggestions": true,
      "fixable": "code",
      "name": "sonarjs/no-inverted-boolean-check",
      "plugin": "sonarjs"
    },
    "sonarjs/no-nested-switch": {
      "type": "suggestion",
      "docs": {
        "description": "\"switch\" statements should not be nested",
        "recommended": "recommended",
        "url": "https://github.com/SonarSource/eslint-plugin-sonarjs/blob/master/docs/rules/no-nested-switch.md"
      },
      "name": "sonarjs/no-nested-switch",
      "plugin": "sonarjs"
    },
    "sonarjs/no-nested-template-literals": {
      "type": "suggestion",
      "docs": {
        "description": "Template literals should not be nested",
        "recommended": "recommended",
        "url": "https://github.com/SonarSource/eslint-plugin-sonarjs/blob/master/docs/rules/no-nested-template-literals.md"
      },
      "name": "sonarjs/no-nested-template-literals",
      "plugin": "sonarjs"
    },
    "sonarjs/no-one-iteration-loop": {
      "type": "problem",
      "docs": {
        "description": "Loops with at most one iteration should be refactored",
        "recommended": "recommended",
        "url": "https://github.com/SonarSource/eslint-plugin-sonarjs/blob/master/docs/rules/no-one-iteration-loop.md"
      },
      "name": "sonarjs/no-one-iteration-loop",
      "plugin": "sonarjs"
    },
    "sonarjs/no-redundant-boolean": {
      "type": "suggestion",
      "docs": {
        "description": "Boolean literals should not be redundant",
        "recommended": "recommended",
        "url": "https://github.com/SonarSource/eslint-plugin-sonarjs/blob/master/docs/rules/no-redundant-boolean.md"
      },
      "name": "sonarjs/no-redundant-boolean",
      "plugin": "sonarjs"
    },
    "sonarjs/no-redundant-jump": {
      "type": "suggestion",
      "hasSuggestions": true,
      "docs": {
        "description": "Jump statements should not be redundant",
        "recommended": "recommended",
        "url": "https://github.com/SonarSource/eslint-plugin-sonarjs/blob/master/docs/rules/no-redundant-jump.md"
      },
      "name": "sonarjs/no-redundant-jump",
      "plugin": "sonarjs"
    },
    "sonarjs/no-same-line-conditional": {
      "type": "problem",
      "hasSuggestions": true,
      "docs": {
        "description": "Conditionals should start on new lines",
        "recommended": "recommended",
        "url": "https://github.com/SonarSource/eslint-plugin-sonarjs/blob/master/docs/rules/no-same-line-conditional.md"
      },
      "name": "sonarjs/no-same-line-conditional",
      "plugin": "sonarjs"
    },
    "sonarjs/no-small-switch": {
      "type": "suggestion",
      "docs": {
        "description": "\"switch\" statements should have at least 3 \"case\" clauses",
        "recommended": "recommended",
        "url": "https://github.com/SonarSource/eslint-plugin-sonarjs/blob/master/docs/rules/no-small-switch.md"
      },
      "name": "sonarjs/no-small-switch",
      "plugin": "sonarjs"
    },
    "sonarjs/no-unused-collection": {
      "type": "problem",
      "docs": {
        "description": "Collection and array contents should be used",
        "recommended": "recommended",
        "url": "https://github.com/SonarSource/eslint-plugin-sonarjs/blob/master/docs/rules/no-unused-collection.md"
      },
      "name": "sonarjs/no-unused-collection",
      "plugin": "sonarjs"
    },
    "sonarjs/no-use-of-empty-return-value": {
      "type": "problem",
      "docs": {
        "description": "The output of functions that don't return anything should not be used",
        "recommended": "recommended",
        "url": "https://github.com/SonarSource/eslint-plugin-sonarjs/blob/master/docs/rules/no-use-of-empty-return-value.md"
      },
      "name": "sonarjs/no-use-of-empty-return-value",
      "plugin": "sonarjs"
    },
    "sonarjs/no-useless-catch": {
      "type": "suggestion",
      "docs": {
        "description": "\"catch\" clauses should do more than rethrow",
        "recommended": "recommended",
        "url": "https://github.com/SonarSource/eslint-plugin-sonarjs/blob/master/docs/rules/no-useless-catch.md"
      },
      "name": "sonarjs/no-useless-catch",
      "plugin": "sonarjs"
    },
    "sonarjs/non-existent-operator": {
      "type": "problem",
      "hasSuggestions": true,
      "docs": {
        "description": "Non-existent operators \"=+\", \"=-\" and \"=!\" should not be used",
        "recommended": "recommended",
        "url": "https://github.com/SonarSource/eslint-plugin-sonarjs/blob/master/docs/rules/non-existent-operator.md"
      },
      "name": "sonarjs/non-existent-operator",
      "plugin": "sonarjs"
    },
    "sonarjs/prefer-immediate-return": {
      "type": "suggestion",
      "docs": {
        "description": "Local variables should not be declared and then immediately returned or thrown",
        "recommended": "recommended",
        "url": "https://github.com/SonarSource/eslint-plugin-sonarjs/blob/master/docs/rules/prefer-immediate-return.md"
      },
      "fixable": "code",
      "name": "sonarjs/prefer-immediate-return",
      "plugin": "sonarjs"
    },
    "sonarjs/prefer-object-literal": {
      "type": "suggestion",
      "docs": {
        "description": "Object literal syntax should be used",
        "recommended": "recommended",
        "url": "https://github.com/SonarSource/eslint-plugin-sonarjs/blob/master/docs/rules/prefer-object-literal.md"
      },
      "name": "sonarjs/prefer-object-literal",
      "plugin": "sonarjs"
    },
    "sonarjs/prefer-single-boolean-return": {
      "type": "suggestion",
      "hasSuggestions": true,
      "docs": {
        "description": "Return of boolean expressions should not be wrapped into an \"if-then-else\" statement",
        "recommended": "recommended",
        "url": "https://github.com/SonarSource/eslint-plugin-sonarjs/blob/master/docs/rules/prefer-single-boolean-return.md"
      },
      "name": "sonarjs/prefer-single-boolean-return",
      "plugin": "sonarjs"
    },
    "sonarjs/prefer-while": {
      "type": "suggestion",
      "docs": {
        "description": "A \"while\" loop should be used instead of a \"for\" loop",
        "recommended": "recommended",
        "url": "https://github.com/SonarSource/eslint-plugin-sonarjs/blob/master/docs/rules/prefer-while.md"
      },
      "fixable": "code",
      "name": "sonarjs/prefer-while",
      "plugin": "sonarjs"
    },
    "tailwindcss/classnames-order": {
      "docs": {
        "description": "Enforce a consistent and logical order of the Tailwind CSS classnames",
        "category": "Stylistic Issues",
        "recommended": false,
        "url": "https://github.com/francoismassart/eslint-plugin-tailwindcss/tree/master/docs/rules/classnames-order.md"
      },
      "fixable": "code",
      "name": "tailwindcss/classnames-order",
      "plugin": "tailwindcss"
    },
    "tailwindcss/enforces-negative-arbitrary-values": {
      "docs": {
        "description": "Warns about dash prefixed classnames using arbitrary values",
        "category": "Best Practices",
        "recommended": true,
        "url": "https://github.com/francoismassart/eslint-plugin-tailwindcss/tree/master/docs/rules/enforces-negative-arbitrary-values.md"
      },
      "fixable": null,
      "name": "tailwindcss/enforces-negative-arbitrary-values",
      "plugin": "tailwindcss"
    },
    "tailwindcss/enforces-shorthand": {
      "docs": {
        "description": "Enforces the usage of shorthand Tailwind CSS classnames",
        "category": "Best Practices",
        "recommended": true,
        "url": "https://github.com/francoismassart/eslint-plugin-tailwindcss/tree/master/docs/rules/enforces-shorthand.md"
      },
      "fixable": "code",
      "name": "tailwindcss/enforces-shorthand",
      "plugin": "tailwindcss"
    },
    "tailwindcss/migration-from-tailwind-2": {
      "docs": {
        "description": "Detect obsolete classnames when upgrading to Tailwind CSS v3",
        "category": "Possible Errors",
        "recommended": true,
        "url": "https://github.com/francoismassart/eslint-plugin-tailwindcss/tree/master/docs/rules/migration-from-tailwind-2.md"
      },
      "fixable": "code",
      "name": "tailwindcss/migration-from-tailwind-2",
      "plugin": "tailwindcss"
    },
    "tailwindcss/no-arbitrary-value": {
      "docs": {
        "description": "Forbid using arbitrary values in classnames",
        "category": "Best Practices",
        "recommended": false,
        "url": "https://github.com/francoismassart/eslint-plugin-tailwindcss/tree/master/docs/rules/no-arbitrary-value.md"
      },
      "fixable": null,
      "name": "tailwindcss/no-arbitrary-value",
      "plugin": "tailwindcss"
    },
    "tailwindcss/no-contradicting-classname": {
      "docs": {
        "description": "Avoid contradicting Tailwind CSS classnames (e.g. \"w-3 w-5\")",
        "category": "Possible Errors",
        "recommended": true,
        "url": "https://github.com/francoismassart/eslint-plugin-tailwindcss/tree/master/docs/rules/no-contradicting-classname.md"
      },
      "fixable": null,
      "name": "tailwindcss/no-contradicting-classname",
      "plugin": "tailwindcss"
    },
    "tailwindcss/no-custom-classname": {
      "docs": {
        "description": "Detect classnames which do not belong to Tailwind CSS",
        "category": "Best Practices",
        "recommended": false,
        "url": "https://github.com/francoismassart/eslint-plugin-tailwindcss/tree/master/docs/rules/no-custom-classname.md"
      },
      "fixable": null,
      "name": "tailwindcss/no-custom-classname",
      "plugin": "tailwindcss"
    },
    "tailwindcss/no-unnecessary-arbitrary-value": {
      "docs": {
        "description": "Forbid using arbitrary values in classnames when an equivalent preset exists",
        "category": "Best Practices",
        "recommended": true,
        "url": "https://github.com/francoismassart/eslint-plugin-tailwindcss/tree/master/docs/rules/no-unnecessary-arbitrary-value.md"
      },
      "fixable": "code",
      "name": "tailwindcss/no-unnecessary-arbitrary-value",
      "plugin": "tailwindcss"
    },
    "import/no-unresolved": {
      "type": "problem",
      "docs": {
        "category": "Static analysis",
        "description": "Ensure imports point to a file/module that can be resolved.",
        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.1/docs/rules/no-unresolved.md"
      },
      "name": "import/no-unresolved",
      "plugin": "import"
    },
    "import/named": {
      "type": "problem",
      "docs": {
        "category": "Static analysis",
        "description": "Ensure named imports correspond to a named export in the remote file.",
        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.1/docs/rules/named.md"
      },
      "name": "import/named",
      "plugin": "import"
    },
    "import/default": {
      "type": "problem",
      "docs": {
        "category": "Static analysis",
        "description": "Ensure a default export is present, given a default import.",
        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.1/docs/rules/default.md"
      },
      "name": "import/default",
      "plugin": "import"
    },
    "import/namespace": {
      "type": "problem",
      "docs": {
        "category": "Static analysis",
        "description": "Ensure imported namespaces contain dereferenced properties as they are dereferenced.",
        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.1/docs/rules/namespace.md"
      },
      "name": "import/namespace",
      "plugin": "import"
    },
    "import/no-namespace": {
      "type": "suggestion",
      "docs": {
        "category": "Style guide",
        "description": "Forbid namespace (a.k.a. \"wildcard\" `*`) imports.",
        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.1/docs/rules/no-namespace.md"
      },
      "fixable": "code",
      "name": "import/no-namespace",
      "plugin": "import"
    },
    "import/export": {
      "type": "problem",
      "docs": {
        "category": "Helpful warnings",
        "description": "Forbid any invalid exports, i.e. re-export of the same name.",
        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.1/docs/rules/export.md"
      },
      "name": "import/export",
      "plugin": "import"
    },
    "import/no-mutable-exports": {
      "type": "suggestion",
      "docs": {
        "category": "Helpful warnings",
        "description": "Forbid the use of mutable exports with `var` or `let`.",
        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.1/docs/rules/no-mutable-exports.md"
      },
      "name": "import/no-mutable-exports",
      "plugin": "import"
    },
    "import/extensions": {
      "type": "suggestion",
      "docs": {
        "category": "Style guide",
        "description": "Ensure consistent use of file extension within the import path.",
        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.1/docs/rules/extensions.md"
      },
      "name": "import/extensions",
      "plugin": "import"
    },
    "import/no-restricted-paths": {
      "type": "problem",
      "docs": {
        "category": "Static analysis",
        "description": "Enforce which files can be imported in a given folder.",
        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.1/docs/rules/no-restricted-paths.md"
      },
      "name": "import/no-restricted-paths",
      "plugin": "import"
    },
    "import/no-internal-modules": {
      "type": "suggestion",
      "docs": {
        "category": "Static analysis",
        "description": "Forbid importing the submodules of other modules.",
        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.1/docs/rules/no-internal-modules.md"
      },
      "name": "import/no-internal-modules",
      "plugin": "import"
    },
    "import/group-exports": {
      "type": "suggestion",
      "docs": {
        "category": "Style guide",
        "description": "Prefer named exports to be grouped together in a single export declaration",
        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.1/docs/rules/group-exports.md"
      },
      "name": "import/group-exports",
      "plugin": "import"
    },
    "import/no-relative-packages": {
      "type": "suggestion",
      "docs": {
        "category": "Static analysis",
        "description": "Forbid importing packages through relative paths.",
        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.1/docs/rules/no-relative-packages.md"
      },
      "fixable": "code",
      "name": "import/no-relative-packages",
      "plugin": "import"
    },
    "import/no-relative-parent-imports": {
      "type": "suggestion",
      "docs": {
        "category": "Static analysis",
        "description": "Forbid importing modules from parent directories.",
        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.1/docs/rules/no-relative-parent-imports.md"
      },
      "name": "import/no-relative-parent-imports",
      "plugin": "import"
    },
    "import/consistent-type-specifier-style": {
      "type": "suggestion",
      "docs": {
        "category": "Style guide",
        "description": "Enforce or ban the use of inline type-only markers for named imports.",
        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.1/docs/rules/consistent-type-specifier-style.md"
      },
      "fixable": "code",
      "name": "import/consistent-type-specifier-style",
      "plugin": "import"
    },
    "import/no-self-import": {
      "type": "problem",
      "docs": {
        "category": "Static analysis",
        "description": "Forbid a module from importing itself.",
        "recommended": true,
        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.1/docs/rules/no-self-import.md"
      },
      "name": "import/no-self-import",
      "plugin": "import"
    },
    "import/no-cycle": {
      "type": "suggestion",
      "docs": {
        "category": "Static analysis",
        "description": "Forbid a module from importing a module with a dependency path back to itself.",
        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.1/docs/rules/no-cycle.md"
      },
      "name": "import/no-cycle",
      "plugin": "import"
    },
    "import/no-named-default": {
      "type": "suggestion",
      "docs": {
        "category": "Style guide",
        "description": "Forbid named default exports.",
        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.1/docs/rules/no-named-default.md"
      },
      "name": "import/no-named-default",
      "plugin": "import"
    },
    "import/no-named-as-default": {
      "type": "problem",
      "docs": {
        "category": "Helpful warnings",
        "description": "Forbid use of exported name as identifier of default export.",
        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.1/docs/rules/no-named-as-default.md"
      },
      "name": "import/no-named-as-default",
      "plugin": "import"
    },
    "import/no-named-as-default-member": {
      "type": "suggestion",
      "docs": {
        "category": "Helpful warnings",
        "description": "Forbid use of exported name as property of default export.",
        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.1/docs/rules/no-named-as-default-member.md"
      },
      "name": "import/no-named-as-default-member",
      "plugin": "import"
    },
    "import/no-anonymous-default-export": {
      "type": "suggestion",
      "docs": {
        "category": "Style guide",
        "description": "Forbid anonymous values as default exports.",
        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.1/docs/rules/no-anonymous-default-export.md"
      },
      "name": "import/no-anonymous-default-export",
      "plugin": "import"
    },
    "import/no-unused-modules": {
      "type": "suggestion",
      "docs": {
        "category": "Helpful warnings",
        "description": "Forbid modules without exports, or exports without matching import in another module.",
        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.1/docs/rules/no-unused-modules.md"
      },
      "name": "import/no-unused-modules",
      "plugin": "import"
    },
    "import/no-commonjs": {
      "type": "suggestion",
      "docs": {
        "category": "Module systems",
        "description": "Forbid CommonJS `require` calls and `module.exports` or `exports.*`.",
        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.1/docs/rules/no-commonjs.md"
      },
      "name": "import/no-commonjs",
      "plugin": "import"
    },
    "import/no-amd": {
      "type": "suggestion",
      "docs": {
        "category": "Module systems",
        "description": "Forbid AMD `require` and `define` calls.",
        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.1/docs/rules/no-amd.md"
      },
      "name": "import/no-amd",
      "plugin": "import"
    },
    "import/no-duplicates": {
      "type": "problem",
      "docs": {
        "category": "Style guide",
        "description": "Forbid repeated import of the same module in multiple places.",
        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.1/docs/rules/no-duplicates.md"
      },
      "fixable": "code",
      "name": "import/no-duplicates",
      "plugin": "import"
    },
    "import/first": {
      "type": "suggestion",
      "docs": {
        "category": "Style guide",
        "description": "Ensure all imports appear before other statements.",
        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.1/docs/rules/first.md"
      },
      "fixable": "code",
      "name": "import/first",
      "plugin": "import"
    },
    "import/max-dependencies": {
      "type": "suggestion",
      "docs": {
        "category": "Style guide",
        "description": "Enforce the maximum number of dependencies a module can have.",
        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.1/docs/rules/max-dependencies.md"
      },
      "name": "import/max-dependencies",
      "plugin": "import"
    },
    "import/no-extraneous-dependencies": {
      "type": "problem",
      "docs": {
        "category": "Helpful warnings",
        "description": "Forbid the use of extraneous packages.",
        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.1/docs/rules/no-extraneous-dependencies.md"
      },
      "name": "import/no-extraneous-dependencies",
      "plugin": "import"
    },
    "import/no-absolute-path": {
      "type": "suggestion",
      "docs": {
        "category": "Static analysis",
        "description": "Forbid import of modules using absolute paths.",
        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.1/docs/rules/no-absolute-path.md"
      },
      "fixable": "code",
      "name": "import/no-absolute-path",
      "plugin": "import"
    },
    "import/no-nodejs-modules": {
      "type": "suggestion",
      "docs": {
        "category": "Module systems",
        "description": "Forbid Node.js builtin modules.",
        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.1/docs/rules/no-nodejs-modules.md"
      },
      "name": "import/no-nodejs-modules",
      "plugin": "import"
    },
    "import/no-webpack-loader-syntax": {
      "type": "problem",
      "docs": {
        "category": "Static analysis",
        "description": "Forbid webpack loader syntax in imports.",
        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.1/docs/rules/no-webpack-loader-syntax.md"
      },
      "name": "import/no-webpack-loader-syntax",
      "plugin": "import"
    },
    "import/order": {
      "type": "suggestion",
      "docs": {
        "category": "Style guide",
        "description": "Enforce a convention in module import order.",
        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.1/docs/rules/order.md"
      },
      "fixable": "code",
      "name": "import/order",
      "plugin": "import"
    },
    "import/newline-after-import": {
      "type": "layout",
      "docs": {
        "category": "Style guide",
        "description": "Enforce a newline after import statements.",
        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.1/docs/rules/newline-after-import.md"
      },
      "fixable": "whitespace",
      "name": "import/newline-after-import",
      "plugin": "import"
    },
    "import/prefer-default-export": {
      "type": "suggestion",
      "docs": {
        "category": "Style guide",
        "description": "Prefer a default export if module exports a single name or multiple names.",
        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.1/docs/rules/prefer-default-export.md"
      },
      "name": "import/prefer-default-export",
      "plugin": "import"
    },
    "import/no-default-export": {
      "type": "suggestion",
      "docs": {
        "category": "Style guide",
        "description": "Forbid default exports.",
        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.1/docs/rules/no-default-export.md"
      },
      "name": "import/no-default-export",
      "plugin": "import"
    },
    "import/no-named-export": {
      "type": "suggestion",
      "docs": {
        "category": "Style guide",
        "description": "Forbid named exports.",
        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.1/docs/rules/no-named-export.md"
      },
      "name": "import/no-named-export",
      "plugin": "import"
    },
    "import/no-dynamic-require": {
      "type": "suggestion",
      "docs": {
        "category": "Static analysis",
        "description": "Forbid `require()` calls with expressions.",
        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.1/docs/rules/no-dynamic-require.md"
      },
      "name": "import/no-dynamic-require",
      "plugin": "import"
    },
    "import/unambiguous": {
      "type": "suggestion",
      "docs": {
        "category": "Module systems",
        "description": "Forbid potentially ambiguous parse goal (`script` vs. `module`).",
        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.1/docs/rules/unambiguous.md"
      },
      "name": "import/unambiguous",
      "plugin": "import"
    },
    "import/no-unassigned-import": {
      "type": "suggestion",
      "docs": {
        "category": "Style guide",
        "description": "Forbid unassigned imports",
        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.1/docs/rules/no-unassigned-import.md"
      },
      "name": "import/no-unassigned-import",
      "plugin": "import"
    },
    "import/no-useless-path-segments": {
      "type": "suggestion",
      "docs": {
        "category": "Static analysis",
        "description": "Forbid unnecessary path segments in import and require statements.",
        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.1/docs/rules/no-useless-path-segments.md"
      },
      "fixable": "code",
      "name": "import/no-useless-path-segments",
      "plugin": "import"
    },
    "import/dynamic-import-chunkname": {
      "type": "suggestion",
      "docs": {
        "category": "Style guide",
        "description": "Enforce a leading comment with the webpackChunkName for dynamic imports.",
        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.1/docs/rules/dynamic-import-chunkname.md"
      },
      "name": "import/dynamic-import-chunkname",
      "plugin": "import"
    },
    "import/no-import-module-exports": {
      "type": "problem",
      "docs": {
        "category": "Module systems",
        "description": "Forbid import statements with CommonJS module.exports.",
        "recommended": true
      },
      "fixable": "code",
      "name": "import/no-import-module-exports",
      "plugin": "import"
    },
    "import/no-empty-named-blocks": {
      "type": "suggestion",
      "docs": {
        "category": "Helpful warnings",
        "description": "Forbid empty named import blocks.",
        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.1/docs/rules/no-empty-named-blocks.md"
      },
      "fixable": "code",
      "hasSuggestions": true,
      "name": "import/no-empty-named-blocks",
      "plugin": "import"
    },
    "import/exports-last": {
      "type": "suggestion",
      "docs": {
        "category": "Style guide",
        "description": "Ensure all exports appear after other statements.",
        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.1/docs/rules/exports-last.md"
      },
      "name": "import/exports-last",
      "plugin": "import"
    },
    "import/no-deprecated": {
      "type": "suggestion",
      "docs": {
        "category": "Helpful warnings",
        "description": "Forbid imported names marked with `@deprecated` documentation tag.",
        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.1/docs/rules/no-deprecated.md"
      },
      "name": "import/no-deprecated",
      "plugin": "import"
    },
    "import/imports-first": {
      "type": "suggestion",
      "docs": {
        "category": "Style guide",
        "description": "Replaced by `import/first`.",
        "url": "https://github.com/import-js/eslint-plugin-import/blob/7b25c1cb95ee18acc1531002fd343e1e6031f9ed/docs/rules/imports-first.md"
      },
      "fixable": "code",
      "deprecated": true,
      "name": "import/imports-first",
      "plugin": "import"
    },
    "prettier/prettier": {
      "docs": {
        "url": "https://github.com/prettier/eslint-plugin-prettier#options"
      },
      "type": "layout",
      "fixable": "code",
      "name": "prettier/prettier",
      "plugin": "prettier"
    },
    "@typescript-eslint/adjacent-overload-signatures": {
      "type": "suggestion",
      "docs": {
        "description": "Require that function overload signatures be consecutive",
        "recommended": "stylistic",
        "url": "https://typescript-eslint.io/rules/adjacent-overload-signatures"
      },
      "name": "@typescript-eslint/adjacent-overload-signatures",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/array-type": {
      "type": "suggestion",
      "docs": {
        "description": "Require consistently using either `T[]` or `Array<T>` for arrays",
        "recommended": "stylistic",
        "url": "https://typescript-eslint.io/rules/array-type"
      },
      "fixable": "code",
      "name": "@typescript-eslint/array-type",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/await-thenable": {
      "docs": {
        "description": "Disallow awaiting a value that is not a Thenable",
        "recommended": "recommended",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/await-thenable"
      },
      "hasSuggestions": true,
      "type": "problem",
      "name": "@typescript-eslint/await-thenable",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/ban-ts-comment": {
      "type": "problem",
      "docs": {
        "description": "Disallow `@ts-<directive>` comments or require descriptions after directives",
        "recommended": {
          "recommended": true,
          "strict": [
            {
              "minimumDescriptionLength": 10
            }
          ]
        },
        "url": "https://typescript-eslint.io/rules/ban-ts-comment"
      },
      "hasSuggestions": true,
      "name": "@typescript-eslint/ban-ts-comment",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/ban-tslint-comment": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow `// tslint:<rule-flag>` comments",
        "recommended": "stylistic",
        "url": "https://typescript-eslint.io/rules/ban-tslint-comment"
      },
      "fixable": "code",
      "name": "@typescript-eslint/ban-tslint-comment",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/ban-types": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow certain types",
        "recommended": "recommended",
        "url": "https://typescript-eslint.io/rules/ban-types"
      },
      "fixable": "code",
      "hasSuggestions": true,
      "name": "@typescript-eslint/ban-types",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/block-spacing": {
      "deprecated": true,
      "replacedBy": [
        "@stylistic/ts/block-spacing"
      ],
      "type": "layout",
      "docs": {
        "description": "Disallow or enforce spaces inside of blocks after opening block and before closing block",
        "extendsBaseRule": true,
        "url": "https://typescript-eslint.io/rules/block-spacing"
      },
      "fixable": "whitespace",
      "name": "@typescript-eslint/block-spacing",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/brace-style": {
      "deprecated": true,
      "replacedBy": [
        "@stylistic/ts/brace-style"
      ],
      "type": "layout",
      "docs": {
        "description": "Enforce consistent brace style for blocks",
        "extendsBaseRule": true,
        "url": "https://typescript-eslint.io/rules/brace-style"
      },
      "fixable": "whitespace",
      "name": "@typescript-eslint/brace-style",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/class-literal-property-style": {
      "type": "problem",
      "docs": {
        "description": "Enforce that literals on classes are exposed in a consistent style",
        "recommended": "stylistic",
        "url": "https://typescript-eslint.io/rules/class-literal-property-style"
      },
      "hasSuggestions": true,
      "name": "@typescript-eslint/class-literal-property-style",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/class-methods-use-this": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce that class methods utilize `this`",
        "extendsBaseRule": true,
        "requiresTypeChecking": false,
        "url": "https://typescript-eslint.io/rules/class-methods-use-this"
      },
      "name": "@typescript-eslint/class-methods-use-this",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/comma-dangle": {
      "deprecated": true,
      "replacedBy": [
        "@stylistic/ts/comma-dangle"
      ],
      "type": "layout",
      "docs": {
        "description": "Require or disallow trailing commas",
        "extendsBaseRule": true,
        "url": "https://typescript-eslint.io/rules/comma-dangle"
      },
      "fixable": "code",
      "name": "@typescript-eslint/comma-dangle",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/comma-spacing": {
      "deprecated": true,
      "replacedBy": [
        "@stylistic/ts/comma-spacing"
      ],
      "type": "layout",
      "docs": {
        "description": "Enforce consistent spacing before and after commas",
        "extendsBaseRule": true,
        "url": "https://typescript-eslint.io/rules/comma-spacing"
      },
      "fixable": "whitespace",
      "name": "@typescript-eslint/comma-spacing",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/consistent-generic-constructors": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce specifying generic type arguments on type annotation or constructor name of a constructor call",
        "recommended": "stylistic",
        "url": "https://typescript-eslint.io/rules/consistent-generic-constructors"
      },
      "fixable": "code",
      "name": "@typescript-eslint/consistent-generic-constructors",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/consistent-indexed-object-style": {
      "type": "suggestion",
      "docs": {
        "description": "Require or disallow the `Record` type",
        "recommended": "stylistic",
        "url": "https://typescript-eslint.io/rules/consistent-indexed-object-style"
      },
      "fixable": "code",
      "name": "@typescript-eslint/consistent-indexed-object-style",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/consistent-return": {
      "type": "suggestion",
      "docs": {
        "description": "Require `return` statements to either always or never specify values",
        "extendsBaseRule": true,
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/consistent-return"
      },
      "name": "@typescript-eslint/consistent-return",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/consistent-type-assertions": {
      "type": "suggestion",
      "fixable": "code",
      "hasSuggestions": true,
      "docs": {
        "description": "Enforce consistent usage of type assertions",
        "recommended": "stylistic",
        "url": "https://typescript-eslint.io/rules/consistent-type-assertions"
      },
      "name": "@typescript-eslint/consistent-type-assertions",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/consistent-type-definitions": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce type definitions to consistently use either `interface` or `type`",
        "recommended": "stylistic",
        "url": "https://typescript-eslint.io/rules/consistent-type-definitions"
      },
      "fixable": "code",
      "name": "@typescript-eslint/consistent-type-definitions",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/consistent-type-exports": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce consistent usage of type exports",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/consistent-type-exports"
      },
      "fixable": "code",
      "name": "@typescript-eslint/consistent-type-exports",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/consistent-type-imports": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce consistent usage of type imports",
        "url": "https://typescript-eslint.io/rules/consistent-type-imports"
      },
      "fixable": "code",
      "name": "@typescript-eslint/consistent-type-imports",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/default-param-last": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce default parameters to be last",
        "extendsBaseRule": true,
        "url": "https://typescript-eslint.io/rules/default-param-last"
      },
      "name": "@typescript-eslint/default-param-last",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/dot-notation": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce dot notation whenever possible",
        "recommended": "stylistic",
        "extendsBaseRule": true,
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/dot-notation"
      },
      "fixable": "code",
      "name": "@typescript-eslint/dot-notation",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/explicit-function-return-type": {
      "type": "problem",
      "docs": {
        "description": "Require explicit return types on functions and class methods",
        "url": "https://typescript-eslint.io/rules/explicit-function-return-type"
      },
      "name": "@typescript-eslint/explicit-function-return-type",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/explicit-member-accessibility": {
      "hasSuggestions": true,
      "type": "problem",
      "docs": {
        "description": "Require explicit accessibility modifiers on class properties and methods",
        "url": "https://typescript-eslint.io/rules/explicit-member-accessibility"
      },
      "fixable": "code",
      "name": "@typescript-eslint/explicit-member-accessibility",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/explicit-module-boundary-types": {
      "type": "problem",
      "docs": {
        "description": "Require explicit return and argument types on exported functions' and classes' public class methods",
        "url": "https://typescript-eslint.io/rules/explicit-module-boundary-types"
      },
      "name": "@typescript-eslint/explicit-module-boundary-types",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/func-call-spacing": {
      "deprecated": true,
      "replacedBy": [
        "@stylistic/ts/func-call-spacing"
      ],
      "type": "layout",
      "docs": {
        "description": "Require or disallow spacing between function identifiers and their invocations",
        "extendsBaseRule": true,
        "url": "https://typescript-eslint.io/rules/func-call-spacing"
      },
      "fixable": "whitespace",
      "name": "@typescript-eslint/func-call-spacing",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/indent": {
      "deprecated": true,
      "replacedBy": [
        "@stylistic/ts/indent"
      ],
      "type": "layout",
      "docs": {
        "description": "Enforce consistent indentation",
        "extendsBaseRule": true,
        "url": "https://typescript-eslint.io/rules/indent"
      },
      "fixable": "whitespace",
      "name": "@typescript-eslint/indent",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/init-declarations": {
      "type": "suggestion",
      "docs": {
        "description": "Require or disallow initialization in variable declarations",
        "extendsBaseRule": true,
        "url": "https://typescript-eslint.io/rules/init-declarations"
      },
      "name": "@typescript-eslint/init-declarations",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/key-spacing": {
      "deprecated": true,
      "replacedBy": [
        "@stylistic/ts/key-spacing"
      ],
      "type": "layout",
      "docs": {
        "description": "Enforce consistent spacing between property names and type annotations in types and interfaces",
        "extendsBaseRule": true,
        "url": "https://typescript-eslint.io/rules/key-spacing"
      },
      "fixable": "whitespace",
      "name": "@typescript-eslint/key-spacing",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/keyword-spacing": {
      "deprecated": true,
      "replacedBy": [
        "@stylistic/ts/keyword-spacing"
      ],
      "type": "layout",
      "docs": {
        "description": "Enforce consistent spacing before and after keywords",
        "extendsBaseRule": true,
        "url": "https://typescript-eslint.io/rules/keyword-spacing"
      },
      "fixable": "whitespace",
      "name": "@typescript-eslint/keyword-spacing",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/lines-around-comment": {
      "deprecated": true,
      "replacedBy": [
        "@stylistic/ts/lines-around-comment"
      ],
      "type": "layout",
      "docs": {
        "description": "Require empty lines around comments",
        "extendsBaseRule": true,
        "url": "https://typescript-eslint.io/rules/lines-around-comment"
      },
      "fixable": "whitespace",
      "name": "@typescript-eslint/lines-around-comment",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/lines-between-class-members": {
      "deprecated": true,
      "replacedBy": [
        "@stylistic/ts/lines-between-class-members"
      ],
      "type": "layout",
      "docs": {
        "description": "Require or disallow an empty line between class members",
        "extendsBaseRule": true,
        "url": "https://typescript-eslint.io/rules/lines-between-class-members"
      },
      "fixable": "whitespace",
      "name": "@typescript-eslint/lines-between-class-members",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/max-params": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce a maximum number of parameters in function definitions",
        "extendsBaseRule": true,
        "url": "https://typescript-eslint.io/rules/max-params"
      },
      "name": "@typescript-eslint/max-params",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/member-delimiter-style": {
      "deprecated": true,
      "replacedBy": [
        "@stylistic/ts/member-delimiter-style"
      ],
      "type": "layout",
      "docs": {
        "description": "Require a specific member delimiter style for interfaces and type literals",
        "url": "https://typescript-eslint.io/rules/member-delimiter-style"
      },
      "fixable": "whitespace",
      "name": "@typescript-eslint/member-delimiter-style",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/member-ordering": {
      "type": "suggestion",
      "docs": {
        "description": "Require a consistent member declaration order",
        "url": "https://typescript-eslint.io/rules/member-ordering"
      },
      "name": "@typescript-eslint/member-ordering",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/method-signature-style": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce using a particular method signature syntax",
        "url": "https://typescript-eslint.io/rules/method-signature-style"
      },
      "fixable": "code",
      "name": "@typescript-eslint/method-signature-style",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/naming-convention": {
      "docs": {
        "description": "Enforce naming conventions for everything across a codebase",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/naming-convention"
      },
      "type": "suggestion",
      "name": "@typescript-eslint/naming-convention",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-array-constructor": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow generic `Array` constructors",
        "recommended": "recommended",
        "extendsBaseRule": true,
        "url": "https://typescript-eslint.io/rules/no-array-constructor"
      },
      "fixable": "code",
      "name": "@typescript-eslint/no-array-constructor",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-array-delete": {
      "hasSuggestions": true,
      "type": "problem",
      "docs": {
        "description": "Disallow using the `delete` operator on array values",
        "recommended": "strict",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/no-array-delete"
      },
      "name": "@typescript-eslint/no-array-delete",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-base-to-string": {
      "docs": {
        "description": "Require `.toString()` to only be called on objects which provide useful information when stringified",
        "recommended": "recommended",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/no-base-to-string"
      },
      "type": "suggestion",
      "name": "@typescript-eslint/no-base-to-string",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-confusing-non-null-assertion": {
      "type": "problem",
      "docs": {
        "description": "Disallow non-null assertion in locations that may be confusing",
        "recommended": "stylistic",
        "url": "https://typescript-eslint.io/rules/no-confusing-non-null-assertion"
      },
      "hasSuggestions": true,
      "name": "@typescript-eslint/no-confusing-non-null-assertion",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-confusing-void-expression": {
      "docs": {
        "description": "Require expressions of type void to appear in statement position",
        "recommended": "strict",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/no-confusing-void-expression"
      },
      "type": "problem",
      "fixable": "code",
      "hasSuggestions": true,
      "name": "@typescript-eslint/no-confusing-void-expression",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-dupe-class-members": {
      "type": "problem",
      "docs": {
        "description": "Disallow duplicate class members",
        "extendsBaseRule": true,
        "url": "https://typescript-eslint.io/rules/no-dupe-class-members"
      },
      "name": "@typescript-eslint/no-dupe-class-members",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-duplicate-enum-values": {
      "type": "problem",
      "docs": {
        "description": "Disallow duplicate enum member values",
        "recommended": "recommended",
        "url": "https://typescript-eslint.io/rules/no-duplicate-enum-values"
      },
      "hasSuggestions": false,
      "name": "@typescript-eslint/no-duplicate-enum-values",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-duplicate-type-constituents": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow duplicate constituents of union or intersection types",
        "recommended": "recommended",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/no-duplicate-type-constituents"
      },
      "fixable": "code",
      "name": "@typescript-eslint/no-duplicate-type-constituents",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-dynamic-delete": {
      "docs": {
        "description": "Disallow using the `delete` operator on computed key expressions",
        "recommended": "strict",
        "url": "https://typescript-eslint.io/rules/no-dynamic-delete"
      },
      "fixable": "code",
      "type": "suggestion",
      "name": "@typescript-eslint/no-dynamic-delete",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-empty-function": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow empty functions",
        "recommended": "stylistic",
        "extendsBaseRule": true,
        "url": "https://typescript-eslint.io/rules/no-empty-function"
      },
      "name": "@typescript-eslint/no-empty-function",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-empty-interface": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow the declaration of empty interfaces",
        "recommended": "stylistic",
        "url": "https://typescript-eslint.io/rules/no-empty-interface"
      },
      "fixable": "code",
      "hasSuggestions": true,
      "name": "@typescript-eslint/no-empty-interface",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-empty-object-type": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow accidentally using the \"empty object\" type",
        "url": "https://typescript-eslint.io/rules/no-empty-object-type"
      },
      "hasSuggestions": true,
      "name": "@typescript-eslint/no-empty-object-type",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-explicit-any": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow the `any` type",
        "recommended": "recommended",
        "url": "https://typescript-eslint.io/rules/no-explicit-any"
      },
      "fixable": "code",
      "hasSuggestions": true,
      "name": "@typescript-eslint/no-explicit-any",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-extra-non-null-assertion": {
      "type": "problem",
      "docs": {
        "description": "Disallow extra non-null assertions",
        "recommended": "recommended",
        "url": "https://typescript-eslint.io/rules/no-extra-non-null-assertion"
      },
      "fixable": "code",
      "name": "@typescript-eslint/no-extra-non-null-assertion",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-extra-parens": {
      "deprecated": true,
      "replacedBy": [
        "@stylistic/ts/no-extra-parens"
      ],
      "type": "layout",
      "docs": {
        "description": "Disallow unnecessary parentheses",
        "extendsBaseRule": true,
        "url": "https://typescript-eslint.io/rules/no-extra-parens"
      },
      "fixable": "code",
      "name": "@typescript-eslint/no-extra-parens",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-extra-semi": {
      "deprecated": true,
      "replacedBy": [
        "@stylistic/ts/no-extra-semi"
      ],
      "type": "suggestion",
      "docs": {
        "description": "Disallow unnecessary semicolons",
        "extendsBaseRule": true,
        "url": "https://typescript-eslint.io/rules/no-extra-semi"
      },
      "fixable": "code",
      "name": "@typescript-eslint/no-extra-semi",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-extraneous-class": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow classes used as namespaces",
        "recommended": "strict",
        "url": "https://typescript-eslint.io/rules/no-extraneous-class"
      },
      "name": "@typescript-eslint/no-extraneous-class",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-floating-promises": {
      "docs": {
        "description": "Require Promise-like statements to be handled appropriately",
        "recommended": "recommended",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/no-floating-promises"
      },
      "hasSuggestions": true,
      "type": "problem",
      "name": "@typescript-eslint/no-floating-promises",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-for-in-array": {
      "docs": {
        "description": "Disallow iterating over an array with a for-in loop",
        "recommended": "recommended",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/no-for-in-array"
      },
      "type": "problem",
      "name": "@typescript-eslint/no-for-in-array",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-implied-eval": {
      "docs": {
        "description": "Disallow the use of `eval()`-like methods",
        "recommended": "recommended",
        "extendsBaseRule": true,
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/no-implied-eval"
      },
      "type": "suggestion",
      "name": "@typescript-eslint/no-implied-eval",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-import-type-side-effects": {
      "type": "problem",
      "docs": {
        "description": "Enforce the use of top-level import type qualifier when an import only has specifiers with inline type qualifiers",
        "url": "https://typescript-eslint.io/rules/no-import-type-side-effects"
      },
      "fixable": "code",
      "name": "@typescript-eslint/no-import-type-side-effects",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-inferrable-types": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow explicit type declarations for variables or parameters initialized to a number, string, or boolean",
        "recommended": "stylistic",
        "url": "https://typescript-eslint.io/rules/no-inferrable-types"
      },
      "fixable": "code",
      "name": "@typescript-eslint/no-inferrable-types",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-invalid-this": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow `this` keywords outside of classes or class-like objects",
        "extendsBaseRule": true,
        "url": "https://typescript-eslint.io/rules/no-invalid-this"
      },
      "name": "@typescript-eslint/no-invalid-this",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-invalid-void-type": {
      "type": "problem",
      "docs": {
        "description": "Disallow `void` type outside of generic or return types",
        "recommended": "strict",
        "url": "https://typescript-eslint.io/rules/no-invalid-void-type"
      },
      "name": "@typescript-eslint/no-invalid-void-type",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-loop-func": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow function declarations that contain unsafe references inside loop statements",
        "extendsBaseRule": true,
        "url": "https://typescript-eslint.io/rules/no-loop-func"
      },
      "name": "@typescript-eslint/no-loop-func",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-loss-of-precision": {
      "type": "problem",
      "docs": {
        "description": "Disallow literal numbers that lose precision",
        "recommended": "recommended",
        "extendsBaseRule": true,
        "url": "https://typescript-eslint.io/rules/no-loss-of-precision"
      },
      "name": "@typescript-eslint/no-loss-of-precision",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-magic-numbers": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow magic numbers",
        "extendsBaseRule": true,
        "url": "https://typescript-eslint.io/rules/no-magic-numbers"
      },
      "name": "@typescript-eslint/no-magic-numbers",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-meaningless-void-operator": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow the `void` operator except when used to discard a value",
        "recommended": "strict",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/no-meaningless-void-operator"
      },
      "fixable": "code",
      "hasSuggestions": true,
      "name": "@typescript-eslint/no-meaningless-void-operator",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-misused-new": {
      "type": "problem",
      "docs": {
        "description": "Enforce valid definition of `new` and `constructor`",
        "recommended": "recommended",
        "url": "https://typescript-eslint.io/rules/no-misused-new"
      },
      "name": "@typescript-eslint/no-misused-new",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-misused-promises": {
      "docs": {
        "description": "Disallow Promises in places not designed to handle them",
        "recommended": "recommended",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/no-misused-promises"
      },
      "type": "problem",
      "name": "@typescript-eslint/no-misused-promises",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-mixed-enums": {
      "docs": {
        "description": "Disallow enums from having both number and string members",
        "recommended": "strict",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/no-mixed-enums"
      },
      "type": "problem",
      "name": "@typescript-eslint/no-mixed-enums",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-namespace": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow TypeScript namespaces",
        "recommended": "recommended",
        "url": "https://typescript-eslint.io/rules/no-namespace"
      },
      "name": "@typescript-eslint/no-namespace",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-non-null-asserted-nullish-coalescing": {
      "type": "problem",
      "docs": {
        "description": "Disallow non-null assertions in the left operand of a nullish coalescing operator",
        "recommended": "strict",
        "url": "https://typescript-eslint.io/rules/no-non-null-asserted-nullish-coalescing"
      },
      "hasSuggestions": true,
      "name": "@typescript-eslint/no-non-null-asserted-nullish-coalescing",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-non-null-asserted-optional-chain": {
      "type": "problem",
      "docs": {
        "description": "Disallow non-null assertions after an optional chain expression",
        "recommended": "recommended",
        "url": "https://typescript-eslint.io/rules/no-non-null-asserted-optional-chain"
      },
      "hasSuggestions": true,
      "name": "@typescript-eslint/no-non-null-asserted-optional-chain",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-non-null-assertion": {
      "type": "problem",
      "docs": {
        "description": "Disallow non-null assertions using the `!` postfix operator",
        "recommended": "strict",
        "url": "https://typescript-eslint.io/rules/no-non-null-assertion"
      },
      "hasSuggestions": true,
      "name": "@typescript-eslint/no-non-null-assertion",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-redeclare": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow variable redeclaration",
        "extendsBaseRule": true,
        "url": "https://typescript-eslint.io/rules/no-redeclare"
      },
      "name": "@typescript-eslint/no-redeclare",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-redundant-type-constituents": {
      "docs": {
        "description": "Disallow members of unions and intersections that do nothing or override type information",
        "recommended": "recommended",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/no-redundant-type-constituents"
      },
      "type": "suggestion",
      "name": "@typescript-eslint/no-redundant-type-constituents",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-require-imports": {
      "type": "problem",
      "docs": {
        "description": "Disallow invocation of `require()`",
        "url": "https://typescript-eslint.io/rules/no-require-imports"
      },
      "name": "@typescript-eslint/no-require-imports",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-restricted-imports": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow specified modules when loaded by `import`",
        "extendsBaseRule": true,
        "url": "https://typescript-eslint.io/rules/no-restricted-imports"
      },
      "name": "@typescript-eslint/no-restricted-imports",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-shadow": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow variable declarations from shadowing variables declared in the outer scope",
        "extendsBaseRule": true,
        "url": "https://typescript-eslint.io/rules/no-shadow"
      },
      "name": "@typescript-eslint/no-shadow",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-this-alias": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow aliasing `this`",
        "recommended": "recommended",
        "url": "https://typescript-eslint.io/rules/no-this-alias"
      },
      "name": "@typescript-eslint/no-this-alias",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-throw-literal": {
      "type": "problem",
      "deprecated": true,
      "replacedBy": [
        "@typescript-eslint/only-throw-error"
      ],
      "docs": {
        "description": "Disallow throwing literals as exceptions",
        "extendsBaseRule": true,
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/no-throw-literal"
      },
      "name": "@typescript-eslint/no-throw-literal",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-type-alias": {
      "deprecated": true,
      "type": "suggestion",
      "docs": {
        "description": "Disallow type aliases",
        "url": "https://typescript-eslint.io/rules/no-type-alias"
      },
      "name": "@typescript-eslint/no-type-alias",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-unnecessary-boolean-literal-compare": {
      "docs": {
        "description": "Disallow unnecessary equality comparisons against boolean literals",
        "recommended": "strict",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/no-unnecessary-boolean-literal-compare"
      },
      "fixable": "code",
      "type": "suggestion",
      "name": "@typescript-eslint/no-unnecessary-boolean-literal-compare",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-unnecessary-condition": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow conditionals where the type is always truthy or always falsy",
        "recommended": "strict",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/no-unnecessary-condition"
      },
      "fixable": "code",
      "name": "@typescript-eslint/no-unnecessary-condition",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-unnecessary-parameter-property-assignment": {
      "docs": {
        "description": "Disallow unnecessary assignment of constructor property parameter",
        "url": "https://typescript-eslint.io/rules/no-unnecessary-parameter-property-assignment"
      },
      "type": "suggestion",
      "name": "@typescript-eslint/no-unnecessary-parameter-property-assignment",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-unnecessary-qualifier": {
      "docs": {
        "description": "Disallow unnecessary namespace qualifiers",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/no-unnecessary-qualifier"
      },
      "fixable": "code",
      "type": "suggestion",
      "name": "@typescript-eslint/no-unnecessary-qualifier",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-unnecessary-template-expression": {
      "fixable": "code",
      "type": "suggestion",
      "docs": {
        "description": "Disallow unnecessary template expressions",
        "recommended": "strict",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/no-unnecessary-template-expression"
      },
      "name": "@typescript-eslint/no-unnecessary-template-expression",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-unnecessary-type-arguments": {
      "docs": {
        "description": "Disallow type arguments that are equal to the default",
        "recommended": "strict",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/no-unnecessary-type-arguments"
      },
      "fixable": "code",
      "type": "suggestion",
      "name": "@typescript-eslint/no-unnecessary-type-arguments",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-unnecessary-type-assertion": {
      "docs": {
        "description": "Disallow type assertions that do not change the type of an expression",
        "recommended": "recommended",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/no-unnecessary-type-assertion"
      },
      "fixable": "code",
      "type": "suggestion",
      "name": "@typescript-eslint/no-unnecessary-type-assertion",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-unnecessary-type-constraint": {
      "docs": {
        "description": "Disallow unnecessary constraints on generic types",
        "recommended": "recommended",
        "url": "https://typescript-eslint.io/rules/no-unnecessary-type-constraint"
      },
      "hasSuggestions": true,
      "type": "suggestion",
      "name": "@typescript-eslint/no-unnecessary-type-constraint",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-unnecessary-type-parameters": {
      "docs": {
        "description": "Disallow type parameters that only appear once",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/no-unnecessary-type-parameters"
      },
      "type": "problem",
      "name": "@typescript-eslint/no-unnecessary-type-parameters",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-unsafe-argument": {
      "type": "problem",
      "docs": {
        "description": "Disallow calling a function with a value with type `any`",
        "recommended": "recommended",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/no-unsafe-argument"
      },
      "name": "@typescript-eslint/no-unsafe-argument",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-unsafe-assignment": {
      "type": "problem",
      "docs": {
        "description": "Disallow assigning a value with type `any` to variables and properties",
        "recommended": "recommended",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/no-unsafe-assignment"
      },
      "name": "@typescript-eslint/no-unsafe-assignment",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-unsafe-call": {
      "type": "problem",
      "docs": {
        "description": "Disallow calling a value with type `any`",
        "recommended": "recommended",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/no-unsafe-call"
      },
      "name": "@typescript-eslint/no-unsafe-call",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-unsafe-declaration-merging": {
      "type": "problem",
      "docs": {
        "description": "Disallow unsafe declaration merging",
        "recommended": "recommended",
        "requiresTypeChecking": false,
        "url": "https://typescript-eslint.io/rules/no-unsafe-declaration-merging"
      },
      "name": "@typescript-eslint/no-unsafe-declaration-merging",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-unsafe-enum-comparison": {
      "hasSuggestions": true,
      "type": "suggestion",
      "docs": {
        "description": "Disallow comparing an enum value with a non-enum value",
        "recommended": "recommended",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/no-unsafe-enum-comparison"
      },
      "name": "@typescript-eslint/no-unsafe-enum-comparison",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-unsafe-function-type": {
      "type": "problem",
      "docs": {
        "description": "Disallow using the unsafe built-in Function type",
        "url": "https://typescript-eslint.io/rules/no-unsafe-function-type"
      },
      "fixable": "code",
      "name": "@typescript-eslint/no-unsafe-function-type",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-unsafe-member-access": {
      "type": "problem",
      "docs": {
        "description": "Disallow member access on a value with type `any`",
        "recommended": "recommended",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/no-unsafe-member-access"
      },
      "name": "@typescript-eslint/no-unsafe-member-access",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-unsafe-return": {
      "type": "problem",
      "docs": {
        "description": "Disallow returning a value with type `any` from a function",
        "recommended": "recommended",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/no-unsafe-return"
      },
      "name": "@typescript-eslint/no-unsafe-return",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-unsafe-unary-minus": {
      "type": "problem",
      "docs": {
        "description": "Require unary negation to take a number",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/no-unsafe-unary-minus"
      },
      "name": "@typescript-eslint/no-unsafe-unary-minus",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-unused-expressions": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow unused expressions",
        "extendsBaseRule": true,
        "url": "https://typescript-eslint.io/rules/no-unused-expressions"
      },
      "name": "@typescript-eslint/no-unused-expressions",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-unused-vars": {
      "type": "problem",
      "docs": {
        "description": "Disallow unused variables",
        "recommended": "recommended",
        "extendsBaseRule": false,
        "url": "https://github.com/sweepline/eslint-plugin-unused-imports/blob/master/docs/rules/no-unused-imports.md"
      },
      "fixable": "code",
      "name": "@typescript-eslint/no-unused-vars",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-use-before-define": {
      "type": "problem",
      "docs": {
        "description": "Disallow the use of variables before they are defined",
        "extendsBaseRule": true,
        "url": "https://typescript-eslint.io/rules/no-use-before-define"
      },
      "name": "@typescript-eslint/no-use-before-define",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-useless-constructor": {
      "type": "problem",
      "docs": {
        "description": "Disallow unnecessary constructors",
        "recommended": "strict",
        "extendsBaseRule": true,
        "url": "https://typescript-eslint.io/rules/no-useless-constructor"
      },
      "name": "@typescript-eslint/no-useless-constructor",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-useless-empty-export": {
      "docs": {
        "description": "Disallow empty exports that don't change anything in a module file",
        "url": "https://typescript-eslint.io/rules/no-useless-empty-export"
      },
      "fixable": "code",
      "hasSuggestions": false,
      "type": "suggestion",
      "name": "@typescript-eslint/no-useless-empty-export",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-useless-template-literals": {
      "fixable": "code",
      "type": "suggestion",
      "docs": {
        "description": "Disallow unnecessary template expressions",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/no-useless-template-literals"
      },
      "deprecated": true,
      "replacedBy": [
        "@typescript-eslint/no-unnecessary-template-expression"
      ],
      "name": "@typescript-eslint/no-useless-template-literals",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-var-requires": {
      "type": "problem",
      "docs": {
        "description": "Disallow `require` statements except in import statements",
        "recommended": "recommended",
        "url": "https://typescript-eslint.io/rules/no-var-requires"
      },
      "name": "@typescript-eslint/no-var-requires",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-wrapper-object-types": {
      "type": "problem",
      "docs": {
        "description": "Disallow using confusing built-in primitive class wrappers",
        "url": "https://typescript-eslint.io/rules/no-wrapper-object-types"
      },
      "fixable": "code",
      "name": "@typescript-eslint/no-wrapper-object-types",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/non-nullable-type-assertion-style": {
      "docs": {
        "description": "Enforce non-null assertions over explicit type casts",
        "recommended": "stylistic",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/non-nullable-type-assertion-style"
      },
      "fixable": "code",
      "type": "suggestion",
      "name": "@typescript-eslint/non-nullable-type-assertion-style",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/object-curly-spacing": {
      "deprecated": true,
      "replacedBy": [
        "@stylistic/ts/object-curly-spacing"
      ],
      "type": "layout",
      "docs": {
        "description": "Enforce consistent spacing inside braces",
        "extendsBaseRule": true,
        "url": "https://typescript-eslint.io/rules/object-curly-spacing"
      },
      "fixable": "whitespace",
      "name": "@typescript-eslint/object-curly-spacing",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/only-throw-error": {
      "type": "problem",
      "docs": {
        "description": "Disallow throwing non-`Error` values as exceptions",
        "recommended": "strict",
        "extendsBaseRule": "no-throw-literal",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/only-throw-error"
      },
      "name": "@typescript-eslint/only-throw-error",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/padding-line-between-statements": {
      "deprecated": true,
      "replacedBy": [
        "@stylistic/ts/padding-line-between-statements"
      ],
      "type": "layout",
      "docs": {
        "description": "Require or disallow padding lines between statements",
        "extendsBaseRule": true,
        "url": "https://typescript-eslint.io/rules/padding-line-between-statements"
      },
      "fixable": "whitespace",
      "hasSuggestions": false,
      "name": "@typescript-eslint/padding-line-between-statements",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/parameter-properties": {
      "type": "problem",
      "docs": {
        "description": "Require or disallow parameter properties in class constructors",
        "url": "https://typescript-eslint.io/rules/parameter-properties"
      },
      "name": "@typescript-eslint/parameter-properties",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/prefer-as-const": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce the use of `as const` over literal type",
        "recommended": "recommended",
        "url": "https://typescript-eslint.io/rules/prefer-as-const"
      },
      "fixable": "code",
      "hasSuggestions": true,
      "name": "@typescript-eslint/prefer-as-const",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/prefer-destructuring": {
      "type": "suggestion",
      "docs": {
        "description": "Require destructuring from arrays and/or objects",
        "extendsBaseRule": true,
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/prefer-destructuring"
      },
      "fixable": "code",
      "name": "@typescript-eslint/prefer-destructuring",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/prefer-enum-initializers": {
      "type": "suggestion",
      "docs": {
        "description": "Require each enum member value to be explicitly initialized",
        "url": "https://typescript-eslint.io/rules/prefer-enum-initializers"
      },
      "hasSuggestions": true,
      "name": "@typescript-eslint/prefer-enum-initializers",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/prefer-find": {
      "docs": {
        "description": "Enforce the use of Array.prototype.find() over Array.prototype.filter() followed by [0] when looking for a single result",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/prefer-find"
      },
      "type": "suggestion",
      "hasSuggestions": true,
      "name": "@typescript-eslint/prefer-find",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/prefer-for-of": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce the use of `for-of` loop over the standard `for` loop where possible",
        "recommended": "stylistic",
        "url": "https://typescript-eslint.io/rules/prefer-for-of"
      },
      "name": "@typescript-eslint/prefer-for-of",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/prefer-function-type": {
      "docs": {
        "description": "Enforce using function types instead of interfaces with call signatures",
        "recommended": "stylistic",
        "url": "https://typescript-eslint.io/rules/prefer-function-type"
      },
      "fixable": "code",
      "type": "suggestion",
      "name": "@typescript-eslint/prefer-function-type",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/prefer-includes": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce `includes` method over `indexOf` method",
        "recommended": "strict",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/prefer-includes"
      },
      "fixable": "code",
      "name": "@typescript-eslint/prefer-includes",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/prefer-literal-enum-member": {
      "type": "suggestion",
      "docs": {
        "description": "Require all enum members to be literal values",
        "recommended": "strict",
        "requiresTypeChecking": false,
        "url": "https://typescript-eslint.io/rules/prefer-literal-enum-member"
      },
      "name": "@typescript-eslint/prefer-literal-enum-member",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/prefer-namespace-keyword": {
      "type": "suggestion",
      "docs": {
        "description": "Require using `namespace` keyword over `module` keyword to declare custom TypeScript modules",
        "recommended": "stylistic",
        "url": "https://typescript-eslint.io/rules/prefer-namespace-keyword"
      },
      "fixable": "code",
      "name": "@typescript-eslint/prefer-namespace-keyword",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/prefer-nullish-coalescing": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce using the nullish coalescing operator instead of logical assignments or chaining",
        "recommended": "stylistic",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/prefer-nullish-coalescing"
      },
      "hasSuggestions": true,
      "name": "@typescript-eslint/prefer-nullish-coalescing",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/prefer-optional-chain": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce using concise optional chain expressions instead of chained logical ands, negated logical ors, or empty objects",
        "recommended": "stylistic",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/prefer-optional-chain"
      },
      "fixable": "code",
      "hasSuggestions": true,
      "name": "@typescript-eslint/prefer-optional-chain",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/prefer-promise-reject-errors": {
      "type": "suggestion",
      "docs": {
        "description": "Require using Error objects as Promise rejection reasons",
        "recommended": "strict",
        "extendsBaseRule": true,
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/prefer-promise-reject-errors"
      },
      "name": "@typescript-eslint/prefer-promise-reject-errors",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/prefer-readonly": {
      "docs": {
        "description": "Require private members to be marked as `readonly` if they're never modified outside of the constructor",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/prefer-readonly"
      },
      "fixable": "code",
      "type": "suggestion",
      "name": "@typescript-eslint/prefer-readonly",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/prefer-readonly-parameter-types": {
      "type": "suggestion",
      "docs": {
        "description": "Require function parameters to be typed as `readonly` to prevent accidental mutation of inputs",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/prefer-readonly-parameter-types"
      },
      "name": "@typescript-eslint/prefer-readonly-parameter-types",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/prefer-reduce-type-parameter": {
      "type": "problem",
      "docs": {
        "description": "Enforce using type parameter when calling `Array#reduce` instead of casting",
        "recommended": "strict",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/prefer-reduce-type-parameter"
      },
      "fixable": "code",
      "name": "@typescript-eslint/prefer-reduce-type-parameter",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/prefer-regexp-exec": {
      "type": "suggestion",
      "fixable": "code",
      "docs": {
        "description": "Enforce `RegExp#exec` over `String#match` if no global flag is provided",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/prefer-regexp-exec"
      },
      "name": "@typescript-eslint/prefer-regexp-exec",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/prefer-return-this-type": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce that `this` is used when only `this` type is returned",
        "recommended": "strict",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/prefer-return-this-type"
      },
      "fixable": "code",
      "name": "@typescript-eslint/prefer-return-this-type",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/prefer-string-starts-ends-with": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce using `String#startsWith` and `String#endsWith` over other equivalent methods of checking substrings",
        "recommended": "stylistic",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/prefer-string-starts-ends-with"
      },
      "fixable": "code",
      "name": "@typescript-eslint/prefer-string-starts-ends-with",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/prefer-ts-expect-error": {
      "type": "problem",
      "deprecated": true,
      "replacedBy": [
        "@typescript-eslint/ban-ts-comment"
      ],
      "docs": {
        "description": "Enforce using `@ts-expect-error` over `@ts-ignore`",
        "url": "https://typescript-eslint.io/rules/prefer-ts-expect-error"
      },
      "fixable": "code",
      "name": "@typescript-eslint/prefer-ts-expect-error",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/promise-function-async": {
      "type": "suggestion",
      "fixable": "code",
      "docs": {
        "description": "Require any function or method that returns a Promise to be marked async",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/promise-function-async"
      },
      "name": "@typescript-eslint/promise-function-async",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/quotes": {
      "deprecated": true,
      "replacedBy": [
        "@stylistic/ts/quotes"
      ],
      "type": "layout",
      "docs": {
        "description": "Enforce the consistent use of either backticks, double, or single quotes",
        "extendsBaseRule": true,
        "url": "https://typescript-eslint.io/rules/quotes"
      },
      "fixable": "code",
      "name": "@typescript-eslint/quotes",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/require-array-sort-compare": {
      "type": "problem",
      "docs": {
        "description": "Require `Array#sort` and `Array#toSorted` calls to always provide a `compareFunction`",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/require-array-sort-compare"
      },
      "name": "@typescript-eslint/require-array-sort-compare",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/require-await": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow async functions which do not return promises and have no `await` expression",
        "recommended": "recommended",
        "requiresTypeChecking": true,
        "extendsBaseRule": true,
        "url": "https://typescript-eslint.io/rules/require-await"
      },
      "name": "@typescript-eslint/require-await",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/restrict-plus-operands": {
      "type": "problem",
      "docs": {
        "description": "Require both operands of addition to be the same type and be `bigint`, `number`, or `string`",
        "recommended": {
          "recommended": true,
          "strict": [
            {
              "allowAny": false,
              "allowBoolean": false,
              "allowNullish": false,
              "allowNumberAndString": false,
              "allowRegExp": false
            }
          ]
        },
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/restrict-plus-operands"
      },
      "name": "@typescript-eslint/restrict-plus-operands",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/restrict-template-expressions": {
      "type": "problem",
      "docs": {
        "description": "Enforce template literal expressions to be of `string` type",
        "recommended": {
          "recommended": true,
          "strict": [
            {
              "allowAny": false,
              "allowBoolean": false,
              "allowNullish": false,
              "allowNumber": false,
              "allowRegExp": false,
              "allowNever": false
            }
          ]
        },
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/restrict-template-expressions"
      },
      "name": "@typescript-eslint/restrict-template-expressions",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/return-await": {
      "docs": {
        "description": "Enforce consistent awaiting of returned promises",
        "requiresTypeChecking": true,
        "extendsBaseRule": "no-return-await",
        "url": "https://typescript-eslint.io/rules/return-await"
      },
      "fixable": "code",
      "hasSuggestions": true,
      "type": "problem",
      "name": "@typescript-eslint/return-await",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/semi": {
      "deprecated": true,
      "replacedBy": [
        "@stylistic/ts/semi"
      ],
      "type": "layout",
      "docs": {
        "description": "Require or disallow semicolons instead of ASI",
        "extendsBaseRule": true,
        "url": "https://typescript-eslint.io/rules/semi"
      },
      "fixable": "code",
      "name": "@typescript-eslint/semi",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/sort-type-constituents": {
      "deprecated": true,
      "replacedBy": [
        "perfectionist/sort-intersection-types",
        "perfectionist/sort-union-types"
      ],
      "type": "suggestion",
      "docs": {
        "description": "Enforce constituents of a type union/intersection to be sorted alphabetically",
        "url": "https://typescript-eslint.io/rules/sort-type-constituents"
      },
      "fixable": "code",
      "hasSuggestions": true,
      "name": "@typescript-eslint/sort-type-constituents",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/space-before-blocks": {
      "deprecated": true,
      "replacedBy": [
        "@stylistic/ts/space-before-blocks"
      ],
      "type": "layout",
      "docs": {
        "description": "Enforce consistent spacing before blocks",
        "extendsBaseRule": true,
        "url": "https://typescript-eslint.io/rules/space-before-blocks"
      },
      "fixable": "whitespace",
      "name": "@typescript-eslint/space-before-blocks",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/space-before-function-paren": {
      "deprecated": true,
      "replacedBy": [
        "@stylistic/ts/space-before-function-paren"
      ],
      "type": "layout",
      "docs": {
        "description": "Enforce consistent spacing before function parenthesis",
        "extendsBaseRule": true,
        "url": "https://typescript-eslint.io/rules/space-before-function-paren"
      },
      "fixable": "whitespace",
      "name": "@typescript-eslint/space-before-function-paren",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/space-infix-ops": {
      "deprecated": true,
      "replacedBy": [
        "@stylistic/ts/space-infix-ops"
      ],
      "type": "layout",
      "docs": {
        "description": "Require spacing around infix operators",
        "extendsBaseRule": true,
        "url": "https://typescript-eslint.io/rules/space-infix-ops"
      },
      "fixable": "whitespace",
      "name": "@typescript-eslint/space-infix-ops",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/strict-boolean-expressions": {
      "type": "suggestion",
      "fixable": "code",
      "hasSuggestions": true,
      "docs": {
        "description": "Disallow certain types in boolean expressions",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/strict-boolean-expressions"
      },
      "name": "@typescript-eslint/strict-boolean-expressions",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/switch-exhaustiveness-check": {
      "type": "suggestion",
      "docs": {
        "description": "Require switch-case statements to be exhaustive",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/switch-exhaustiveness-check"
      },
      "hasSuggestions": true,
      "name": "@typescript-eslint/switch-exhaustiveness-check",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/triple-slash-reference": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow certain triple slash directives in favor of ES6-style import declarations",
        "recommended": "recommended",
        "url": "https://typescript-eslint.io/rules/triple-slash-reference"
      },
      "name": "@typescript-eslint/triple-slash-reference",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/type-annotation-spacing": {
      "deprecated": true,
      "replacedBy": [
        "@stylistic/ts/type-annotation-spacing"
      ],
      "type": "layout",
      "docs": {
        "description": "Require consistent spacing around type annotations",
        "url": "https://typescript-eslint.io/rules/type-annotation-spacing"
      },
      "fixable": "whitespace",
      "name": "@typescript-eslint/type-annotation-spacing",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/typedef": {
      "docs": {
        "description": "Require type annotations in certain places",
        "url": "https://typescript-eslint.io/rules/typedef"
      },
      "type": "suggestion",
      "name": "@typescript-eslint/typedef",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/unbound-method": {
      "docs": {
        "description": "Enforce unbound methods are called with their expected scope",
        "recommended": "recommended",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/unbound-method"
      },
      "type": "problem",
      "name": "@typescript-eslint/unbound-method",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/unified-signatures": {
      "docs": {
        "description": "Disallow two overloads that could be unified into one with a union or an optional/rest parameter",
        "recommended": "strict",
        "url": "https://typescript-eslint.io/rules/unified-signatures"
      },
      "type": "suggestion",
      "name": "@typescript-eslint/unified-signatures",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/use-unknown-in-catch-callback-variable": {
      "docs": {
        "description": "Enforce typing arguments in `.catch()` callbacks as `unknown`",
        "requiresTypeChecking": true,
        "recommended": "strict",
        "url": "https://typescript-eslint.io/rules/use-unknown-in-catch-callback-variable"
      },
      "type": "suggestion",
      "fixable": "code",
      "hasSuggestions": true,
      "name": "@typescript-eslint/use-unknown-in-catch-callback-variable",
      "plugin": "@typescript-eslint"
    },
    "@eslint-react/avoid-shorthand-boolean": {
      "type": "problem",
      "docs": {
        "description": "enforce boolean attributes notation in JSX",
        "url": "https://eslint-react.xyz/docs/rules/avoid-shorthand-boolean"
      },
      "name": "@eslint-react/avoid-shorthand-boolean",
      "plugin": "@eslint-react"
    },
    "@eslint-react/avoid-shorthand-fragment": {
      "type": "problem",
      "docs": {
        "description": "enforce using fragment component instead of shorthand fragment syntax",
        "url": "https://eslint-react.xyz/docs/rules/avoid-shorthand-fragment"
      },
      "name": "@eslint-react/avoid-shorthand-fragment",
      "plugin": "@eslint-react"
    },
    "@eslint-react/ensure-forward-ref-using-ref": {
      "type": "problem",
      "docs": {
        "description": "require all 'forwardRef' components include a 'ref' parameter",
        "url": "https://eslint-react.xyz/docs/rules/ensure-forward-ref-using-ref"
      },
      "name": "@eslint-react/ensure-forward-ref-using-ref",
      "plugin": "@eslint-react"
    },
    "@eslint-react/no-access-state-in-setstate": {
      "type": "problem",
      "docs": {
        "description": "disallow accessing 'this.state' within 'setState'",
        "url": "https://eslint-react.xyz/docs/rules/no-access-state-in-setstate"
      },
      "name": "@eslint-react/no-access-state-in-setstate",
      "plugin": "@eslint-react"
    },
    "@eslint-react/no-array-index-key": {
      "type": "problem",
      "docs": {
        "description": "disallow using Array index as key",
        "url": "https://eslint-react.xyz/docs/rules/no-array-index-key"
      },
      "name": "@eslint-react/no-array-index-key",
      "plugin": "@eslint-react"
    },
    "@eslint-react/no-children-count": {
      "type": "problem",
      "docs": {
        "description": "disallow 'Children.count'",
        "url": "https://eslint-react.xyz/docs/rules/no-children-count"
      },
      "name": "@eslint-react/no-children-count",
      "plugin": "@eslint-react"
    },
    "@eslint-react/no-children-for-each": {
      "type": "problem",
      "docs": {
        "description": "disallow 'Children.forEach'",
        "url": "https://eslint-react.xyz/docs/rules/no-children-for-each"
      },
      "name": "@eslint-react/no-children-for-each",
      "plugin": "@eslint-react"
    },
    "@eslint-react/no-children-map": {
      "type": "problem",
      "docs": {
        "description": "disallow 'Children.map'",
        "url": "https://eslint-react.xyz/docs/rules/no-children-map"
      },
      "name": "@eslint-react/no-children-map",
      "plugin": "@eslint-react"
    },
    "@eslint-react/no-children-only": {
      "type": "problem",
      "docs": {
        "description": "disallow 'Children.only'",
        "url": "https://eslint-react.xyz/docs/rules/no-children-only"
      },
      "name": "@eslint-react/no-children-only",
      "plugin": "@eslint-react"
    },
    "@eslint-react/no-children-prop": {
      "type": "problem",
      "docs": {
        "description": "disallow passing of 'children' as props",
        "url": "https://eslint-react.xyz/docs/rules/no-children-prop"
      },
      "name": "@eslint-react/no-children-prop",
      "plugin": "@eslint-react"
    },
    "@eslint-react/no-children-to-array": {
      "type": "problem",
      "docs": {
        "description": "disallow 'Children.toArray'",
        "url": "https://eslint-react.xyz/docs/rules/no-children-to-array"
      },
      "name": "@eslint-react/no-children-to-array",
      "plugin": "@eslint-react"
    },
    "@eslint-react/no-class-component": {
      "type": "problem",
      "docs": {
        "description": "disallow class component",
        "url": "https://eslint-react.xyz/docs/rules/no-class-component"
      },
      "name": "@eslint-react/no-class-component",
      "plugin": "@eslint-react"
    },
    "@eslint-react/no-clone-element": {
      "type": "problem",
      "docs": {
        "description": "disallow 'cloneElement'",
        "url": "https://eslint-react.xyz/docs/rules/no-clone-element"
      },
      "name": "@eslint-react/no-clone-element",
      "plugin": "@eslint-react"
    },
    "@eslint-react/no-comment-textnodes": {
      "type": "problem",
      "docs": {
        "description": "disallow comments from being inserted as text nodes",
        "url": "https://eslint-react.xyz/docs/rules/no-comment-textnodes"
      },
      "name": "@eslint-react/no-comment-textnodes",
      "plugin": "@eslint-react"
    },
    "@eslint-react/no-complicated-conditional-rendering": {
      "type": "problem",
      "deprecated": true,
      "docs": {
        "description": "disallow complicated conditional rendering",
        "url": "https://eslint-react.xyz/docs/rules/no-complicated-conditional-rendering"
      },
      "name": "@eslint-react/no-complicated-conditional-rendering",
      "plugin": "@eslint-react"
    },
    "@eslint-react/no-component-will-mount": {
      "type": "problem",
      "docs": {
        "description": "disallow usage of 'componentWillMount'",
        "url": "https://eslint-react.xyz/docs/rules/no-component-will-mount"
      },
      "name": "@eslint-react/no-component-will-mount",
      "plugin": "@eslint-react"
    },
    "@eslint-react/no-component-will-receive-props": {
      "type": "problem",
      "docs": {
        "description": "disallow usage of 'componentWillReceiveProps'",
        "url": "https://eslint-react.xyz/docs/rules/no-component-will-receive-props"
      },
      "name": "@eslint-react/no-component-will-receive-props",
      "plugin": "@eslint-react"
    },
    "@eslint-react/no-component-will-update": {
      "type": "problem",
      "docs": {
        "description": "disallow usage of 'componentWillUpdate'",
        "url": "https://eslint-react.xyz/docs/rules/no-component-will-update"
      },
      "name": "@eslint-react/no-component-will-update",
      "plugin": "@eslint-react"
    },
    "@eslint-react/no-create-ref": {
      "type": "problem",
      "docs": {
        "description": "disallow 'createRef' in function components",
        "url": "https://eslint-react.xyz/docs/rules/no-create-ref"
      },
      "name": "@eslint-react/no-create-ref",
      "plugin": "@eslint-react"
    },
    "@eslint-react/no-default-props": {
      "type": "problem",
      "docs": {
        "description": "disallow the use of 'defaultProps' property in components",
        "url": "https://eslint-react.xyz/docs/rules/no-default-props"
      },
      "name": "@eslint-react/no-default-props",
      "plugin": "@eslint-react"
    },
    "@eslint-react/no-direct-mutation-state": {
      "type": "problem",
      "docs": {
        "description": "disallow direct mutation of state",
        "url": "https://eslint-react.xyz/docs/rules/no-direct-mutation-state"
      },
      "name": "@eslint-react/no-direct-mutation-state",
      "plugin": "@eslint-react"
    },
    "@eslint-react/no-duplicate-key": {
      "type": "problem",
      "docs": {
        "description": "disallow duplicate keys in 'key' prop when rendering list",
        "url": "https://eslint-react.xyz/docs/rules/no-duplicate-key"
      },
      "name": "@eslint-react/no-duplicate-key",
      "plugin": "@eslint-react"
    },
    "@eslint-react/no-implicit-key": {
      "type": "problem",
      "deprecated": true,
      "docs": {
        "description": "disallow spreading 'key' from objects.",
        "url": "https://eslint-react.xyz/docs/rules/no-implicit-key"
      },
      "name": "@eslint-react/no-implicit-key",
      "plugin": "@eslint-react"
    },
    "@eslint-react/no-leaked-conditional-rendering": {
      "type": "problem",
      "docs": {
        "description": "disallow problematic leaked values from being rendered",
        "url": "https://eslint-react.xyz/docs/rules/no-leaked-conditional-rendering"
      },
      "name": "@eslint-react/no-leaked-conditional-rendering",
      "plugin": "@eslint-react"
    },
    "@eslint-react/no-missing-component-display-name": {
      "type": "problem",
      "docs": {
        "description": "require 'displayName' for memo and forwardRef components",
        "url": "https://eslint-react.xyz/docs/rules/no-missing-component-display-name"
      },
      "name": "@eslint-react/no-missing-component-display-name",
      "plugin": "@eslint-react"
    },
    "@eslint-react/no-missing-key": {
      "type": "problem",
      "docs": {
        "description": "require 'key' prop when rendering list",
        "url": "https://eslint-react.xyz/docs/rules/no-missing-key"
      },
      "name": "@eslint-react/no-missing-key",
      "plugin": "@eslint-react"
    },
    "@eslint-react/no-nested-components": {
      "type": "problem",
      "docs": {
        "description": "disallow usage of unstable nested components",
        "url": "https://eslint-react.xyz/docs/rules/no-nested-components"
      },
      "name": "@eslint-react/no-nested-components",
      "plugin": "@eslint-react"
    },
    "@eslint-react/no-prop-types": {
      "type": "problem",
      "docs": {
        "description": "disallow the use of 'propTypes' property in components",
        "url": "https://eslint-react.xyz/docs/rules/no-prop-types"
      },
      "name": "@eslint-react/no-prop-types",
      "plugin": "@eslint-react"
    },
    "@eslint-react/no-redundant-should-component-update": {
      "type": "problem",
      "docs": {
        "description": "disallow usage of 'shouldComponentUpdate' in class component extends 'React.PureComponent'",
        "url": "https://eslint-react.xyz/docs/rules/no-redundant-should-component-update"
      },
      "name": "@eslint-react/no-redundant-should-component-update",
      "plugin": "@eslint-react"
    },
    "@eslint-react/no-set-state-in-component-did-mount": {
      "type": "problem",
      "docs": {
        "description": "disallow 'setState' in 'componentDidMount'",
        "url": "https://eslint-react.xyz/docs/rules/no-set-state-in-component-did-mount"
      },
      "name": "@eslint-react/no-set-state-in-component-did-mount",
      "plugin": "@eslint-react"
    },
    "@eslint-react/no-set-state-in-component-did-update": {
      "type": "problem",
      "docs": {
        "description": "disallow 'setState' in 'componentDidUpdate'",
        "url": "https://eslint-react.xyz/docs/rules/no-set-state-in-component-did-update"
      },
      "name": "@eslint-react/no-set-state-in-component-did-update",
      "plugin": "@eslint-react"
    },
    "@eslint-react/no-set-state-in-component-will-update": {
      "type": "problem",
      "docs": {
        "description": "disallow 'setState' in 'componentWillUpdate'",
        "url": "https://eslint-react.xyz/docs/rules/no-set-state-in-component-will-update"
      },
      "name": "@eslint-react/no-set-state-in-component-will-update",
      "plugin": "@eslint-react"
    },
    "@eslint-react/no-string-refs": {
      "type": "problem",
      "docs": {
        "description": "disallow using deprecated string refs",
        "url": "https://eslint-react.xyz/docs/rules/no-string-refs"
      },
      "name": "@eslint-react/no-string-refs",
      "plugin": "@eslint-react"
    },
    "@eslint-react/no-unsafe-component-will-mount": {
      "type": "problem",
      "docs": {
        "description": "disallow usage of 'UNSAFE_componentWillMount'",
        "url": "https://eslint-react.xyz/docs/rules/no-unsafe-component-will-mount"
      },
      "name": "@eslint-react/no-unsafe-component-will-mount",
      "plugin": "@eslint-react"
    },
    "@eslint-react/no-unsafe-component-will-receive-props": {
      "type": "problem",
      "docs": {
        "description": "disallow usage of 'UNSAFE_componentWillReceiveProps'",
        "url": "https://eslint-react.xyz/docs/rules/no-unsafe-component-will-receive-props"
      },
      "name": "@eslint-react/no-unsafe-component-will-receive-props",
      "plugin": "@eslint-react"
    },
    "@eslint-react/no-unsafe-component-will-update": {
      "type": "problem",
      "docs": {
        "description": "disallow usage of 'UNSAFE_componentWillUpdate'",
        "url": "https://eslint-react.xyz/docs/rules/no-unsafe-component-will-update"
      },
      "name": "@eslint-react/no-unsafe-component-will-update",
      "plugin": "@eslint-react"
    },
    "@eslint-react/no-unstable-context-value": {
      "type": "problem",
      "docs": {
        "description": "disallow passing constructed values to context providers",
        "url": "https://eslint-react.xyz/docs/rules/no-unstable-context-value"
      },
      "name": "@eslint-react/no-unstable-context-value",
      "plugin": "@eslint-react"
    },
    "@eslint-react/no-unstable-default-props": {
      "type": "problem",
      "docs": {
        "description": "disallow usage of unstable value as default param in function component",
        "url": "https://eslint-react.xyz/docs/rules/no-unstable-default-props"
      },
      "name": "@eslint-react/no-unstable-default-props",
      "plugin": "@eslint-react"
    },
    "@eslint-react/no-unused-class-component-members": {
      "type": "problem",
      "docs": {
        "description": "disallow unused class component members",
        "url": "https://eslint-react.xyz/docs/rules/no-unused-class-component-members"
      },
      "name": "@eslint-react/no-unused-class-component-members",
      "plugin": "@eslint-react"
    },
    "@eslint-react/no-unused-state": {
      "type": "problem",
      "docs": {
        "description": "Prevents unused state of class component",
        "url": "https://eslint-react.xyz/docs/rules/no-unused-state"
      },
      "name": "@eslint-react/no-unused-state",
      "plugin": "@eslint-react"
    },
    "@eslint-react/no-useless-fragment": {
      "type": "problem",
      "docs": {
        "description": "disallow unnecessary fragments",
        "url": "https://eslint-react.xyz/docs/rules/no-useless-fragment"
      },
      "name": "@eslint-react/no-useless-fragment",
      "plugin": "@eslint-react"
    },
    "@eslint-react/prefer-destructuring-assignment": {
      "type": "problem",
      "docs": {
        "description": "enforce using destructuring assignment in component props and context",
        "url": "https://eslint-react.xyz/docs/rules/prefer-destructuring-assignment"
      },
      "name": "@eslint-react/prefer-destructuring-assignment",
      "plugin": "@eslint-react"
    },
    "@eslint-react/prefer-read-only-props": {
      "type": "problem",
      "docs": {
        "description": "enforce that component props are read-only",
        "url": "https://eslint-react.xyz/docs/rules/prefer-read-only-props"
      },
      "name": "@eslint-react/prefer-read-only-props",
      "plugin": "@eslint-react"
    },
    "@eslint-react/prefer-shorthand-boolean": {
      "type": "problem",
      "docs": {
        "description": "enforce boolean attributes notation in JSX",
        "url": "https://eslint-react.xyz/docs/rules/prefer-shorthand-boolean"
      },
      "name": "@eslint-react/prefer-shorthand-boolean",
      "plugin": "@eslint-react"
    },
    "@eslint-react/prefer-shorthand-fragment": {
      "type": "problem",
      "docs": {
        "description": "enforce using fragment syntax instead of Fragment component",
        "url": "https://eslint-react.xyz/docs/rules/prefer-shorthand-fragment"
      },
      "name": "@eslint-react/prefer-shorthand-fragment",
      "plugin": "@eslint-react"
    },
    "@eslint-react/dom/no-children-in-void-dom-elements": {
      "type": "problem",
      "docs": {
        "description": "disallow passing 'children' to void DOM elements",
        "url": "https://eslint-react.xyz/docs/rules/dom-no-children-in-void-dom-elements"
      },
      "name": "@eslint-react/dom/no-children-in-void-dom-elements",
      "plugin": "@eslint-react/dom"
    },
    "@eslint-react/dom/no-dangerously-set-innerhtml": {
      "type": "problem",
      "docs": {
        "description": "disallow when a DOM component is using 'dangerouslySetInnerHTML'",
        "url": "https://eslint-react.xyz/docs/rules/dom-no-dangerously-set-innerhtml"
      },
      "name": "@eslint-react/dom/no-dangerously-set-innerhtml",
      "plugin": "@eslint-react/dom"
    },
    "@eslint-react/dom/no-dangerously-set-innerhtml-with-children": {
      "type": "problem",
      "docs": {
        "description": "disallow when a DOM component is using both 'children' and 'dangerouslySetInnerHTML'",
        "url": "https://eslint-react.xyz/docs/rules/dom-no-dangerously-set-innerhtml-with-children"
      },
      "name": "@eslint-react/dom/no-dangerously-set-innerhtml-with-children",
      "plugin": "@eslint-react/dom"
    },
    "@eslint-react/dom/no-find-dom-node": {
      "type": "problem",
      "docs": {
        "description": "disallow 'findDOMNode'",
        "url": "https://eslint-react.xyz/docs/rules/dom-no-find-dom-node"
      },
      "name": "@eslint-react/dom/no-find-dom-node",
      "plugin": "@eslint-react/dom"
    },
    "@eslint-react/dom/no-missing-button-type": {
      "type": "problem",
      "docs": {
        "description": "enforce that button component have an explicit 'type' attribute",
        "url": "https://eslint-react.xyz/docs/rules/dom-no-missing-button-type"
      },
      "name": "@eslint-react/dom/no-missing-button-type",
      "plugin": "@eslint-react/dom"
    },
    "@eslint-react/dom/no-missing-iframe-sandbox": {
      "type": "problem",
      "docs": {
        "description": "enforce that 'iframe' component have an explicit 'sandbox' attribute",
        "url": "https://eslint-react.xyz/docs/rules/dom-no-missing-iframe-sandbox"
      },
      "name": "@eslint-react/dom/no-missing-iframe-sandbox",
      "plugin": "@eslint-react/dom"
    },
    "@eslint-react/dom/no-namespace": {
      "type": "problem",
      "docs": {
        "description": "enforce that namespaces are not used in React elements",
        "url": "https://eslint-react.xyz/docs/rules/dom-no-namespace"
      },
      "name": "@eslint-react/dom/no-namespace",
      "plugin": "@eslint-react/dom"
    },
    "@eslint-react/dom/no-render-return-value": {
      "type": "problem",
      "docs": {
        "description": "disallow usage of the return value of 'ReactDOM.render'",
        "url": "https://eslint-react.xyz/docs/rules/dom-no-render-return-value"
      },
      "name": "@eslint-react/dom/no-render-return-value",
      "plugin": "@eslint-react/dom"
    },
    "@eslint-react/dom/no-script-url": {
      "type": "problem",
      "docs": {
        "description": "disallow 'javascript:' URLs as JSX event handler prop's value",
        "url": "https://eslint-react.xyz/docs/rules/dom-no-script-url"
      },
      "name": "@eslint-react/dom/no-script-url",
      "plugin": "@eslint-react/dom"
    },
    "@eslint-react/dom/no-unsafe-iframe-sandbox": {
      "type": "problem",
      "docs": {
        "description": "disallow unsafe iframe 'sandbox' attribute combinations",
        "url": "https://eslint-react.xyz/docs/rules/dom-no-unsafe-iframe-sandbox"
      },
      "name": "@eslint-react/dom/no-unsafe-iframe-sandbox",
      "plugin": "@eslint-react/dom"
    },
    "@eslint-react/dom/no-unsafe-target-blank": {
      "type": "problem",
      "docs": {
        "description": "disallow 'target=\"_blank\"' on an external link without 'rel=\"noreferrer noopener\"'",
        "url": "https://eslint-react.xyz/docs/rules/dom-no-unsafe-target-blank"
      },
      "name": "@eslint-react/dom/no-unsafe-target-blank",
      "plugin": "@eslint-react/dom"
    },
    "react-hooks/rules-of-hooks": {
      "type": "problem",
      "docs": {
        "description": "enforces the Rules of Hooks",
        "recommended": true,
        "url": "https://reactjs.org/docs/hooks-rules.html"
      },
      "name": "react-hooks/rules-of-hooks",
      "plugin": "react-hooks"
    },
    "react-hooks/exhaustive-deps": {
      "type": "suggestion",
      "docs": {
        "description": "verifies the list of dependencies for Hooks like useEffect and similar",
        "recommended": true,
        "url": "https://github.com/facebook/react/issues/14920"
      },
      "fixable": "code",
      "hasSuggestions": true,
      "name": "react-hooks/exhaustive-deps",
      "plugin": "react-hooks"
    },
    "@eslint-react/hooks-extra/ensure-custom-hooks-using-other-hooks": {
      "type": "problem",
      "docs": {
        "description": "enforce custom hooks using other hooks",
        "url": "https://eslint-react.xyz/docs/rules/hooks-extra-ensure-custom-hooks-using-other-hooks"
      },
      "name": "@eslint-react/hooks-extra/ensure-custom-hooks-using-other-hooks",
      "plugin": "@eslint-react/hooks-extra"
    },
    "@eslint-react/hooks-extra/ensure-use-callback-has-non-empty-deps": {
      "type": "problem",
      "docs": {
        "description": "enforce 'useCallback' has non-empty dependencies array",
        "url": "https://eslint-react.xyz/docs/rules/hooks-extra-ensure-use-callback-has-non-empty-deps"
      },
      "name": "@eslint-react/hooks-extra/ensure-use-callback-has-non-empty-deps",
      "plugin": "@eslint-react/hooks-extra"
    },
    "@eslint-react/hooks-extra/ensure-use-memo-has-non-empty-deps": {
      "type": "problem",
      "docs": {
        "description": "enforce 'useMemo' has non-empty dependencies array",
        "url": "https://eslint-react.xyz/docs/rules/hooks-extra-ensure-use-memo-has-non-empty-deps"
      },
      "name": "@eslint-react/hooks-extra/ensure-use-memo-has-non-empty-deps",
      "plugin": "@eslint-react/hooks-extra"
    },
    "@eslint-react/hooks-extra/no-direct-set-state-in-use-effect": {
      "type": "problem",
      "docs": {
        "description": "disallow direct calls to the 'set' function of 'useState' in 'useEffect'",
        "url": "https://eslint-react.xyz/docs/rules/hooks-extra-no-direct-set-state-in-use-effect"
      },
      "name": "@eslint-react/hooks-extra/no-direct-set-state-in-use-effect",
      "plugin": "@eslint-react/hooks-extra"
    },
    "@eslint-react/hooks-extra/no-direct-set-state-in-use-layout-effect": {
      "type": "problem",
      "docs": {
        "description": "disallow direct calls to the 'set' function of 'useState' in 'useLayoutEffect'",
        "url": "https://eslint-react.xyz/docs/rules/hooks-extra-no-direct-set-state-in-use-layout-effect"
      },
      "name": "@eslint-react/hooks-extra/no-direct-set-state-in-use-layout-effect",
      "plugin": "@eslint-react/hooks-extra"
    },
    "@eslint-react/hooks-extra/prefer-use-state-lazy-initialization": {
      "type": "problem",
      "docs": {
        "description": "disallow function calls in 'useState' that aren't wrapped in an initializer function",
        "url": "https://eslint-react.xyz/docs/rules/hooks-extra-prefer-use-state-lazy-initialization"
      },
      "name": "@eslint-react/hooks-extra/prefer-use-state-lazy-initialization",
      "plugin": "@eslint-react/hooks-extra"
    },
    "@eslint-react/naming-convention/component-name": {
      "type": "problem",
      "docs": {
        "description": "enforce component naming convention to 'PascalCase' or 'CONSTANT_CASE'",
        "url": "https://eslint-react.xyz/docs/rules/naming-convention-component-name"
      },
      "name": "@eslint-react/naming-convention/component-name",
      "plugin": "@eslint-react/naming-convention"
    },
    "@eslint-react/naming-convention/filename": {
      "type": "problem",
      "docs": {
        "description": "enforce naming convention for JSX filenames",
        "url": "https://eslint-react.xyz/docs/rules/naming-convention-filename"
      },
      "name": "@eslint-react/naming-convention/filename",
      "plugin": "@eslint-react/naming-convention"
    },
    "@eslint-react/naming-convention/filename-extension": {
      "type": "problem",
      "docs": {
        "description": "enforce naming convention for JSX file extensions",
        "url": "https://eslint-react.xyz/docs/rules/naming-convention-filename-extension"
      },
      "name": "@eslint-react/naming-convention/filename-extension",
      "plugin": "@eslint-react/naming-convention"
    },
    "@eslint-react/naming-convention/use-state": {
      "type": "problem",
      "docs": {
        "description": "enforce destructuring and symmetric naming of 'useState' hook value and setter variables",
        "url": "https://eslint-react.xyz/docs/rules/naming-convention-use-state"
      },
      "name": "@eslint-react/naming-convention/use-state",
      "plugin": "@eslint-react/naming-convention"
    },
    "jsx-a11y/accessible-emoji": {
      "docs": {
        "description": "Enforce emojis are wrapped in `<span>` and provide screenreader access.",
        "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/accessible-emoji.md"
      },
      "deprecated": true,
      "name": "jsx-a11y/accessible-emoji",
      "plugin": "jsx-a11y"
    },
    "jsx-a11y/alt-text": {
      "docs": {
        "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/alt-text.md",
        "description": "Enforce all elements that require alternative text have meaningful information to relay back to end user."
      },
      "name": "jsx-a11y/alt-text",
      "plugin": "jsx-a11y"
    },
    "jsx-a11y/anchor-ambiguous-text": {
      "docs": {
        "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/anchor-ambiguous-text.md",
        "description": "Enforce `<a>` text to not exactly match \"click here\", \"here\", \"link\", or \"a link\"."
      },
      "name": "jsx-a11y/anchor-ambiguous-text",
      "plugin": "jsx-a11y"
    },
    "jsx-a11y/anchor-has-content": {
      "docs": {
        "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/anchor-has-content.md",
        "description": "Enforce all anchors to contain accessible content."
      },
      "name": "jsx-a11y/anchor-has-content",
      "plugin": "jsx-a11y"
    },
    "jsx-a11y/anchor-is-valid": {
      "docs": {
        "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/anchor-is-valid.md",
        "description": "Enforce all anchors are valid, navigable elements."
      },
      "name": "jsx-a11y/anchor-is-valid",
      "plugin": "jsx-a11y"
    },
    "jsx-a11y/aria-activedescendant-has-tabindex": {
      "docs": {
        "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/aria-activedescendant-has-tabindex.md",
        "description": "Enforce elements with aria-activedescendant are tabbable."
      },
      "name": "jsx-a11y/aria-activedescendant-has-tabindex",
      "plugin": "jsx-a11y"
    },
    "jsx-a11y/aria-props": {
      "docs": {
        "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/aria-props.md",
        "description": "Enforce all `aria-*` props are valid."
      },
      "name": "jsx-a11y/aria-props",
      "plugin": "jsx-a11y"
    },
    "jsx-a11y/aria-proptypes": {
      "docs": {
        "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/aria-proptypes.md",
        "description": "Enforce ARIA state and property values are valid."
      },
      "name": "jsx-a11y/aria-proptypes",
      "plugin": "jsx-a11y"
    },
    "jsx-a11y/aria-role": {
      "docs": {
        "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/aria-role.md",
        "description": "Enforce that elements with ARIA roles must use a valid, non-abstract ARIA role."
      },
      "name": "jsx-a11y/aria-role",
      "plugin": "jsx-a11y"
    },
    "jsx-a11y/aria-unsupported-elements": {
      "docs": {
        "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/aria-unsupported-elements.md",
        "description": "Enforce that elements that do not support ARIA roles, states, and properties do not have those attributes."
      },
      "name": "jsx-a11y/aria-unsupported-elements",
      "plugin": "jsx-a11y"
    },
    "jsx-a11y/autocomplete-valid": {
      "docs": {
        "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/autocomplete-valid.md",
        "description": "Enforce that autocomplete attributes are used correctly."
      },
      "name": "jsx-a11y/autocomplete-valid",
      "plugin": "jsx-a11y"
    },
    "jsx-a11y/click-events-have-key-events": {
      "docs": {
        "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/click-events-have-key-events.md",
        "description": "Enforce a clickable non-interactive element has at least one keyboard event listener."
      },
      "name": "jsx-a11y/click-events-have-key-events",
      "plugin": "jsx-a11y"
    },
    "jsx-a11y/control-has-associated-label": {
      "docs": {
        "description": "Enforce that a control (an interactive element) has a text label.",
        "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/main/docs/rules/control-has-associated-label.md"
      },
      "name": "jsx-a11y/control-has-associated-label",
      "plugin": "jsx-a11y"
    },
    "jsx-a11y/heading-has-content": {
      "docs": {
        "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/heading-has-content.md",
        "description": "Enforce heading (`h1`, `h2`, etc) elements contain accessible content."
      },
      "name": "jsx-a11y/heading-has-content",
      "plugin": "jsx-a11y"
    },
    "jsx-a11y/html-has-lang": {
      "docs": {
        "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/html-has-lang.md",
        "description": "Enforce `<html>` element has `lang` prop."
      },
      "name": "jsx-a11y/html-has-lang",
      "plugin": "jsx-a11y"
    },
    "jsx-a11y/iframe-has-title": {
      "docs": {
        "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/iframe-has-title.md",
        "description": "Enforce iframe elements have a title attribute."
      },
      "name": "jsx-a11y/iframe-has-title",
      "plugin": "jsx-a11y"
    },
    "jsx-a11y/img-redundant-alt": {
      "docs": {
        "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/img-redundant-alt.md",
        "description": "Enforce `<img>` alt prop does not contain the word \"image\", \"picture\", or \"photo\"."
      },
      "name": "jsx-a11y/img-redundant-alt",
      "plugin": "jsx-a11y"
    },
    "jsx-a11y/interactive-supports-focus": {
      "docs": {
        "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/interactive-supports-focus.md",
        "description": "Enforce that elements with interactive handlers like `onClick` must be focusable."
      },
      "name": "jsx-a11y/interactive-supports-focus",
      "plugin": "jsx-a11y"
    },
    "jsx-a11y/label-has-associated-control": {
      "docs": {
        "description": "Enforce that a `label` tag has a text label and an associated control.",
        "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/main/docs/rules/label-has-associated-control.md"
      },
      "name": "jsx-a11y/label-has-associated-control",
      "plugin": "jsx-a11y"
    },
    "jsx-a11y/label-has-for": {
      "deprecated": true,
      "replacedBy": [
        "label-has-associated-control"
      ],
      "docs": {
        "description": "Enforce that `<label>` elements have the `htmlFor` prop.",
        "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/label-has-for.md"
      },
      "name": "jsx-a11y/label-has-for",
      "plugin": "jsx-a11y"
    },
    "jsx-a11y/lang": {
      "docs": {
        "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/lang.md",
        "description": "Enforce lang attribute has a valid value."
      },
      "name": "jsx-a11y/lang",
      "plugin": "jsx-a11y"
    },
    "jsx-a11y/media-has-caption": {
      "docs": {
        "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/media-has-caption.md",
        "description": "Enforces that `<audio>` and `<video>` elements must have a `<track>` for captions."
      },
      "name": "jsx-a11y/media-has-caption",
      "plugin": "jsx-a11y"
    },
    "jsx-a11y/mouse-events-have-key-events": {
      "docs": {
        "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/mouse-events-have-key-events.md",
        "description": "Enforce that `onMouseOver`/`onMouseOut` are accompanied by `onFocus`/`onBlur` for keyboard-only users."
      },
      "name": "jsx-a11y/mouse-events-have-key-events",
      "plugin": "jsx-a11y"
    },
    "jsx-a11y/no-access-key": {
      "docs": {
        "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/no-access-key.md",
        "description": "Enforce that the `accessKey` prop is not used on any element to avoid complications with keyboard commands used by a screenreader."
      },
      "name": "jsx-a11y/no-access-key",
      "plugin": "jsx-a11y"
    },
    "jsx-a11y/no-aria-hidden-on-focusable": {
      "docs": {
        "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/no-aria-hidden-on-focusable.md",
        "description": "Disallow `aria-hidden=\"true\"` from being set on focusable elements."
      },
      "name": "jsx-a11y/no-aria-hidden-on-focusable",
      "plugin": "jsx-a11y"
    },
    "jsx-a11y/no-autofocus": {
      "docs": {
        "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/no-autofocus.md",
        "description": "Enforce autoFocus prop is not used."
      },
      "name": "jsx-a11y/no-autofocus",
      "plugin": "jsx-a11y"
    },
    "jsx-a11y/no-distracting-elements": {
      "docs": {
        "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/no-distracting-elements.md",
        "description": "Enforce distracting elements are not used."
      },
      "name": "jsx-a11y/no-distracting-elements",
      "plugin": "jsx-a11y"
    },
    "jsx-a11y/no-interactive-element-to-noninteractive-role": {
      "docs": {
        "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/no-interactive-element-to-noninteractive-role.md",
        "description": "Interactive elements should not be assigned non-interactive roles."
      },
      "name": "jsx-a11y/no-interactive-element-to-noninteractive-role",
      "plugin": "jsx-a11y"
    },
    "jsx-a11y/no-noninteractive-element-interactions": {
      "docs": {
        "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/no-noninteractive-element-interactions.md",
        "description": "Non-interactive elements should not be assigned mouse or keyboard event listeners."
      },
      "name": "jsx-a11y/no-noninteractive-element-interactions",
      "plugin": "jsx-a11y"
    },
    "jsx-a11y/no-noninteractive-element-to-interactive-role": {
      "docs": {
        "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/no-noninteractive-element-to-interactive-role.md",
        "description": "Non-interactive elements should not be assigned interactive roles."
      },
      "name": "jsx-a11y/no-noninteractive-element-to-interactive-role",
      "plugin": "jsx-a11y"
    },
    "jsx-a11y/no-noninteractive-tabindex": {
      "docs": {
        "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/no-noninteractive-tabindex.md",
        "description": "`tabIndex` should only be declared on interactive elements."
      },
      "name": "jsx-a11y/no-noninteractive-tabindex",
      "plugin": "jsx-a11y"
    },
    "jsx-a11y/no-onchange": {
      "docs": {
        "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/no-onchange.md",
        "description": "Enforce usage of `onBlur` over `onChange` on select menus for accessibility."
      },
      "deprecated": true,
      "name": "jsx-a11y/no-onchange",
      "plugin": "jsx-a11y"
    },
    "jsx-a11y/no-redundant-roles": {
      "docs": {
        "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/no-redundant-roles.md",
        "description": "Enforce explicit role property is not the same as implicit/default role property on element."
      },
      "name": "jsx-a11y/no-redundant-roles",
      "plugin": "jsx-a11y"
    },
    "jsx-a11y/no-static-element-interactions": {
      "docs": {
        "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/no-static-element-interactions.md",
        "description": "Enforce that non-interactive, visible elements (such as `<div>`) that have click handlers use the role attribute."
      },
      "name": "jsx-a11y/no-static-element-interactions",
      "plugin": "jsx-a11y"
    },
    "jsx-a11y/prefer-tag-over-role": {
      "docs": {
        "description": "Enforces using semantic DOM elements over the ARIA `role` property.",
        "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/prefer-tag-over-role.md"
      },
      "name": "jsx-a11y/prefer-tag-over-role",
      "plugin": "jsx-a11y"
    },
    "jsx-a11y/role-has-required-aria-props": {
      "docs": {
        "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/role-has-required-aria-props.md",
        "description": "Enforce that elements with ARIA roles must have all required attributes for that role."
      },
      "name": "jsx-a11y/role-has-required-aria-props",
      "plugin": "jsx-a11y"
    },
    "jsx-a11y/role-supports-aria-props": {
      "docs": {
        "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/role-supports-aria-props.md",
        "description": "Enforce that elements with explicit or implicit roles defined contain only `aria-*` properties supported by that `role`."
      },
      "name": "jsx-a11y/role-supports-aria-props",
      "plugin": "jsx-a11y"
    },
    "jsx-a11y/scope": {
      "docs": {
        "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/scope.md",
        "description": "Enforce `scope` prop is only used on `<th>` elements."
      },
      "name": "jsx-a11y/scope",
      "plugin": "jsx-a11y"
    },
    "jsx-a11y/tabindex-no-positive": {
      "docs": {
        "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/tabindex-no-positive.md",
        "description": "Enforce `tabIndex` value is not greater than zero."
      },
      "name": "jsx-a11y/tabindex-no-positive",
      "plugin": "jsx-a11y"
    },
    "turbo/no-undeclared-env-vars": {
      "type": "problem",
      "docs": {
        "description": "Do not allow the use of `process.env` without including the env key in any turbo.json",
        "category": "Configuration Issues",
        "recommended": true,
        "url": "https://github.com/vercel/turbo/tree/main/packages/eslint-plugin-turbo/docs/rules/no-undeclared-env-vars.md"
      },
      "name": "turbo/no-undeclared-env-vars",
      "plugin": "turbo"
    },
    "@next/next/google-font-display": {
      "docs": {
        "description": "Enforce font-display behavior with Google Fonts.",
        "recommended": true,
        "url": "https://nextjs.org/docs/messages/google-font-display"
      },
      "type": "problem",
      "name": "@next/next/google-font-display",
      "plugin": "@next/next"
    },
    "@next/next/google-font-preconnect": {
      "docs": {
        "description": "Ensure `preconnect` is used with Google Fonts.",
        "recommended": true,
        "url": "https://nextjs.org/docs/messages/google-font-preconnect"
      },
      "type": "problem",
      "name": "@next/next/google-font-preconnect",
      "plugin": "@next/next"
    },
    "@next/next/inline-script-id": {
      "docs": {
        "description": "Enforce `id` attribute on `next/script` components with inline content.",
        "recommended": true,
        "url": "https://nextjs.org/docs/messages/inline-script-id"
      },
      "type": "problem",
      "name": "@next/next/inline-script-id",
      "plugin": "@next/next"
    },
    "@next/next/next-script-for-ga": {
      "docs": {
        "description": "Prefer `next/script` component when using the inline script for Google Analytics.",
        "recommended": true,
        "url": "https://nextjs.org/docs/messages/next-script-for-ga"
      },
      "type": "problem",
      "name": "@next/next/next-script-for-ga",
      "plugin": "@next/next"
    },
    "@next/next/no-assign-module-variable": {
      "docs": {
        "description": "Prevent assignment to the `module` variable.",
        "recommended": true,
        "url": "https://nextjs.org/docs/messages/no-assign-module-variable"
      },
      "type": "problem",
      "name": "@next/next/no-assign-module-variable",
      "plugin": "@next/next"
    },
    "@next/next/no-async-client-component": {
      "docs": {
        "description": "Prevent client components from being async functions.",
        "recommended": true,
        "url": "https://nextjs.org/docs/messages/no-async-client-component"
      },
      "type": "problem",
      "name": "@next/next/no-async-client-component",
      "plugin": "@next/next"
    },
    "@next/next/no-before-interactive-script-outside-document": {
      "docs": {
        "description": "Prevent usage of `next/script`'s `beforeInteractive` strategy outside of `pages/_document.js`.",
        "recommended": true,
        "url": "https://nextjs.org/docs/messages/no-before-interactive-script-outside-document"
      },
      "type": "problem",
      "name": "@next/next/no-before-interactive-script-outside-document",
      "plugin": "@next/next"
    },
    "@next/next/no-css-tags": {
      "docs": {
        "description": "Prevent manual stylesheet tags.",
        "recommended": true,
        "url": "https://nextjs.org/docs/messages/no-css-tags"
      },
      "type": "problem",
      "name": "@next/next/no-css-tags",
      "plugin": "@next/next"
    },
    "@next/next/no-document-import-in-page": {
      "docs": {
        "description": "Prevent importing `next/document` outside of `pages/_document.js`.",
        "recommended": true,
        "url": "https://nextjs.org/docs/messages/no-document-import-in-page"
      },
      "type": "problem",
      "name": "@next/next/no-document-import-in-page",
      "plugin": "@next/next"
    },
    "@next/next/no-duplicate-head": {
      "docs": {
        "description": "Prevent duplicate usage of `<Head>` in `pages/_document.js`.",
        "recommended": true,
        "url": "https://nextjs.org/docs/messages/no-duplicate-head"
      },
      "type": "problem",
      "name": "@next/next/no-duplicate-head",
      "plugin": "@next/next"
    },
    "@next/next/no-head-element": {
      "docs": {
        "description": "Prevent usage of `<head>` element.",
        "category": "HTML",
        "recommended": true,
        "url": "https://nextjs.org/docs/messages/no-head-element"
      },
      "type": "problem",
      "name": "@next/next/no-head-element",
      "plugin": "@next/next"
    },
    "@next/next/no-head-import-in-document": {
      "docs": {
        "description": "Prevent usage of `next/head` in `pages/_document.js`.",
        "recommended": true,
        "url": "https://nextjs.org/docs/messages/no-head-import-in-document"
      },
      "type": "problem",
      "name": "@next/next/no-head-import-in-document",
      "plugin": "@next/next"
    },
    "@next/next/no-html-link-for-pages": {
      "docs": {
        "description": "Prevent usage of `<a>` elements to navigate to internal Next.js pages.",
        "category": "HTML",
        "recommended": true,
        "url": "https://nextjs.org/docs/messages/no-html-link-for-pages"
      },
      "type": "problem",
      "name": "@next/next/no-html-link-for-pages",
      "plugin": "@next/next"
    },
    "@next/next/no-img-element": {
      "docs": {
        "description": "Prevent usage of `<img>` element due to slower LCP and higher bandwidth.",
        "category": "HTML",
        "recommended": true,
        "url": "https://nextjs.org/docs/messages/no-img-element"
      },
      "type": "problem",
      "name": "@next/next/no-img-element",
      "plugin": "@next/next"
    },
    "@next/next/no-page-custom-font": {
      "docs": {
        "description": "Prevent page-only custom fonts.",
        "recommended": true,
        "url": "https://nextjs.org/docs/messages/no-page-custom-font"
      },
      "type": "problem",
      "name": "@next/next/no-page-custom-font",
      "plugin": "@next/next"
    },
    "@next/next/no-script-component-in-head": {
      "docs": {
        "description": "Prevent usage of `next/script` in `next/head` component.",
        "recommended": true,
        "url": "https://nextjs.org/docs/messages/no-script-component-in-head"
      },
      "type": "problem",
      "name": "@next/next/no-script-component-in-head",
      "plugin": "@next/next"
    },
    "@next/next/no-styled-jsx-in-document": {
      "docs": {
        "description": "Prevent usage of `styled-jsx` in `pages/_document.js`.",
        "recommended": true,
        "url": "https://nextjs.org/docs/messages/no-styled-jsx-in-document"
      },
      "type": "problem",
      "name": "@next/next/no-styled-jsx-in-document",
      "plugin": "@next/next"
    },
    "@next/next/no-sync-scripts": {
      "docs": {
        "description": "Prevent synchronous scripts.",
        "recommended": true,
        "url": "https://nextjs.org/docs/messages/no-sync-scripts"
      },
      "type": "problem",
      "name": "@next/next/no-sync-scripts",
      "plugin": "@next/next"
    },
    "@next/next/no-title-in-document-head": {
      "docs": {
        "description": "Prevent usage of `<title>` with `Head` component from `next/document`.",
        "recommended": true,
        "url": "https://nextjs.org/docs/messages/no-title-in-document-head"
      },
      "type": "problem",
      "name": "@next/next/no-title-in-document-head",
      "plugin": "@next/next"
    },
    "@next/next/no-typos": {
      "docs": {
        "description": "Prevent common typos in Next.js data fetching functions.",
        "recommended": true
      },
      "type": "problem",
      "name": "@next/next/no-typos",
      "plugin": "@next/next"
    },
    "@next/next/no-unwanted-polyfillio": {
      "docs": {
        "description": "Prevent duplicate polyfills from Polyfill.io.",
        "category": "HTML",
        "recommended": true,
        "url": "https://nextjs.org/docs/messages/no-unwanted-polyfillio"
      },
      "type": "problem",
      "name": "@next/next/no-unwanted-polyfillio",
      "plugin": "@next/next"
    },
    "playwright/expect-expect": {
      "docs": {
        "category": "Best Practices",
        "description": "Enforce assertion to be made in a test body",
        "recommended": true,
        "url": "https://github.com/playwright-community/eslint-plugin-playwright/tree/main/docs/rules/expect-expect.md"
      },
      "type": "problem",
      "name": "playwright/expect-expect",
      "plugin": "playwright"
    },
    "playwright/max-expects": {
      "docs": {
        "category": "Best Practices",
        "description": "Enforces a maximum number assertion calls in a test body",
        "recommended": false,
        "url": "https://github.com/playwright-community/eslint-plugin-playwright/tree/main/docs/rules/max-expects.md"
      },
      "type": "suggestion",
      "name": "playwright/max-expects",
      "plugin": "playwright"
    },
    "playwright/max-nested-describe": {
      "docs": {
        "category": "Best Practices",
        "description": "Enforces a maximum depth to nested describe calls",
        "recommended": true,
        "url": "https://github.com/playwright-community/eslint-plugin-playwright/tree/main/docs/rules/max-nested-describe.md"
      },
      "type": "suggestion",
      "name": "playwright/max-nested-describe",
      "plugin": "playwright"
    },
    "playwright/missing-playwright-await": {
      "docs": {
        "category": "Possible Errors",
        "description": "Identify false positives when async Playwright APIs are not properly awaited.",
        "recommended": true,
        "url": "https://github.com/playwright-community/eslint-plugin-playwright/tree/main/docs/rules/missing-playwright-await.md"
      },
      "fixable": "code",
      "type": "problem",
      "name": "playwright/missing-playwright-await",
      "plugin": "playwright"
    },
    "playwright/no-commented-out-tests": {
      "docs": {
        "category": "Best Practices",
        "description": "Disallow commented out tests",
        "recommended": true,
        "url": "https://github.com/playwright-community/eslint-plugin-playwright/tree/main/docs/rules/no-commented-out-tests.md"
      },
      "type": "problem",
      "name": "playwright/no-commented-out-tests",
      "plugin": "playwright"
    },
    "playwright/no-conditional-expect": {
      "docs": {
        "category": "Best Practices",
        "description": "Disallow calling `expect` conditionally",
        "recommended": true,
        "url": "https://github.com/playwright-community/eslint-plugin-playwright/tree/main/docs/rules/no-conditional-expect.md"
      },
      "type": "problem",
      "name": "playwright/no-conditional-expect",
      "plugin": "playwright"
    },
    "playwright/no-conditional-in-test": {
      "docs": {
        "category": "Best Practices",
        "description": "Disallow conditional logic in tests",
        "recommended": true,
        "url": "https://github.com/playwright-community/eslint-plugin-playwright/tree/main/docs/rules/no-conditional-in-test.md"
      },
      "type": "problem",
      "name": "playwright/no-conditional-in-test",
      "plugin": "playwright"
    },
    "playwright/no-duplicate-hooks": {
      "docs": {
        "category": "Best Practices",
        "description": "Disallow duplicate setup and teardown hooks",
        "recommended": false,
        "url": "https://github.com/playwright-community/eslint-plugin-playwright/tree/main/docs/rules/no-duplicate-hooks.md"
      },
      "type": "suggestion",
      "name": "playwright/no-duplicate-hooks",
      "plugin": "playwright"
    },
    "playwright/no-element-handle": {
      "docs": {
        "category": "Possible Errors",
        "description": "The use of ElementHandle is discouraged, use Locator instead",
        "recommended": true,
        "url": "https://github.com/playwright-community/eslint-plugin-playwright/tree/main/docs/rules/no-element-handle.md"
      },
      "hasSuggestions": true,
      "type": "suggestion",
      "name": "playwright/no-element-handle",
      "plugin": "playwright"
    },
    "playwright/no-eval": {
      "docs": {
        "category": "Possible Errors",
        "description": "The use of `page.$eval` and `page.$$eval` are discouraged, use `locator.evaluate` or `locator.evaluateAll` instead",
        "recommended": true,
        "url": "https://github.com/playwright-community/eslint-plugin-playwright/tree/main/docs/rules/no-eval.md"
      },
      "type": "problem",
      "name": "playwright/no-eval",
      "plugin": "playwright"
    },
    "playwright/no-focused-test": {
      "docs": {
        "category": "Possible Errors",
        "description": "Prevent usage of `.only()` focus test annotation",
        "recommended": true,
        "url": "https://github.com/playwright-community/eslint-plugin-playwright/tree/main/docs/rules/no-focused-test.md"
      },
      "hasSuggestions": true,
      "type": "problem",
      "name": "playwright/no-focused-test",
      "plugin": "playwright"
    },
    "playwright/no-force-option": {
      "docs": {
        "category": "Best Practices",
        "description": "Prevent usage of `{ force: true }` option.",
        "recommended": true,
        "url": "https://github.com/playwright-community/eslint-plugin-playwright/tree/main/docs/rules/no-force-option.md"
      },
      "type": "suggestion",
      "name": "playwright/no-force-option",
      "plugin": "playwright"
    },
    "playwright/no-get-by-title": {
      "docs": {
        "category": "Best Practices",
        "description": "Disallows the usage of getByTitle()",
        "recommended": false,
        "url": "https://github.com/playwright-community/eslint-plugin-playwright/tree/main/docs/rules/no-get-by-title.md"
      },
      "type": "suggestion",
      "name": "playwright/no-get-by-title",
      "plugin": "playwright"
    },
    "playwright/no-hooks": {
      "docs": {
        "category": "Best Practices",
        "description": "Disallow setup and teardown hooks",
        "recommended": false,
        "url": "https://github.com/playwright-community/eslint-plugin-playwright/tree/main/docs/rules/no-hooks.md"
      },
      "type": "suggestion",
      "name": "playwright/no-hooks",
      "plugin": "playwright"
    },
    "playwright/no-nested-step": {
      "docs": {
        "category": "Best Practices",
        "description": "Disallow nested `test.step()` methods",
        "recommended": true,
        "url": "https://github.com/playwright-community/eslint-plugin-playwright/tree/main/docs/rules/no-nested-step.md"
      },
      "type": "problem",
      "name": "playwright/no-nested-step",
      "plugin": "playwright"
    },
    "playwright/no-networkidle": {
      "docs": {
        "category": "Possible Errors",
        "description": "Prevent usage of the networkidle option",
        "recommended": true,
        "url": "https://github.com/playwright-community/eslint-plugin-playwright/tree/main/docs/rules/no-networkidle.md"
      },
      "type": "problem",
      "name": "playwright/no-networkidle",
      "plugin": "playwright"
    },
    "playwright/no-nth-methods": {
      "docs": {
        "category": "Best Practices",
        "description": "Disallow usage of nth methods",
        "recommended": true,
        "url": "https://github.com/playwright-community/eslint-plugin-playwright/tree/main/docs/rules/no-nth-methods.md"
      },
      "type": "problem",
      "name": "playwright/no-nth-methods",
      "plugin": "playwright"
    },
    "playwright/no-page-pause": {
      "docs": {
        "category": "Possible Errors",
        "description": "Prevent usage of page.pause()",
        "recommended": true,
        "url": "https://github.com/playwright-community/eslint-plugin-playwright/tree/main/docs/rules/no-page-pause.md"
      },
      "type": "problem",
      "name": "playwright/no-page-pause",
      "plugin": "playwright"
    },
    "playwright/no-raw-locators": {
      "docs": {
        "category": "Best Practices",
        "description": "Disallows the usage of raw locators",
        "recommended": false,
        "url": "https://github.com/playwright-community/eslint-plugin-playwright/tree/main/docs/rules/no-raw-locators.md"
      },
      "type": "suggestion",
      "name": "playwright/no-raw-locators",
      "plugin": "playwright"
    },
    "playwright/no-restricted-matchers": {
      "docs": {
        "category": "Best Practices",
        "description": "Disallow specific matchers & modifiers",
        "recommended": false,
        "url": "https://github.com/playwright-community/eslint-plugin-playwright/tree/main/docs/rules/no-restricted-matchers.md"
      },
      "type": "suggestion",
      "name": "playwright/no-restricted-matchers",
      "plugin": "playwright"
    },
    "playwright/no-skipped-test": {
      "docs": {
        "category": "Best Practices",
        "description": "Prevent usage of the `.skip()` skip test annotation.",
        "recommended": true,
        "url": "https://github.com/playwright-community/eslint-plugin-playwright/tree/main/docs/rules/no-skipped-test.md"
      },
      "hasSuggestions": true,
      "type": "suggestion",
      "name": "playwright/no-skipped-test",
      "plugin": "playwright"
    },
    "playwright/no-standalone-expect": {
      "docs": {
        "category": "Best Practices",
        "description": "Disallow using `expect` outside of `test` blocks",
        "recommended": false,
        "url": "https://github.com/playwright-community/eslint-plugin-playwright/tree/main/docs/rules/no-standalone-expect.md"
      },
      "fixable": "code",
      "type": "suggestion",
      "name": "playwright/no-standalone-expect",
      "plugin": "playwright"
    },
    "playwright/no-unsafe-references": {
      "docs": {
        "category": "Possible Errors",
        "description": "Prevent unsafe variable references in page.evaluate()",
        "recommended": true,
        "url": "https://github.com/playwright-community/eslint-plugin-playwright/tree/main/docs/rules/no-unsafe-references.md"
      },
      "fixable": "code",
      "type": "problem",
      "name": "playwright/no-unsafe-references",
      "plugin": "playwright"
    },
    "playwright/no-useless-await": {
      "docs": {
        "category": "Possible Errors",
        "description": "Disallow unnecessary awaits for Playwright methods",
        "recommended": true,
        "url": "https://github.com/playwright-community/eslint-plugin-playwright/tree/main/docs/rules/no-useless-await.md"
      },
      "fixable": "code",
      "type": "problem",
      "name": "playwright/no-useless-await",
      "plugin": "playwright"
    },
    "playwright/no-useless-not": {
      "docs": {
        "category": "Best Practices",
        "description": "Disallow usage of 'not' matchers when a more specific matcher exists",
        "recommended": true,
        "url": "https://github.com/playwright-community/eslint-plugin-playwright/tree/main/docs/rules/no-useless-not.md"
      },
      "fixable": "code",
      "type": "problem",
      "name": "playwright/no-useless-not",
      "plugin": "playwright"
    },
    "playwright/no-wait-for-selector": {
      "docs": {
        "category": "Best Practices",
        "description": "Prevent usage of page.waitForSelector()",
        "recommended": true,
        "url": "https://github.com/playwright-community/eslint-plugin-playwright/tree/main/docs/rules/no-wait-for-selector.md"
      },
      "hasSuggestions": true,
      "type": "suggestion",
      "name": "playwright/no-wait-for-selector",
      "plugin": "playwright"
    },
    "playwright/no-wait-for-timeout": {
      "docs": {
        "category": "Best Practices",
        "description": "Prevent usage of page.waitForTimeout()",
        "recommended": true,
        "url": "https://github.com/playwright-community/eslint-plugin-playwright/tree/main/docs/rules/no-wait-for-timeout.md"
      },
      "hasSuggestions": true,
      "type": "suggestion",
      "name": "playwright/no-wait-for-timeout",
      "plugin": "playwright"
    },
    "playwright/prefer-comparison-matcher": {
      "docs": {
        "category": "Best Practices",
        "description": "Suggest using the built-in comparison matchers",
        "recommended": false,
        "url": "https://github.com/playwright-community/eslint-plugin-playwright/tree/main/docs/rules/prefer-comparision-matcher.md"
      },
      "fixable": "code",
      "type": "suggestion",
      "name": "playwright/prefer-comparison-matcher",
      "plugin": "playwright"
    },
    "playwright/prefer-equality-matcher": {
      "docs": {
        "category": "Best Practices",
        "description": "Suggest using the built-in equality matchers",
        "recommended": false,
        "url": "https://github.com/playwright-community/eslint-plugin-playwright/tree/main/docs/rules/prefer-equality-matcher.md"
      },
      "hasSuggestions": true,
      "type": "suggestion",
      "name": "playwright/prefer-equality-matcher",
      "plugin": "playwright"
    },
    "playwright/prefer-hooks-in-order": {
      "docs": {
        "category": "Best Practices",
        "description": "Prefer having hooks in a consistent order",
        "recommended": false,
        "url": "https://github.com/playwright-community/eslint-plugin-playwright/tree/main/docs/rules/prefer-hooks-in-order.md"
      },
      "type": "suggestion",
      "name": "playwright/prefer-hooks-in-order",
      "plugin": "playwright"
    },
    "playwright/prefer-hooks-on-top": {
      "docs": {
        "category": "Best Practices",
        "description": "Suggest having hooks before any test cases",
        "recommended": false,
        "url": "https://github.com/playwright-community/eslint-plugin-playwright/tree/main/docs/rules/prefer-hooks-on-top.md"
      },
      "type": "suggestion",
      "name": "playwright/prefer-hooks-on-top",
      "plugin": "playwright"
    },
    "playwright/prefer-lowercase-title": {
      "docs": {
        "category": "Best Practices",
        "description": "Enforce lowercase test names",
        "recommended": false,
        "url": "https://github.com/playwright-community/eslint-plugin-playwright/tree/main/docs/rules/prefer-lowercase-title.md"
      },
      "fixable": "code",
      "type": "suggestion",
      "name": "playwright/prefer-lowercase-title",
      "plugin": "playwright"
    },
    "playwright/prefer-strict-equal": {
      "docs": {
        "category": "Best Practices",
        "description": "Suggest using `toStrictEqual()`",
        "recommended": false,
        "url": "https://github.com/playwright-community/eslint-plugin-playwright/tree/main/docs/rules/prefer-strict-equal.md"
      },
      "fixable": "code",
      "hasSuggestions": true,
      "type": "suggestion",
      "name": "playwright/prefer-strict-equal",
      "plugin": "playwright"
    },
    "playwright/prefer-to-be": {
      "docs": {
        "category": "Best Practices",
        "description": "Suggest using `toBe()` for primitive literals",
        "recommended": false,
        "url": "https://github.com/playwright-community/eslint-plugin-playwright/tree/main/docs/rules/prefer-to-be.md"
      },
      "fixable": "code",
      "type": "suggestion",
      "name": "playwright/prefer-to-be",
      "plugin": "playwright"
    },
    "playwright/prefer-to-contain": {
      "docs": {
        "category": "Best Practices",
        "description": "Suggest using toContain()",
        "recommended": false,
        "url": "https://github.com/playwright-community/eslint-plugin-playwright/tree/main/docs/rules/prefer-to-contain.md"
      },
      "fixable": "code",
      "type": "suggestion",
      "name": "playwright/prefer-to-contain",
      "plugin": "playwright"
    },
    "playwright/prefer-to-have-count": {
      "docs": {
        "category": "Best Practices",
        "description": "Suggest using `toHaveCount()`",
        "recommended": false,
        "url": "https://github.com/playwright-community/eslint-plugin-playwright/tree/main/docs/rules/prefer-to-have-count.md"
      },
      "fixable": "code",
      "type": "suggestion",
      "name": "playwright/prefer-to-have-count",
      "plugin": "playwright"
    },
    "playwright/prefer-to-have-length": {
      "docs": {
        "category": "Best Practices",
        "description": "Suggest using `toHaveLength()`",
        "recommended": false,
        "url": "https://github.com/playwright-community/eslint-plugin-playwright/tree/main/docs/rules/prefer-to-have-length.md"
      },
      "fixable": "code",
      "type": "suggestion",
      "name": "playwright/prefer-to-have-length",
      "plugin": "playwright"
    },
    "playwright/prefer-web-first-assertions": {
      "docs": {
        "category": "Best Practices",
        "description": "Prefer web first assertions",
        "recommended": true,
        "url": "https://github.com/playwright-community/eslint-plugin-playwright/tree/main/docs/rules/prefer-web-first-assertions.md"
      },
      "fixable": "code",
      "type": "suggestion",
      "name": "playwright/prefer-web-first-assertions",
      "plugin": "playwright"
    },
    "playwright/require-hook": {
      "docs": {
        "category": "Best Practices",
        "description": "Require setup and teardown code to be within a hook",
        "recommended": false,
        "url": "https://github.com/playwright-community/eslint-plugin-playwright/tree/main/docs/rules/require-hook.md"
      },
      "type": "suggestion",
      "name": "playwright/require-hook",
      "plugin": "playwright"
    },
    "playwright/require-soft-assertions": {
      "docs": {
        "description": "Require all assertions to use `expect.soft`",
        "recommended": false,
        "url": "https://github.com/playwright-community/eslint-plugin-playwright/tree/main/docs/rules/require-soft-assertions.md"
      },
      "fixable": "code",
      "type": "suggestion",
      "name": "playwright/require-soft-assertions",
      "plugin": "playwright"
    },
    "playwright/require-to-throw-message": {
      "docs": {
        "category": "Best Practices",
        "description": "Require a message for `toThrow()`",
        "recommended": false,
        "url": "https://github.com/playwright-community/eslint-plugin-playwright/tree/main/docs/rules/require-to-throw-message.md"
      },
      "type": "suggestion",
      "name": "playwright/require-to-throw-message",
      "plugin": "playwright"
    },
    "playwright/require-top-level-describe": {
      "docs": {
        "category": "Best Practices",
        "description": "Require test cases and hooks to be inside a `test.describe` block",
        "recommended": false,
        "url": "https://github.com/playwright-community/eslint-plugin-playwright/tree/main/docs/rules/require-top-level-describe.md"
      },
      "type": "suggestion",
      "name": "playwright/require-top-level-describe",
      "plugin": "playwright"
    },
    "playwright/valid-describe-callback": {
      "docs": {
        "category": "Possible Errors",
        "description": "Enforce valid `describe()` callback",
        "recommended": true,
        "url": "https://github.com/playwright-community/eslint-plugin-playwright/tree/main/docs/rules/valid-describe-callback.md"
      },
      "type": "problem",
      "name": "playwright/valid-describe-callback",
      "plugin": "playwright"
    },
    "playwright/valid-expect": {
      "docs": {
        "category": "Possible Errors",
        "description": "Enforce valid `expect()` usage",
        "recommended": true,
        "url": "https://github.com/playwright-community/eslint-plugin-playwright/tree/main/docs/rules/valid-expect.md"
      },
      "type": "problem",
      "name": "playwright/valid-expect",
      "plugin": "playwright"
    },
    "playwright/valid-expect-in-promise": {
      "docs": {
        "category": "Best Practices",
        "description": "Require promises that have expectations in their chain to be valid",
        "recommended": true,
        "url": "https://github.com/playwright-community/eslint-plugin-playwright/tree/main/docs/rules/valid-expect-in-promise.md"
      },
      "type": "suggestion",
      "name": "playwright/valid-expect-in-promise",
      "plugin": "playwright"
    },
    "playwright/valid-title": {
      "docs": {
        "category": "Best Practices",
        "description": "Enforce valid titles",
        "recommended": true,
        "url": "https://github.com/playwright-community/eslint-plugin-playwright/tree/main/docs/rules/valid-title.md"
      },
      "fixable": "code",
      "type": "suggestion",
      "name": "playwright/valid-title",
      "plugin": "playwright"
    },
    "testing-library/await-async-events": {
      "type": "problem",
      "docs": {
        "description": "Enforce promises from async event methods are handled",
        "recommendedConfig": {
          "dom": [
            "error",
            {
              "eventModule": "userEvent"
            }
          ],
          "angular": [
            "error",
            {
              "eventModule": "userEvent"
            }
          ],
          "react": [
            "error",
            {
              "eventModule": "userEvent"
            }
          ],
          "vue": [
            "error",
            {
              "eventModule": [
                "fireEvent",
                "userEvent"
              ]
            }
          ],
          "marko": [
            "error",
            {
              "eventModule": [
                "fireEvent",
                "userEvent"
              ]
            }
          ]
        },
        "recommended": false,
        "url": "https://github.com/testing-library/eslint-plugin-testing-library/tree/main/docs/rules/await-async-events.md"
      },
      "fixable": "code",
      "name": "testing-library/await-async-events",
      "plugin": "testing-library"
    },
    "testing-library/await-async-queries": {
      "type": "problem",
      "docs": {
        "description": "Enforce promises from async queries to be handled",
        "recommendedConfig": {
          "dom": "error",
          "angular": "error",
          "react": "error",
          "vue": "error",
          "marko": "error"
        },
        "recommended": false,
        "url": "https://github.com/testing-library/eslint-plugin-testing-library/tree/main/docs/rules/await-async-queries.md"
      },
      "name": "testing-library/await-async-queries",
      "plugin": "testing-library"
    },
    "testing-library/await-async-utils": {
      "type": "problem",
      "docs": {
        "description": "Enforce promises from async utils to be awaited properly",
        "recommendedConfig": {
          "dom": "error",
          "angular": "error",
          "react": "error",
          "vue": "error",
          "marko": "error"
        },
        "recommended": false,
        "url": "https://github.com/testing-library/eslint-plugin-testing-library/tree/main/docs/rules/await-async-utils.md"
      },
      "name": "testing-library/await-async-utils",
      "plugin": "testing-library"
    },
    "testing-library/consistent-data-testid": {
      "type": "suggestion",
      "docs": {
        "description": "Ensures consistent usage of `data-testid`",
        "recommendedConfig": {
          "dom": false,
          "angular": false,
          "react": false,
          "vue": false,
          "marko": false
        },
        "recommended": false,
        "url": "https://github.com/testing-library/eslint-plugin-testing-library/tree/main/docs/rules/consistent-data-testid.md"
      },
      "name": "testing-library/consistent-data-testid",
      "plugin": "testing-library"
    },
    "testing-library/no-await-sync-events": {
      "type": "problem",
      "docs": {
        "description": "Disallow unnecessary `await` for sync events",
        "recommendedConfig": {
          "dom": [
            "error",
            {
              "eventModules": [
                "fire-event"
              ]
            }
          ],
          "angular": [
            "error",
            {
              "eventModules": [
                "fire-event"
              ]
            }
          ],
          "react": [
            "error",
            {
              "eventModules": [
                "fire-event"
              ]
            }
          ],
          "vue": false,
          "marko": false
        },
        "recommended": false,
        "url": "https://github.com/testing-library/eslint-plugin-testing-library/tree/main/docs/rules/no-await-sync-events.md"
      },
      "name": "testing-library/no-await-sync-events",
      "plugin": "testing-library"
    },
    "testing-library/no-await-sync-queries": {
      "type": "problem",
      "docs": {
        "description": "Disallow unnecessary `await` for sync queries",
        "recommendedConfig": {
          "dom": "error",
          "angular": "error",
          "react": "error",
          "vue": "error",
          "marko": "error"
        },
        "recommended": false,
        "url": "https://github.com/testing-library/eslint-plugin-testing-library/tree/main/docs/rules/no-await-sync-queries.md"
      },
      "name": "testing-library/no-await-sync-queries",
      "plugin": "testing-library"
    },
    "testing-library/no-container": {
      "type": "problem",
      "docs": {
        "description": "Disallow the use of `container` methods",
        "recommendedConfig": {
          "dom": false,
          "angular": "error",
          "react": "error",
          "vue": "error",
          "marko": "error"
        },
        "recommended": false,
        "url": "https://github.com/testing-library/eslint-plugin-testing-library/tree/main/docs/rules/no-container.md"
      },
      "name": "testing-library/no-container",
      "plugin": "testing-library"
    },
    "testing-library/no-debugging-utils": {
      "type": "problem",
      "docs": {
        "description": "Disallow the use of debugging utilities like `debug`",
        "recommendedConfig": {
          "dom": false,
          "angular": "warn",
          "react": "warn",
          "vue": "warn",
          "marko": "warn"
        },
        "recommended": false,
        "url": "https://github.com/testing-library/eslint-plugin-testing-library/tree/main/docs/rules/no-debugging-utils.md"
      },
      "name": "testing-library/no-debugging-utils",
      "plugin": "testing-library"
    },
    "testing-library/no-dom-import": {
      "type": "problem",
      "docs": {
        "description": "Disallow importing from DOM Testing Library",
        "recommendedConfig": {
          "dom": false,
          "angular": [
            "error",
            "angular"
          ],
          "react": [
            "error",
            "react"
          ],
          "vue": [
            "error",
            "vue"
          ],
          "marko": [
            "error",
            "marko"
          ]
        },
        "recommended": false,
        "url": "https://github.com/testing-library/eslint-plugin-testing-library/tree/main/docs/rules/no-dom-import.md"
      },
      "fixable": "code",
      "name": "testing-library/no-dom-import",
      "plugin": "testing-library"
    },
    "testing-library/no-global-regexp-flag-in-query": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow the use of the global RegExp flag (/g) in queries",
        "recommendedConfig": {
          "dom": "error",
          "angular": "error",
          "react": "error",
          "vue": "error",
          "marko": "error"
        },
        "recommended": false,
        "url": "https://github.com/testing-library/eslint-plugin-testing-library/tree/main/docs/rules/no-global-regexp-flag-in-query.md"
      },
      "fixable": "code",
      "name": "testing-library/no-global-regexp-flag-in-query",
      "plugin": "testing-library"
    },
    "testing-library/no-manual-cleanup": {
      "type": "problem",
      "docs": {
        "description": "Disallow the use of `cleanup`",
        "recommendedConfig": {
          "dom": false,
          "angular": false,
          "react": "error",
          "vue": "error",
          "marko": false
        },
        "recommended": false,
        "url": "https://github.com/testing-library/eslint-plugin-testing-library/tree/main/docs/rules/no-manual-cleanup.md"
      },
      "name": "testing-library/no-manual-cleanup",
      "plugin": "testing-library"
    },
    "testing-library/no-node-access": {
      "type": "problem",
      "docs": {
        "description": "Disallow direct Node access",
        "recommendedConfig": {
          "dom": "error",
          "angular": "error",
          "react": "error",
          "vue": "error",
          "marko": "error"
        },
        "recommended": false,
        "url": "https://github.com/testing-library/eslint-plugin-testing-library/tree/main/docs/rules/no-node-access.md"
      },
      "name": "testing-library/no-node-access",
      "plugin": "testing-library"
    },
    "testing-library/no-promise-in-fire-event": {
      "type": "problem",
      "docs": {
        "description": "Disallow the use of promises passed to a `fireEvent` method",
        "recommendedConfig": {
          "dom": "error",
          "angular": "error",
          "react": "error",
          "vue": "error",
          "marko": "error"
        },
        "recommended": false,
        "url": "https://github.com/testing-library/eslint-plugin-testing-library/tree/main/docs/rules/no-promise-in-fire-event.md"
      },
      "name": "testing-library/no-promise-in-fire-event",
      "plugin": "testing-library"
    },
    "testing-library/no-render-in-lifecycle": {
      "type": "problem",
      "docs": {
        "description": "Disallow the use of `render` in testing frameworks setup functions",
        "recommendedConfig": {
          "dom": false,
          "angular": "error",
          "react": "error",
          "vue": "error",
          "marko": "error"
        },
        "recommended": false,
        "url": "https://github.com/testing-library/eslint-plugin-testing-library/tree/main/docs/rules/no-render-in-lifecycle.md"
      },
      "name": "testing-library/no-render-in-lifecycle",
      "plugin": "testing-library"
    },
    "testing-library/no-unnecessary-act": {
      "type": "problem",
      "docs": {
        "description": "Disallow wrapping Testing Library utils or empty callbacks in `act`",
        "recommendedConfig": {
          "dom": false,
          "angular": false,
          "react": "error",
          "vue": false,
          "marko": "error"
        },
        "recommended": false,
        "url": "https://github.com/testing-library/eslint-plugin-testing-library/tree/main/docs/rules/no-unnecessary-act.md"
      },
      "name": "testing-library/no-unnecessary-act",
      "plugin": "testing-library"
    },
    "testing-library/no-wait-for-multiple-assertions": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow the use of multiple `expect` calls inside `waitFor`",
        "recommendedConfig": {
          "dom": "error",
          "angular": "error",
          "react": "error",
          "vue": "error",
          "marko": "error"
        },
        "recommended": false,
        "url": "https://github.com/testing-library/eslint-plugin-testing-library/tree/main/docs/rules/no-wait-for-multiple-assertions.md"
      },
      "name": "testing-library/no-wait-for-multiple-assertions",
      "plugin": "testing-library"
    },
    "testing-library/no-wait-for-side-effects": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow the use of side effects in `waitFor`",
        "recommendedConfig": {
          "dom": "error",
          "angular": "error",
          "react": "error",
          "vue": "error",
          "marko": "error"
        },
        "recommended": false,
        "url": "https://github.com/testing-library/eslint-plugin-testing-library/tree/main/docs/rules/no-wait-for-side-effects.md"
      },
      "name": "testing-library/no-wait-for-side-effects",
      "plugin": "testing-library"
    },
    "testing-library/no-wait-for-snapshot": {
      "type": "problem",
      "docs": {
        "description": "Ensures no snapshot is generated inside of a `waitFor` call",
        "recommendedConfig": {
          "dom": "error",
          "angular": "error",
          "react": "error",
          "vue": "error",
          "marko": "error"
        },
        "recommended": false,
        "url": "https://github.com/testing-library/eslint-plugin-testing-library/tree/main/docs/rules/no-wait-for-snapshot.md"
      },
      "name": "testing-library/no-wait-for-snapshot",
      "plugin": "testing-library"
    },
    "testing-library/prefer-explicit-assert": {
      "type": "suggestion",
      "docs": {
        "description": "Suggest using explicit assertions rather than standalone queries",
        "recommendedConfig": {
          "dom": false,
          "angular": false,
          "react": false,
          "vue": false,
          "marko": false
        },
        "recommended": false,
        "url": "https://github.com/testing-library/eslint-plugin-testing-library/tree/main/docs/rules/prefer-explicit-assert.md"
      },
      "name": "testing-library/prefer-explicit-assert",
      "plugin": "testing-library"
    },
    "testing-library/prefer-find-by": {
      "type": "suggestion",
      "docs": {
        "description": "Suggest using `find(All)By*` query instead of `waitFor` + `get(All)By*` to wait for elements",
        "recommendedConfig": {
          "dom": "error",
          "angular": "error",
          "react": "error",
          "vue": "error",
          "marko": "error"
        },
        "recommended": false,
        "url": "https://github.com/testing-library/eslint-plugin-testing-library/tree/main/docs/rules/prefer-find-by.md"
      },
      "fixable": "code",
      "name": "testing-library/prefer-find-by",
      "plugin": "testing-library"
    },
    "testing-library/prefer-implicit-assert": {
      "type": "suggestion",
      "docs": {
        "description": "Suggest using implicit assertions for getBy* & findBy* queries",
        "recommendedConfig": {
          "dom": false,
          "angular": false,
          "react": false,
          "vue": false,
          "marko": false
        },
        "recommended": false,
        "url": "https://github.com/testing-library/eslint-plugin-testing-library/tree/main/docs/rules/prefer-implicit-assert.md"
      },
      "name": "testing-library/prefer-implicit-assert",
      "plugin": "testing-library"
    },
    "testing-library/prefer-presence-queries": {
      "docs": {
        "description": "Ensure appropriate `get*`/`query*` queries are used with their respective matchers",
        "recommendedConfig": {
          "dom": "error",
          "angular": "error",
          "react": "error",
          "vue": "error",
          "marko": "error"
        },
        "recommended": false,
        "url": "https://github.com/testing-library/eslint-plugin-testing-library/tree/main/docs/rules/prefer-presence-queries.md"
      },
      "type": "suggestion",
      "name": "testing-library/prefer-presence-queries",
      "plugin": "testing-library"
    },
    "testing-library/prefer-query-by-disappearance": {
      "type": "problem",
      "docs": {
        "description": "Suggest using `queryBy*` queries when waiting for disappearance",
        "recommendedConfig": {
          "dom": "error",
          "angular": "error",
          "react": "error",
          "vue": "error",
          "marko": "error"
        },
        "recommended": false,
        "url": "https://github.com/testing-library/eslint-plugin-testing-library/tree/main/docs/rules/prefer-query-by-disappearance.md"
      },
      "name": "testing-library/prefer-query-by-disappearance",
      "plugin": "testing-library"
    },
    "testing-library/prefer-query-matchers": {
      "docs": {
        "description": "Ensure the configured `get*`/`query*` query is used with the corresponding matchers",
        "recommendedConfig": {
          "dom": false,
          "angular": false,
          "react": false,
          "vue": false,
          "marko": false
        },
        "recommended": false,
        "url": "https://github.com/testing-library/eslint-plugin-testing-library/tree/main/docs/rules/prefer-query-matchers.md"
      },
      "type": "suggestion",
      "name": "testing-library/prefer-query-matchers",
      "plugin": "testing-library"
    },
    "testing-library/prefer-screen-queries": {
      "type": "suggestion",
      "docs": {
        "description": "Suggest using `screen` while querying",
        "recommendedConfig": {
          "dom": "error",
          "angular": "error",
          "react": "error",
          "vue": "error",
          "marko": "error"
        },
        "recommended": false,
        "url": "https://github.com/testing-library/eslint-plugin-testing-library/tree/main/docs/rules/prefer-screen-queries.md"
      },
      "name": "testing-library/prefer-screen-queries",
      "plugin": "testing-library"
    },
    "testing-library/prefer-user-event": {
      "type": "suggestion",
      "docs": {
        "description": "Suggest using `userEvent` over `fireEvent` for simulating user interactions",
        "recommendedConfig": {
          "dom": false,
          "angular": false,
          "react": false,
          "vue": false,
          "marko": false
        },
        "recommended": false,
        "url": "https://github.com/testing-library/eslint-plugin-testing-library/tree/main/docs/rules/prefer-user-event.md"
      },
      "name": "testing-library/prefer-user-event",
      "plugin": "testing-library"
    },
    "testing-library/render-result-naming-convention": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce a valid naming for return value from `render`",
        "recommendedConfig": {
          "dom": false,
          "angular": "error",
          "react": "error",
          "vue": "error",
          "marko": "error"
        },
        "recommended": false,
        "url": "https://github.com/testing-library/eslint-plugin-testing-library/tree/main/docs/rules/render-result-naming-convention.md"
      },
      "name": "testing-library/render-result-naming-convention",
      "plugin": "testing-library"
    }
  },
  "files": [
    {
      "filepath": "eslint.config.mjs",
      "globs": [
        "**/*.mjs",
        "**/*.?([cm])js"
      ],
      "configs": [
        2,
        15
      ]
    },
    {
      "filepath": "src/configs/comments.ts",
      "globs": [
        "**/*.?([cm])ts",
        "**/*.?([cm])ts"
      ],
      "configs": [
        14,
        15
      ]
    },
    {
      "filepath": "src/configs/ignores.ts",
      "globs": [
        "**/*.?([cm])ts",
        "**/*.?([cm])ts"
      ],
      "configs": [
        14,
        15
      ]
    },
    {
      "filepath": "src/configs/import-sort.ts",
      "globs": [
        "**/*.?([cm])ts",
        "**/*.?([cm])ts"
      ],
      "configs": [
        14,
        15
      ]
    },
    {
      "filepath": "src/configs/imports.ts",
      "globs": [
        "**/*.?([cm])ts",
        "**/*.?([cm])ts"
      ],
      "configs": [
        14,
        15
      ]
    },
    {
      "filepath": "src/configs/javascript.ts",
      "globs": [
        "**/*.?([cm])ts",
        "**/*.?([cm])ts"
      ],
      "configs": [
        14,
        15
      ]
    },
    {
      "filepath": "src/configs/next.ts",
      "globs": [
        "**/*.?([cm])ts",
        "**/*.?([cm])ts"
      ],
      "configs": [
        14,
        15
      ]
    },
    {
      "filepath": "src/configs/playwright.ts",
      "globs": [
        "**/*.?([cm])ts",
        "**/*.?([cm])ts"
      ],
      "configs": [
        14,
        15
      ]
    },
    {
      "filepath": "src/configs/prettier.ts",
      "globs": [
        "**/*.?([cm])ts",
        "**/*.?([cm])ts"
      ],
      "configs": [
        14,
        15
      ]
    },
    {
      "filepath": "src/configs/react.ts",
      "globs": [
        "**/*.?([cm])ts",
        "**/*.?([cm])ts"
      ],
      "configs": [
        14,
        15
      ]
    },
    {
      "filepath": "src/configs/sonarjs.ts",
      "globs": [
        "**/*.?([cm])ts",
        "**/*.?([cm])ts"
      ],
      "configs": [
        14,
        15
      ]
    },
    {
      "filepath": "src/configs/tailwindcss.ts",
      "globs": [
        "**/*.?([cm])ts",
        "**/*.?([cm])ts"
      ],
      "configs": [
        14,
        15
      ]
    },
    {
      "filepath": "src/configs/testing-library.ts",
      "globs": [
        "**/*.?([cm])ts",
        "**/*.?([cm])ts"
      ],
      "configs": [
        14,
        15
      ]
    },
    {
      "filepath": "src/configs/turbo.ts",
      "globs": [
        "**/*.?([cm])ts",
        "**/*.?([cm])ts"
      ],
      "configs": [
        14,
        15
      ]
    },
    {
      "filepath": "src/configs/typescript.ts",
      "globs": [
        "**/*.?([cm])ts",
        "**/*.?([cm])ts"
      ],
      "configs": [
        14,
        15
      ]
    },
    {
      "filepath": "src/configs/unicorn.ts",
      "globs": [
        "**/*.?([cm])ts",
        "**/*.?([cm])ts"
      ],
      "configs": [
        14,
        15
      ]
    },
    {
      "filepath": "src/env.ts",
      "globs": [
        "**/*.?([cm])ts",
        "**/*.?([cm])ts"
      ],
      "configs": [
        14,
        15
      ]
    },
    {
      "filepath": "src/globs.ts",
      "globs": [
        "**/*.?([cm])ts",
        "**/*.?([cm])ts"
      ],
      "configs": [
        14,
        15
      ]
    },
    {
      "filepath": "src/index.ts",
      "globs": [
        "**/*.?([cm])ts",
        "**/*.?([cm])ts"
      ],
      "configs": [
        14,
        15
      ]
    },
    {
      "filepath": "src/plugins.ts",
      "globs": [
        "**/*.?([cm])ts",
        "**/*.?([cm])ts"
      ],
      "configs": [
        14,
        15
      ]
    },
    {
      "filepath": "tsup.config.ts",
      "globs": [
        "**/*.?([cm])ts",
        "**/*.?([cm])ts"
      ],
      "configs": [
        14,
        15
      ]
    }
  ],
  "meta": {
    "lastUpdate": 1721760392740,
    "basePath": "",
    "configPath": ""
  }
}